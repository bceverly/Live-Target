#
#  release.yml
#  Live Target Release Pipeline
#
#  Copyright © 2025 BCEAssociates, Inc. All rights reserved.
#

name: Release Pipeline

permissions:
  contents: write
  actions: read

on:
  push:
    tags:
      - 'v*.*'
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0 or v0.93)'
        required: true
        type: string

env:
  XCODE_VERSION: '16.4'
  
jobs:
  validate-release:
    name: Validate Release
    runs-on: macos-15
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Get Version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
          VERSION="${{ github.ref_name }}"
        else
          echo "❌ Release workflow should only run on version tags or manual dispatch"
          echo "Event: ${{ github.event_name }}, Ref: ${{ github.ref_name }}, Ref Type: ${{ github.ref_type }}"
          exit 1
        fi
        
        # Remove any spaces from version
        VERSION=$(echo "$VERSION" | tr -d ' ')
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Building version: ${VERSION}"
        echo "Debug - Raw version: '${{ github.ref_name }}'"
        
    - name: Validate Version Format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "Validating version: '$VERSION'"
        echo "Version length: ${#VERSION}"
        
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+(\.[0-9]+)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: v1.0.0 or v0.93"
          echo "Characters in version:"
          echo "$VERSION" | od -c
          exit 1
        fi
        echo "✅ Version format is valid: $VERSION"

  build-release:
    name: Build Release
    runs-on: macos-15
    needs: validate-release
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      run: |
        sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer
        xcodebuild -version
        
    - name: Update Version in Project
      run: |
        cd ios/
        VERSION="${{ needs.validate-release.outputs.version }}"
        # Remove 'v' prefix for version number
        VERSION_NUMBER=${VERSION#v}
        
        echo "Setting version to: $VERSION_NUMBER"
        
        # Try to use agvtool, but handle gracefully if not configured
        if agvtool what-marketing-version 2>/dev/null; then
          echo "Using agvtool to update version..."
          agvtool new-marketing-version "$VERSION_NUMBER"
          
          # Set build number to current timestamp for uniqueness
          BUILD_NUMBER=$(date +%Y%m%d%H%M)
          agvtool new-version -all "$BUILD_NUMBER"
          
          echo "Updated to version $VERSION_NUMBER with build $BUILD_NUMBER"
        else
          echo "agvtool not configured, using manual Info.plist update..."
          
          # Update main app Info.plist
          if [ -f "Live Target/Info.plist" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $VERSION_NUMBER" "Live Target/Info.plist" || true
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $(date +%Y%m%d%H%M)" "Live Target/Info.plist" || true
          fi
          
          # Update Watch app Info.plist if it exists
          if [ -f "Live Target Watch App Watch App/Info.plist" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $VERSION_NUMBER" "Live Target Watch App Watch App/Info.plist" || true
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $(date +%Y%m%d%H%M)" "Live Target Watch App Watch App/Info.plist" || true
          fi
          
          echo "Updated Info.plist files to version $VERSION_NUMBER"
        fi
        
    - name: Build Release Archive
      run: |
        cd ios/
        xcodebuild \
          -project "Live Target.xcodeproj" \
          -scheme "Live Target" \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath "Live Target.xcarchive" \
          archive \
          CODE_SIGNING_ALLOWED=NO
          
    - name: Export IPA (Development)
      run: |
        # Create export options plist for development
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>development</string>
            <key>compileBitcode</key>
            <false/>
            <key>signingStyle</key>
            <string>automatic</string>
        </dict>
        </plist>
        EOF
        
        # Note: This will fail without proper signing certificates
        # For demonstration purposes, we'll skip the export step
        echo "Archive created successfully"
        echo "Note: IPA export requires valid signing certificates"
        
    - name: Create Release Artifacts
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Create release directory
        mkdir -p release
        
        # Copy and compress archive
        if [ -d "ios/Live Target.xcarchive" ]; then
          cd ios/
          zip -r "../release/Live Target.xcarchive.zip" "Live Target.xcarchive"
          cd ..
          echo "Archive compressed successfully"
        else
          echo "Archive not found, skipping compression"
        fi
        
        # Create release notes
        cat > release/RELEASE_NOTES.md << EOF
        # Live Target $VERSION
        
        ## What's New
        - Bug fixes and improvements
        - Enhanced performance
        
        ## Installation
        This is a development build. To install:
        1. Download the archive
        2. Import into Xcode
        3. Build and run on your device
        
        ## Requirements
        - iOS 18.5 or later
        - Xcode 16.4 or later
        
        ---
        Copyright © 2025 BCEAssociates, Inc. All rights reserved.
        EOF
        
    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ needs.validate-release.outputs.version }}
        path: release/
        retention-days: 90

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Download Release Artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-${{ needs.validate-release.outputs.version }}
        path: release/
        
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Create release with GitHub CLI
        gh release create "$VERSION" \
          --repo="$GITHUB_REPOSITORY" \
          --title="Live Target $VERSION" \
          --notes-file="release/RELEASE_NOTES.md" \
          --draft
        
        # Upload archive if it exists
        if [ -f "release/Live Target.xcarchive.zip" ]; then
          gh release upload "$VERSION" \
            "release/Live Target.xcarchive.zip" \
            --repo="$GITHUB_REPOSITORY"
          echo "Archive uploaded successfully"
        else
          echo "Archive not found, skipping upload"
        fi

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, create-github-release]
    if: always()
    
    steps:
    - name: Report Release Status
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        if [[ "${{ needs.build-release.result }}" == "success" && 
              "${{ needs.create-github-release.result }}" == "success" ]]; then
          echo "🚀 Release $VERSION created successfully!"
          echo "📦 Artifacts uploaded to GitHub Releases"
        else
          echo "❌ Release $VERSION failed"
          exit 1
        fi