{"version":"2.1.0","runs":[{"invocations":[{"executionSuccessful":true,"toolExecutionNotifications":[]}],"results":[{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"semgrep.sarif","uriBaseId":"%SRCROOT%"},"region":{"endColumn":425117,"endLine":1,"snippet":{"text":"{\"version\":\"2.1.0\",\"runs\":[{\"invocations\":[{\"executionSuccessful\":true,\"toolExecutionNotifications\":[]}],\"results\":[],\"tool\":{\"driver\":{\"name\":\"Semgrep OSS\",\"rules\":[{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Variable '$VAR' was freed twice. This can lead to undefined behavior.\"},\"help\":{\"markdown\":\"Variable '$VAR' was freed twice. This can lead to undefined behavior.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/c.lang.security.double-free.double-free)\\n - [https://cwe.mitre.org/data/definitions/415.html](https://cwe.mitre.org/data/definitions/415.html)\\n - [https://owasp.org/www-community/vulnerabilities/Doubly_freeing_memory](https://owasp.org/www-community/vulnerabilities/Doubly_freeing_memory)\\n\",\"text\":\"Variable '$VAR' was freed twice. This can lead to undefined behavior.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/c.lang.security.double-free.double-free\",\"id\":\"c.lang.security.double-free.double-free\",\"name\":\"c.lang.security.double-free.double-free\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-415: Double Free\",\"LOW CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: c.lang.security.double-free.double-free\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.\"},\"help\":{\"markdown\":\"Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn)\\n - [https://us-cert.cisa.gov/bsi/articles/knowledge/coding-practices/fgets-and-gets_s](https://us-cert.cisa.gov/bsi/articles/knowledge/coding-practices/fgets-and-gets_s)\\n\",\"text\":\"Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn\",\"id\":\"c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn\",\"name\":\"c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-676: Use of Potentially Dangerous Function\",\"MEDIUM CONFIDENCE\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'.\"},\"help\":{\"markdown\":\"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/c.lang.security.insecure-use-printf-fn.insecure-use-printf-fn)\\n - [https://doc.castsoftware.com/display/SBX/Never+use+sprintf%28%29+or+vsprintf%28%29+functions](https://doc.castsoftware.com/display/SBX/Never+use+sprintf%28%29+or+vsprintf%28%29+functions)\\n - [https://www.cvedetails.com/cwe-details/134/Uncontrolled-Format-String.html](https://www.cvedetails.com/cwe-details/134/Uncontrolled-Format-String.html)\\n\",\"text\":\"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/c.lang.security.insecure-use-printf-fn.insecure-use-printf-fn\",\"id\":\"c.lang.security.insecure-use-printf-fn.insecure-use-printf-fn\",\"name\":\"c.lang.security.insecure-use-printf-fn.insecure-use-printf-fn\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-134: Use of Externally-Controlled Format String\",\"LOW CONFIDENCE\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: c.lang.security.insecure-use-printf-fn.insecure-use-printf-fn\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input.\"},\"help\":{\"markdown\":\"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/c.lang.security.insecure-use-scanf-fn.insecure-use-scanf-fn)\\n - [http://sekrit.de/webdocs/c/beginners-guide-away-from-scanf.html](http://sekrit.de/webdocs/c/beginners-guide-away-from-scanf.html)\\n\",\"text\":\"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/c.lang.security.insecure-use-scanf-fn.insecure-use-scanf-fn\",\"id\":\"c.lang.security.insecure-use-scanf-fn.insecure-use-scanf-fn\",\"name\":\"c.lang.security.insecure-use-scanf-fn.insecure-use-scanf-fn\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-676: Use of Potentially Dangerous Function\",\"LOW CONFIDENCE\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: c.lang.security.insecure-use-scanf-fn.insecure-use-scanf-fn\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.\"},\"help\":{\"markdown\":\"Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/c.lang.security.insecure-use-strcat-fn.insecure-use-strcat-fn)\\n - [https://nvd.nist.gov/vuln/detail/CVE-2019-12553](https://nvd.nist.gov/vuln/detail/CVE-2019-12553)\\n - [https://techblog.mediaservice.net/2020/04/cve-2020-2851-stack-based-buffer-overflow-in-cde-libdtsvc/](https://techblog.mediaservice.net/2020/04/cve-2020-2851-stack-based-buffer-overflow-in-cde-libdtsvc/)\\n\",\"text\":\"Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/c.lang.security.insecure-use-strcat-fn.insecure-use-strcat-fn\",\"id\":\"c.lang.security.insecure-use-strcat-fn.insecure-use-strcat-fn\",\"name\":\"c.lang.security.insecure-use-strcat-fn.insecure-use-strcat-fn\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-676: Use of Potentially Dangerous Function\",\"LOW CONFIDENCE\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: c.lang.security.insecure-use-strcat-fn.insecure-use-strcat-fn\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available).\"},\"help\":{\"markdown\":\"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available).\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/c.lang.security.insecure-use-string-copy-fn.insecure-use-string-copy-fn)\\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\\n - [https://nvd.nist.gov/vuln/detail/CVE-2019-11365](https://nvd.nist.gov/vuln/detail/CVE-2019-11365)\\n\",\"text\":\"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available).\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/c.lang.security.insecure-use-string-copy-fn.insecure-use-string-copy-fn\",\"id\":\"c.lang.security.insecure-use-string-copy-fn.insecure-use-string-copy-fn\",\"name\":\"c.lang.security.insecure-use-string-copy-fn.insecure-use-string-copy-fn\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-676: Use of Potentially Dangerous Function\",\"LOW CONFIDENCE\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: c.lang.security.insecure-use-string-copy-fn.insecure-use-string-copy-fn\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead.\"},\"help\":{\"markdown\":\"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/c.lang.security.insecure-use-strtok-fn.insecure-use-strtok-fn)\\n - [https://wiki.sei.cmu.edu/confluence/display/c/STR06-C.+Do+not+assume+that+strtok%28%29+leaves+the+parse+string+unchanged](https://wiki.sei.cmu.edu/confluence/display/c/STR06-C.+Do+not+assume+that+strtok%28%29+leaves+the+parse+string+unchanged)\\n - [https://man7.org/linux/man-pages/man3/strtok.3.html#BUGS](https://man7.org/linux/man-pages/man3/strtok.3.html#BUGS)\\n - [https://stackoverflow.com/a/40335556](https://stackoverflow.com/a/40335556)\\n\",\"text\":\"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/c.lang.security.insecure-use-strtok-fn.insecure-use-strtok-fn\",\"id\":\"c.lang.security.insecure-use-strtok-fn.insecure-use-strtok-fn\",\"name\":\"c.lang.security.insecure-use-strtok-fn.insecure-use-strtok-fn\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-676: Use of Potentially Dangerous Function\",\"LOW CONFIDENCE\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: c.lang.security.insecure-use-strtok-fn.insecure-use-strtok-fn\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Call to 'read()' without error checking is susceptible to file descriptor exhaustion. Consider using the 'getrandom()' function.\"},\"help\":{\"markdown\":\"Call to 'read()' without error checking is susceptible to file descriptor exhaustion. Consider using the 'getrandom()' function.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/c.lang.security.random-fd-exhaustion.random-fd-exhaustion)\\n - [https://lwn.net/Articles/606141/](https://lwn.net/Articles/606141/)\\n\",\"text\":\"Call to 'read()' without error checking is susceptible to file descriptor exhaustion. Consider using the 'getrandom()' function.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/c.lang.security.random-fd-exhaustion.random-fd-exhaustion\",\"id\":\"c.lang.security.random-fd-exhaustion.random-fd-exhaustion\",\"name\":\"c.lang.security.random-fd-exhaustion.random-fd-exhaustion\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-774: Allocation of File Descriptors or Handles Without Limits or Throttling\",\"MEDIUM CONFIDENCE\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: c.lang.security.random-fd-exhaustion.random-fd-exhaustion\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Variable '$VAR' was used after being freed. This can lead to undefined behavior.\"},\"help\":{\"markdown\":\"Variable '$VAR' was used after being freed. This can lead to undefined behavior.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/c.lang.security.use-after-free.use-after-free)\\n - [https://cwe.mitre.org/data/definitions/416.html](https://cwe.mitre.org/data/definitions/416.html)\\n - [https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/use_after_free/](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/use_after_free/)\\n\",\"text\":\"Variable '$VAR' was used after being freed. This can lead to undefined behavior.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/c.lang.security.use-after-free.use-after-free\",\"id\":\"c.lang.security.use-after-free.use-after-free\",\"name\":\"c.lang.security.use-after-free.use-after-free\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-416: Use After Free\",\"LOW CONFIDENCE\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: c.lang.security.use-after-free.use-after-free\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'.\"},\"help\":{\"markdown\":\"The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/dockerfile.security.last-user-is-root.last-user-is-root)\\n - [https://github.com/hadolint/hadolint/wiki/DL3002](https://github.com/hadolint/hadolint/wiki/DL3002)\\n\",\"text\":\"The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/dockerfile.security.last-user-is-root.last-user-is-root\",\"id\":\"dockerfile.security.last-user-is-root.last-user-is-root\",\"name\":\"dockerfile.security.last-user-is-root.last-user-is-root\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-269: Improper Privilege Management\",\"MEDIUM CONFIDENCE\",\"OWASP-A04:2021 - Insecure Design\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: dockerfile.security.last-user-is-root.last-user-is-root\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \\\"{{ expr }}\\\".\"},\"help\":{\"markdown\":\"Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \\\"{{ expr }}\\\".\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var)\\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss)\\n\",\"text\":\"Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \\\"{{ expr }}\\\".\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var\",\"id\":\"generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var\",\"name\":\"generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using Flask, use 'url_for()' to safely generate a URL. If using Django, use the 'url' filter to safely generate a URL. If using Mustache, use a URL encoding library, or prepend a slash '/' to the variable for relative links (`href=\\\"/{{link}}\\\"`). You may also consider setting the Content Security Policy (CSP) header.\"},\"help\":{\"markdown\":\"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using Flask, use 'url_for()' to safely generate a URL. If using Django, use the 'url' filter to safely generate a URL. If using Mustache, use a URL encoding library, or prepend a slash '/' to the variable for relative links (`href=\\\"/{{link}}\\\"`). You may also consider setting the Content Security Policy (CSP) header.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.html-templates.security.var-in-href.var-in-href)\\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI)\\n - [https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url](https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url)\\n - [https://github.com/pugjs/pug/issues/2952](https://github.com/pugjs/pug/issues/2952)\\n - [https://content-security-policy.com/](https://content-security-policy.com/)\\n\",\"text\":\"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using Flask, use 'url_for()' to safely generate a URL. If using Django, use the 'url' filter to safely generate a URL. If using Mustache, use a URL encoding library, or prepend a slash '/' to the variable for relative links (`href=\\\"/{{link}}\\\"`). You may also consider setting the Content Security Policy (CSP) header.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.html-templates.security.var-in-href.var-in-href\",\"id\":\"generic.html-templates.security.var-in-href.var-in-href\",\"name\":\"generic.html-templates.security.var-in-href.var-in-href\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.html-templates.security.var-in-href.var-in-href\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).\"},\"help\":{\"markdown\":\"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.html-templates.security.var-in-script-tag.var-in-script-tag)\\n - [https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A](https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A)\\n - [https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough](https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough)\\n - [https://github.com/ESAPI/owasp-esapi-js](https://github.com/ESAPI/owasp-esapi-js)\\n\",\"text\":\"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.html-templates.security.var-in-script-tag.var-in-script-tag\",\"id\":\"generic.html-templates.security.var-in-script-tag.var-in-script-tag\",\"name\":\"generic.html-templates.security.var-in-script-tag.var-in-script-tag\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.html-templates.security.var-in-script-tag.var-in-script-tag\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"The alias in this location block is subject to a path traversal because the location path does not end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path.\"},\"help\":{\"markdown\":\"The alias in this location block is subject to a path traversal because the location path does not end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.alias-path-traversal.alias-path-traversal)\\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\\n - [https://www.acunetix.com/vulnerabilities/web/path-traversal-via-misconfigured-nginx-alias/](https://www.acunetix.com/vulnerabilities/web/path-traversal-via-misconfigured-nginx-alias/)\\n - [https://www.youtube.com/watch?v=CIhHpkybYsY](https://www.youtube.com/watch?v=CIhHpkybYsY)\\n - [https://github.com/orangetw/My-Presentation-Slides/blob/main/data/2018-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out.pdf](https://github.com/orangetw/My-Presentation-Slides/blob/main/data/2018-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out.pdf)\\n\",\"text\":\"The alias in this location block is subject to a path traversal because the location path does not end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.nginx.security.alias-path-traversal.alias-path-traversal\",\"id\":\"generic.nginx.security.alias-path-traversal.alias-path-traversal\",\"name\":\"generic.nginx.security.alias-path-traversal.alias-path-traversal\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\",\"LOW CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"OWASP-A05:2017 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.nginx.security.alias-path-traversal.alias-path-traversal\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"The host for this proxy URL is dynamically determined. This can be dangerous if the host can be injected by an attacker because it may forcibly alter destination of the proxy. Consider hardcoding acceptable destinations and retrieving them with 'map' or something similar.\"},\"help\":{\"markdown\":\"The host for this proxy URL is dynamically determined. This can be dangerous if the host can be injected by an attacker because it may forcibly alter destination of the proxy. Consider hardcoding acceptable destinations and retrieving them with 'map' or something similar.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.dynamic-proxy-host.dynamic-proxy-host)\\n - [https://nginx.org/en/docs/http/ngx_http_map_module.html](https://nginx.org/en/docs/http/ngx_http_map_module.html)\\n\",\"text\":\"The host for this proxy URL is dynamically determined. This can be dangerous if the host can be injected by an attacker because it may forcibly alter destination of the proxy. Consider hardcoding acceptable destinations and retrieving them with 'map' or something similar.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.nginx.security.dynamic-proxy-host.dynamic-proxy-host\",\"id\":\"generic.nginx.security.dynamic-proxy-host.dynamic-proxy-host\",\"name\":\"generic.nginx.security.dynamic-proxy-host.dynamic-proxy-host\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-441: Unintended Proxy or Intermediary ('Confused Deputy')\",\"MEDIUM CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.nginx.security.dynamic-proxy-host.dynamic-proxy-host\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"The protocol scheme for this proxy is dynamically determined. This can be dangerous if the scheme can be injected by an attacker because it may forcibly alter the connection scheme. Consider hardcoding a scheme for this proxy.\"},\"help\":{\"markdown\":\"The protocol scheme for this proxy is dynamically determined. This can be dangerous if the scheme can be injected by an attacker because it may forcibly alter the connection scheme. Consider hardcoding a scheme for this proxy.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.dynamic-proxy-scheme.dynamic-proxy-scheme)\\n - [https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md](https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md)\\n\",\"text\":\"The protocol scheme for this proxy is dynamically determined. This can be dangerous if the scheme can be injected by an attacker because it may forcibly alter the connection scheme. Consider hardcoding a scheme for this proxy.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.nginx.security.dynamic-proxy-scheme.dynamic-proxy-scheme\",\"id\":\"generic.nginx.security.dynamic-proxy-scheme.dynamic-proxy-scheme\",\"name\":\"generic.nginx.security.dynamic-proxy-scheme.dynamic-proxy-scheme\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-16: CWE CATEGORY: Configuration\",\"MEDIUM CONFIDENCE\",\"OWASP-A05:2021 - Security Misconfiguration\",\"OWASP-A06:2017 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.nginx.security.dynamic-proxy-scheme.dynamic-proxy-scheme\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"The $$VARIABLE path parameter is added as a header in the response. This could allow an attacker to inject a newline and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace in the path parameter: '[^\\\\s]+'.\"},\"help\":{\"markdown\":\"The $$VARIABLE path parameter is added as a header in the response. This could allow an attacker to inject a newline and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace in the path parameter: '[^\\\\s]+'.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.header-injection.header-injection)\\n - [https://github.com/yandex/gixy/blob/master/docs/en/plugins/httpsplitting.md](https://github.com/yandex/gixy/blob/master/docs/en/plugins/httpsplitting.md)\\n - [https://owasp.org/www-community/attacks/HTTP_Response_Splitting](https://owasp.org/www-community/attacks/HTTP_Response_Splitting)\\n\",\"text\":\"The $$VARIABLE path parameter is added as a header in the response. This could allow an attacker to inject a newline and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace in the path parameter: '[^\\\\s]+'.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.nginx.security.header-injection.header-injection\",\"id\":\"generic.nginx.security.header-injection.header-injection\",\"name\":\"generic.nginx.security.header-injection.header-injection\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\",\"MEDIUM CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.nginx.security.header-injection.header-injection\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.\"},\"help\":{\"markdown\":\"The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition)\\n - [https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md](https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md)\\n\",\"text\":\"The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition\",\"id\":\"generic.nginx.security.header-redefinition.header-redefinition\",\"name\":\"generic.nginx.security.header-redefinition.header-redefinition\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-16: CWE CATEGORY: Configuration\",\"LOW CONFIDENCE\",\"OWASP-A05:2021 - Security Misconfiguration\",\"OWASP-A06:2017 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.nginx.security.header-redefinition.header-redefinition\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will forward the request with the incoming scheme. This could result in unencrypted communications. To fix this, include the 'https' scheme.\"},\"help\":{\"markdown\":\"Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will forward the request with the incoming scheme. This could result in unencrypted communications. To fix this, include the 'https' scheme.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.insecure-redirect.insecure-redirect)\\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\\n\",\"text\":\"Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will forward the request with the incoming scheme. This could result in unencrypted communications. To fix this, include the 'https' scheme.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.nginx.security.insecure-redirect.insecure-redirect\",\"id\":\"generic.nginx.security.insecure-redirect.insecure-redirect\",\"name\":\"generic.nginx.security.insecure-redirect.insecure-redirect\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-319: Cleartext Transmission of Sensitive Information\",\"LOW CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.nginx.security.insecure-redirect.insecure-redirect\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2 and TLS1.3; older versions are known to be broken and are susceptible to attacks. Prefer use of TLSv1.2 or later.\"},\"help\":{\"markdown\":\"Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2 and TLS1.3; older versions are known to be broken and are susceptible to attacks. Prefer use of TLSv1.2 or later.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.insecure-ssl-version.insecure-ssl-version)\\n - [https://www.acunetix.com/blog/web-security-zone/hardening-nginx/](https://www.acunetix.com/blog/web-security-zone/hardening-nginx/)\\n - [https://www.acunetix.com/blog/articles/tls-ssl-cipher-hardening/](https://www.acunetix.com/blog/articles/tls-ssl-cipher-hardening/)\\n\",\"text\":\"Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2 and TLS1.3; older versions are known to be broken and are susceptible to attacks. Prefer use of TLSv1.2 or later.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.nginx.security.insecure-ssl-version.insecure-ssl-version\",\"id\":\"generic.nginx.security.insecure-ssl-version.insecure-ssl-version\",\"name\":\"generic.nginx.security.insecure-ssl-version.insecure-ssl-version\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-326: Inadequate Encryption Strength\",\"HIGH CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.nginx.security.insecure-ssl-version.insecure-ssl-version\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure.\"},\"help\":{\"markdown\":\"This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.missing-internal.missing-internal)\\n - [https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md](https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md)\\n - [https://nginx.org/en/docs/http/ngx_http_core_module.html#internal](https://nginx.org/en/docs/http/ngx_http_core_module.html#internal)\\n\",\"text\":\"This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.nginx.security.missing-internal.missing-internal\",\"id\":\"generic.nginx.security.missing-internal.missing-internal\",\"name\":\"generic.nginx.security.missing-internal.missing-internal\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-16: CWE CATEGORY: Configuration\",\"LOW CONFIDENCE\",\"OWASP-A05:2021 - Security Misconfiguration\",\"OWASP-A06:2017 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.nginx.security.missing-internal.missing-internal\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions.\"},\"help\":{\"markdown\":\"This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.missing-ssl-version.missing-ssl-version)\\n - [https://www.acunetix.com/blog/web-security-zone/hardening-nginx/](https://www.acunetix.com/blog/web-security-zone/hardening-nginx/)\\n - [https://nginx.org/en/docs/http/configuring_https_servers.html](https://nginx.org/en/docs/http/configuring_https_servers.html)\\n\",\"text\":\"This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.nginx.security.missing-ssl-version.missing-ssl-version\",\"id\":\"generic.nginx.security.missing-ssl-version.missing-ssl-version\",\"name\":\"generic.nginx.security.missing-ssl-version.missing-ssl-version\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-326: Inadequate Encryption Strength\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.nginx.security.missing-ssl-version.missing-ssl-version\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Amazon MWS Auth Token detected\"},\"help\":{\"markdown\":\"Amazon MWS Auth Token detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-amazon-mws-auth-token.detected-amazon-mws-auth-token)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Amazon MWS Auth Token detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-amazon-mws-auth-token.detected-amazon-mws-auth-token\",\"id\":\"generic.secrets.security.detected-amazon-mws-auth-token.detected-amazon-mws-auth-token\",\"name\":\"generic.secrets.security.detected-amazon-mws-auth-token.detected-amazon-mws-auth-token\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-amazon-mws-auth-token.detected-amazon-mws-auth-token\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Artifactory token detected\"},\"help\":{\"markdown\":\"Artifactory token detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-artifactory-password.detected-artifactory-password)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Artifactory token detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-artifactory-password.detected-artifactory-password\",\"id\":\"generic.secrets.security.detected-artifactory-password.detected-artifactory-password\",\"name\":\"generic.secrets.security.detected-artifactory-password.detected-artifactory-password\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-artifactory-password.detected-artifactory-password\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Artifactory token detected\"},\"help\":{\"markdown\":\"Artifactory token detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-artifactory-token.detected-artifactory-token)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Artifactory token detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-artifactory-token.detected-artifactory-token\",\"id\":\"generic.secrets.security.detected-artifactory-token.detected-artifactory-token\",\"name\":\"generic.secrets.security.detected-artifactory-token.detected-artifactory-token\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-artifactory-token.detected-artifactory-token\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here. Instead, read this value from an environment variable or keep it in a separate, private file.\"},\"help\":{\"markdown\":\"AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here. Instead, read this value from an environment variable or keep it in a separate, private file.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here. Instead, read this value from an environment variable or keep it in a separate, private file.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value\",\"id\":\"generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value\",\"name\":\"generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"AWS AppSync GraphQL Key detected\"},\"help\":{\"markdown\":\"AWS AppSync GraphQL Key detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-aws-appsync-graphql-key.detected-aws-appsync-graphql-key)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"AWS AppSync GraphQL Key detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-aws-appsync-graphql-key.detected-aws-appsync-graphql-key\",\"id\":\"generic.secrets.security.detected-aws-appsync-graphql-key.detected-aws-appsync-graphql-key\",\"name\":\"generic.secrets.security.detected-aws-appsync-graphql-key.detected-aws-appsync-graphql-key\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-aws-appsync-graphql-key.detected-aws-appsync-graphql-key\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"AWS Secret Access Key detected\"},\"help\":{\"markdown\":\"AWS Secret Access Key detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"AWS Secret Access Key detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key\",\"id\":\"generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key\",\"name\":\"generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"AWS Session Token detected\"},\"help\":{\"markdown\":\"AWS Session Token detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-aws-session-token.detected-aws-session-token)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"AWS Session Token detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-aws-session-token.detected-aws-session-token\",\"id\":\"generic.secrets.security.detected-aws-session-token.detected-aws-session-token\",\"name\":\"generic.secrets.security.detected-aws-session-token.detected-aws-session-token\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-aws-session-token.detected-aws-session-token\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"bcrypt hash detected\"},\"help\":{\"markdown\":\"bcrypt hash detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"bcrypt hash detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash\",\"id\":\"generic.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash\",\"name\":\"generic.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"CodeClimate detected\"},\"help\":{\"markdown\":\"CodeClimate detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-codeclimate.detected-codeclimate)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"CodeClimate detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-codeclimate.detected-codeclimate\",\"id\":\"generic.secrets.security.detected-codeclimate.detected-codeclimate\",\"name\":\"generic.secrets.security.detected-codeclimate.detected-codeclimate\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-codeclimate.detected-codeclimate\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"linux shadow file detected\"},\"help\":{\"markdown\":\"linux shadow file detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-etc-shadow.detected-etc-shadow)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"linux shadow file detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-etc-shadow.detected-etc-shadow\",\"id\":\"generic.secrets.security.detected-etc-shadow.detected-etc-shadow\",\"name\":\"generic.secrets.security.detected-etc-shadow.detected-etc-shadow\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-etc-shadow.detected-etc-shadow\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Facebook Access Token detected\"},\"help\":{\"markdown\":\"Facebook Access Token detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-facebook-access-token.detected-facebook-access-token)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Facebook Access Token detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-facebook-access-token.detected-facebook-access-token\",\"id\":\"generic.secrets.security.detected-facebook-access-token.detected-facebook-access-token\",\"name\":\"generic.secrets.security.detected-facebook-access-token.detected-facebook-access-token\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-facebook-access-token.detected-facebook-access-token\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Facebook OAuth detected\"},\"help\":{\"markdown\":\"Facebook OAuth detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Facebook OAuth detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth\",\"id\":\"generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth\",\"name\":\"generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Google (GCM) Service account detected\"},\"help\":{\"markdown\":\"Google (GCM) Service account detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-google-gcm-service-account.detected-google-gcm-service-account)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Google (GCM) Service account detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-google-gcm-service-account.detected-google-gcm-service-account\",\"id\":\"generic.secrets.security.detected-google-gcm-service-account.detected-google-gcm-service-account\",\"name\":\"generic.secrets.security.detected-google-gcm-service-account.detected-google-gcm-service-account\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-google-gcm-service-account.detected-google-gcm-service-account\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Google OAuth Access Token detected\"},\"help\":{\"markdown\":\"Google OAuth Access Token detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Google OAuth Access Token detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token\",\"id\":\"generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token\",\"name\":\"generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Heroku API Key detected\"},\"help\":{\"markdown\":\"Heroku API Key detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-heroku-api-key.detected-heroku-api-key)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Heroku API Key detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-heroku-api-key.detected-heroku-api-key\",\"id\":\"generic.secrets.security.detected-heroku-api-key.detected-heroku-api-key\",\"name\":\"generic.secrets.security.detected-heroku-api-key.detected-heroku-api-key\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-heroku-api-key.detected-heroku-api-key\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"HockeyApp detected\"},\"help\":{\"markdown\":\"HockeyApp detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-hockeyapp.detected-hockeyapp)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"HockeyApp detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-hockeyapp.detected-hockeyapp\",\"id\":\"generic.secrets.security.detected-hockeyapp.detected-hockeyapp\",\"name\":\"generic.secrets.security.detected-hockeyapp.detected-hockeyapp\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-hockeyapp.detected-hockeyapp\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"MailChimp API Key detected\"},\"help\":{\"markdown\":\"MailChimp API Key detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-mailchimp-api-key.detected-mailchimp-api-key)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"MailChimp API Key detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-mailchimp-api-key.detected-mailchimp-api-key\",\"id\":\"generic.secrets.security.detected-mailchimp-api-key.detected-mailchimp-api-key\",\"name\":\"generic.secrets.security.detected-mailchimp-api-key.detected-mailchimp-api-key\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-mailchimp-api-key.detected-mailchimp-api-key\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Mailgun API Key detected\"},\"help\":{\"markdown\":\"Mailgun API Key detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-mailgun-api-key.detected-mailgun-api-key)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Mailgun API Key detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-mailgun-api-key.detected-mailgun-api-key\",\"id\":\"generic.secrets.security.detected-mailgun-api-key.detected-mailgun-api-key\",\"name\":\"generic.secrets.security.detected-mailgun-api-key.detected-mailgun-api-key\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-mailgun-api-key.detected-mailgun-api-key\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"NPM registry authentication token detected\"},\"help\":{\"markdown\":\"NPM registry authentication token detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-npm-registry-auth-token.detected-npm-registry-auth-token)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"NPM registry authentication token detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-npm-registry-auth-token.detected-npm-registry-auth-token\",\"id\":\"generic.secrets.security.detected-npm-registry-auth-token.detected-npm-registry-auth-token\",\"name\":\"generic.secrets.security.detected-npm-registry-auth-token.detected-npm-registry-auth-token\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-npm-registry-auth-token.detected-npm-registry-auth-token\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Onfido live API Token detected\"},\"help\":{\"markdown\":\"Onfido live API Token detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-onfido-live-api-token.detected-onfido-live-api-token)\\n - [https://documentation.onfido.com/api/latest/#api-tokens](https://documentation.onfido.com/api/latest/#api-tokens)\\n\",\"text\":\"Onfido live API Token detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-onfido-live-api-token.detected-onfido-live-api-token\",\"id\":\"generic.secrets.security.detected-onfido-live-api-token.detected-onfido-live-api-token\",\"name\":\"generic.secrets.security.detected-onfido-live-api-token.detected-onfido-live-api-token\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"HIGH CONFIDENCE\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-onfido-live-api-token.detected-onfido-live-api-token\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Outlook Team detected\"},\"help\":{\"markdown\":\"Outlook Team detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-outlook-team.detected-outlook-team)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Outlook Team detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-outlook-team.detected-outlook-team\",\"id\":\"generic.secrets.security.detected-outlook-team.detected-outlook-team\",\"name\":\"generic.secrets.security.detected-outlook-team.detected-outlook-team\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-outlook-team.detected-outlook-team\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"PayPal Braintree Access Token detected\"},\"help\":{\"markdown\":\"PayPal Braintree Access Token detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-paypal-braintree-access-token.detected-paypal-braintree-access-token)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"PayPal Braintree Access Token detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-paypal-braintree-access-token.detected-paypal-braintree-access-token\",\"id\":\"generic.secrets.security.detected-paypal-braintree-access-token.detected-paypal-braintree-access-token\",\"name\":\"generic.secrets.security.detected-paypal-braintree-access-token.detected-paypal-braintree-access-token\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-paypal-braintree-access-token.detected-paypal-braintree-access-token\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Something that looks like a PGP private key block is detected. This is a potential hardcoded secret that could be leaked if this code is committed. Instead, remove this code block from the commit.\"},\"help\":{\"markdown\":\"Something that looks like a PGP private key block is detected. This is a potential hardcoded secret that could be leaked if this code is committed. Instead, remove this code block from the commit.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Something that looks like a PGP private key block is detected. This is a potential hardcoded secret that could be leaked if this code is committed. Instead, remove this code block from the commit.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block\",\"id\":\"generic.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block\",\"name\":\"generic.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Picatic API Key detected\"},\"help\":{\"markdown\":\"Picatic API Key detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-picatic-api-key.detected-picatic-api-key)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Picatic API Key detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-picatic-api-key.detected-picatic-api-key\",\"id\":\"generic.secrets.security.detected-picatic-api-key.detected-picatic-api-key\",\"name\":\"generic.secrets.security.detected-picatic-api-key.detected-picatic-api-key\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-picatic-api-key.detected-picatic-api-key\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file.\"},\"help\":{\"markdown\":\"Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-private-key.detected-private-key)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-private-key.detected-private-key\",\"id\":\"generic.secrets.security.detected-private-key.detected-private-key\",\"name\":\"generic.secrets.security.detected-private-key.detected-private-key\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-private-key.detected-private-key\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Sauce Token detected\"},\"help\":{\"markdown\":\"Sauce Token detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-sauce-token.detected-sauce-token)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Sauce Token detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-sauce-token.detected-sauce-token\",\"id\":\"generic.secrets.security.detected-sauce-token.detected-sauce-token\",\"name\":\"generic.secrets.security.detected-sauce-token.detected-sauce-token\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-sauce-token.detected-sauce-token\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Slack Token detected\"},\"help\":{\"markdown\":\"Slack Token detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-slack-token.detected-slack-token)\\n - [https://github.com/davidburkitt/python-secret-scanner/blob/335a1f6dab8de59cf39063e57aea39a58951e939/patterns.txt#L58](https://github.com/davidburkitt/python-secret-scanner/blob/335a1f6dab8de59cf39063e57aea39a58951e939/patterns.txt#L58)\\n\",\"text\":\"Slack Token detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-slack-token.detected-slack-token\",\"id\":\"generic.secrets.security.detected-slack-token.detected-slack-token\",\"name\":\"generic.secrets.security.detected-slack-token.detected-slack-token\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-slack-token.detected-slack-token\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Slack Webhook detected\"},\"help\":{\"markdown\":\"Slack Webhook detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-slack-webhook.detected-slack-webhook)\\n - [https://api.slack.com/messaging/webhooks](https://api.slack.com/messaging/webhooks)\\n\",\"text\":\"Slack Webhook detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-slack-webhook.detected-slack-webhook\",\"id\":\"generic.secrets.security.detected-slack-webhook.detected-slack-webhook\",\"name\":\"generic.secrets.security.detected-slack-webhook.detected-slack-webhook\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-slack-webhook.detected-slack-webhook\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"SonarQube Docs API Key detected\"},\"help\":{\"markdown\":\"SonarQube Docs API Key detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-sonarqube-docs-api-key.detected-sonarqube-docs-api-key)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"SonarQube Docs API Key detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-sonarqube-docs-api-key.detected-sonarqube-docs-api-key\",\"id\":\"generic.secrets.security.detected-sonarqube-docs-api-key.detected-sonarqube-docs-api-key\",\"name\":\"generic.secrets.security.detected-sonarqube-docs-api-key.detected-sonarqube-docs-api-key\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-sonarqube-docs-api-key.detected-sonarqube-docs-api-key\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Square Access Token detected\"},\"help\":{\"markdown\":\"Square Access Token detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-square-access-token.detected-square-access-token)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Square Access Token detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-square-access-token.detected-square-access-token\",\"id\":\"generic.secrets.security.detected-square-access-token.detected-square-access-token\",\"name\":\"generic.secrets.security.detected-square-access-token.detected-square-access-token\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-square-access-token.detected-square-access-token\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Square OAuth Secret detected\"},\"help\":{\"markdown\":\"Square OAuth Secret detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-square-oauth-secret.detected-square-oauth-secret)\\n - [https://github.com/Yelp/detect-secrets/blob/master/tests/plugins/square_oauth_test.py](https://github.com/Yelp/detect-secrets/blob/master/tests/plugins/square_oauth_test.py)\\n\",\"text\":\"Square OAuth Secret detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-square-oauth-secret.detected-square-oauth-secret\",\"id\":\"generic.secrets.security.detected-square-oauth-secret.detected-square-oauth-secret\",\"name\":\"generic.secrets.security.detected-square-oauth-secret.detected-square-oauth-secret\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-square-oauth-secret.detected-square-oauth-secret\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"SSH Password detected\"},\"help\":{\"markdown\":\"SSH Password detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-ssh-password.detected-ssh-password)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"SSH Password detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-ssh-password.detected-ssh-password\",\"id\":\"generic.secrets.security.detected-ssh-password.detected-ssh-password\",\"name\":\"generic.secrets.security.detected-ssh-password.detected-ssh-password\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-ssh-password.detected-ssh-password\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Stripe API Key detected\"},\"help\":{\"markdown\":\"Stripe API Key detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-stripe-api-key.detected-stripe-api-key)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Stripe API Key detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-stripe-api-key.detected-stripe-api-key\",\"id\":\"generic.secrets.security.detected-stripe-api-key.detected-stripe-api-key\",\"name\":\"generic.secrets.security.detected-stripe-api-key.detected-stripe-api-key\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-stripe-api-key.detected-stripe-api-key\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Stripe Restricted API Key detected\"},\"help\":{\"markdown\":\"Stripe Restricted API Key detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Stripe Restricted API Key detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key\",\"id\":\"generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key\",\"name\":\"generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"MEDIUM CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Telegram Bot API Key detected\"},\"help\":{\"markdown\":\"Telegram Bot API Key detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-telegram-bot-api-key.detected-telegram-bot-api-key)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Telegram Bot API Key detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-telegram-bot-api-key.detected-telegram-bot-api-key\",\"id\":\"generic.secrets.security.detected-telegram-bot-api-key.detected-telegram-bot-api-key\",\"name\":\"generic.secrets.security.detected-telegram-bot-api-key.detected-telegram-bot-api-key\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-telegram-bot-api-key.detected-telegram-bot-api-key\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Twilio API Key detected\"},\"help\":{\"markdown\":\"Twilio API Key detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-twilio-api-key.detected-twilio-api-key)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Twilio API Key detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-twilio-api-key.detected-twilio-api-key\",\"id\":\"generic.secrets.security.detected-twilio-api-key.detected-twilio-api-key\",\"name\":\"generic.secrets.security.detected-twilio-api-key.detected-twilio-api-key\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-twilio-api-key.detected-twilio-api-key\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Username and password in URI detected\"},\"help\":{\"markdown\":\"Username and password in URI detected\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-username-and-password-in-uri.detected-username-and-password-in-uri)\\n - [https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go](https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go)\\n\",\"text\":\"Username and password in URI detected\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/generic.secrets.security.detected-username-and-password-in-uri.detected-username-and-password-in-uri\",\"id\":\"generic.secrets.security.detected-username-and-password-in-uri.detected-username-and-password-in-uri\",\"name\":\"generic.secrets.security.detected-username-and-password-in-uri.detected-username-and-password-in-uri\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"MEDIUM CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: generic.secrets.security.detected-username-and-password-in-uri.detected-username-and-password-in-uri\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Found an insecure gRPC connection using 'grpc.WithInsecure()'. This creates a connection without encryption to a gRPC server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Instead, establish a secure connection with an SSL certificate using the 'grpc.WithTransportCredentials()' function. You can create a create credentials using a 'tls.Config{}' struct with 'credentials.NewTLS()'. The final fix looks like this: 'grpc.WithTransportCredentials(credentials.NewTLS(<config>))'.\"},\"help\":{\"markdown\":\"Found an insecure gRPC connection using 'grpc.WithInsecure()'. This creates a connection without encryption to a gRPC server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Instead, establish a secure connection with an SSL certificate using the 'grpc.WithTransportCredentials()' function. You can create a create credentials using a 'tls.Config{}' struct with 'credentials.NewTLS()'. The final fix looks like this: 'grpc.WithTransportCredentials(credentials.NewTLS(<config>))'.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection)\\n - [https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption](https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption)\\n\",\"text\":\"Found an insecure gRPC connection using 'grpc.WithInsecure()'. This creates a connection without encryption to a gRPC server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Instead, establish a secure connection with an SSL certificate using the 'grpc.WithTransportCredentials()' function. You can create a create credentials using a 'tls.Config{}' struct with 'credentials.NewTLS()'. The final fix looks like this: 'grpc.WithTransportCredentials(credentials.NewTLS(<config>))'.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection\",\"id\":\"go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection\",\"name\":\"go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-300: Channel Accessible by Non-Endpoint\",\"HIGH CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\\\"cert.pem\\\", \\\"cert.key\\\")'.\"},\"help\":{\"markdown\":\"Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\\\"cert.pem\\\", \\\"cert.key\\\")'.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection)\\n - [https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption](https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption)\\n\",\"text\":\"Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\\\"cert.pem\\\", \\\"cert.key\\\")'.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection\",\"id\":\"go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection\",\"name\":\"go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-300: Channel Accessible by Non-Endpoint\",\"HIGH CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\"},\"help\":{\"markdown\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.jwt-go.security.jwt.hardcoded-jwt-key)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\\n\",\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.jwt-go.security.jwt.hardcoded-jwt-key\",\"id\":\"go.jwt-go.security.jwt.hardcoded-jwt-key\",\"name\":\"go.jwt-go.security.jwt.hardcoded-jwt-key\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"MEDIUM CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.jwt-go.security.jwt.hardcoded-jwt-key\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"The package `net/http/cgi` is on the import blocklist.  The package is vulnerable to httpoxy attacks (CVE-2015-5386). It is recommended to use `net/http` or a web framework to build a web application instead.\"},\"help\":{\"markdown\":\"The package `net/http/cgi` is on the import blocklist.  The package is vulnerable to httpoxy attacks (CVE-2015-5386). It is recommended to use `net/http` or a web framework to build a web application instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.crypto.bad_imports.insecure-module-used)\\n - [https://godoc.org/golang.org/x/crypto/sha3](https://godoc.org/golang.org/x/crypto/sha3)\\n\",\"text\":\"The package `net/http/cgi` is on the import blocklist.  The package is vulnerable to httpoxy attacks (CVE-2015-5386). It is recommended to use `net/http` or a web framework to build a web application instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.crypto.bad_imports.insecure-module-used\",\"id\":\"go.lang.security.audit.crypto.bad_imports.insecure-module-used\",\"name\":\"go.lang.security.audit.crypto.bad_imports.insecure-module-used\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.crypto.bad_imports.insecure-module-used\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Disabled host key verification detected. This allows man-in-the-middle attacks. Use the 'golang.org/x/crypto/ssh/knownhosts' package to do host key verification. See https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/ to learn more about the problem and how to fix it.\"},\"help\":{\"markdown\":\"Disabled host key verification detected. This allows man-in-the-middle attacks. Use the 'golang.org/x/crypto/ssh/knownhosts' package to do host key verification. See https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/ to learn more about the problem and how to fix it.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.crypto.insecure_ssh.avoid-ssh-insecure-ignore-host-key)\\n - [https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/](https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/)\\n - [https://gist.github.com/Skarlso/34321a230cf0245018288686c9e70b2d](https://gist.github.com/Skarlso/34321a230cf0245018288686c9e70b2d)\\n\",\"text\":\"Disabled host key verification detected. This allows man-in-the-middle attacks. Use the 'golang.org/x/crypto/ssh/knownhosts' package to do host key verification. See https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/ to learn more about the problem and how to fix it.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.crypto.insecure_ssh.avoid-ssh-insecure-ignore-host-key\",\"id\":\"go.lang.security.audit.crypto.insecure_ssh.avoid-ssh-insecure-ignore-host-key\",\"name\":\"go.lang.security.audit.crypto.insecure_ssh.avoid-ssh-insecure-ignore-host-key\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-322: Key Exchange without Entity Authentication\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.crypto.insecure_ssh.avoid-ssh-insecure-ignore-host-key\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Do not use `math/rand`. Use `crypto/rand` instead.\"},\"help\":{\"markdown\":\"Do not use `math/rand`. Use `crypto/rand` instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.crypto.math_random.math-random-used)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation)\\n\",\"text\":\"Do not use `math/rand`. Use `crypto/rand` instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.crypto.math_random.math-random-used\",\"id\":\"go.lang.security.audit.crypto.math_random.math-random-used\",\"name\":\"go.lang.security.audit.crypto.math_random.math-random-used\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.crypto.math_random.math-random-used\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"SSLv3 is insecure because it has known vulnerabilities. Starting with go1.14, SSLv3 will be removed. Instead, use 'tls.VersionTLS13'.\"},\"help\":{\"markdown\":\"SSLv3 is insecure because it has known vulnerabilities. Starting with go1.14, SSLv3 will be removed. Instead, use 'tls.VersionTLS13'.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.crypto.ssl.ssl-v3-is-insecure)\\n - [https://golang.org/doc/go1.14#crypto/tls](https://golang.org/doc/go1.14#crypto/tls)\\n - [https://www.us-cert.gov/ncas/alerts/TA14-290A](https://www.us-cert.gov/ncas/alerts/TA14-290A)\\n\",\"text\":\"SSLv3 is insecure because it has known vulnerabilities. Starting with go1.14, SSLv3 will be removed. Instead, use 'tls.VersionTLS13'.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.crypto.ssl.ssl-v3-is-insecure\",\"id\":\"go.lang.security.audit.crypto.ssl.ssl-v3-is-insecure\",\"name\":\"go.lang.security.audit.crypto.ssl.ssl-v3-is-insecure\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"HIGH CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.crypto.ssl.ssl-v3-is-insecure\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected an insecure CipherSuite via the 'tls' module. This suite is considered weak. Use the function 'tls.CipherSuites()' to get a list of good cipher suites. See https://golang.org/pkg/crypto/tls/#InsecureCipherSuites for why and what other cipher suites to use.\"},\"help\":{\"markdown\":\"Detected an insecure CipherSuite via the 'tls' module. This suite is considered weak. Use the function 'tls.CipherSuites()' to get a list of good cipher suites. See https://golang.org/pkg/crypto/tls/#InsecureCipherSuites for why and what other cipher suites to use.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.crypto.tls.tls-with-insecure-cipher)\\n - [https://golang.org/pkg/crypto/tls/#InsecureCipherSuites](https://golang.org/pkg/crypto/tls/#InsecureCipherSuites)\\n\",\"text\":\"Detected an insecure CipherSuite via the 'tls' module. This suite is considered weak. Use the function 'tls.CipherSuites()' to get a list of good cipher suites. See https://golang.org/pkg/crypto/tls/#InsecureCipherSuites for why and what other cipher suites to use.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.crypto.tls.tls-with-insecure-cipher\",\"id\":\"go.lang.security.audit.crypto.tls.tls-with-insecure-cipher\",\"name\":\"go.lang.security.audit.crypto.tls.tls-with-insecure-cipher\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"HIGH CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.crypto.tls.tls-with-insecure-cipher\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected DES cipher algorithm which is insecure. The algorithm is considered weak and has been deprecated. Use AES instead.\"},\"help\":{\"markdown\":\"Detected DES cipher algorithm which is insecure. The algorithm is considered weak and has been deprecated. Use AES instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-DES)\\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\\n\",\"text\":\"Detected DES cipher algorithm which is insecure. The algorithm is considered weak and has been deprecated. Use AES instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-DES\",\"id\":\"go.lang.security.audit.crypto.use_of_weak_crypto.use-of-DES\",\"name\":\"go.lang.security.audit.crypto.use_of_weak_crypto.use-of-DES\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-DES\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\"},\"help\":{\"markdown\":\"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5)\\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\\n\",\"text\":\"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5\",\"id\":\"go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5\",\"name\":\"go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-328: Use of Weak Hash\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected RC4 cipher algorithm which is insecure. The algorithm has many known vulnerabilities. Use AES instead.\"},\"help\":{\"markdown\":\"Detected RC4 cipher algorithm which is insecure. The algorithm has many known vulnerabilities. Use AES instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-rc4)\\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\\n\",\"text\":\"Detected RC4 cipher algorithm which is insecure. The algorithm has many known vulnerabilities. Use AES instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-rc4\",\"id\":\"go.lang.security.audit.crypto.use_of_weak_crypto.use-of-rc4\",\"name\":\"go.lang.security.audit.crypto.use_of_weak_crypto.use-of-rc4\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-rc4\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\"},\"help\":{\"markdown\":\"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1)\\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\\n\",\"text\":\"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1\",\"id\":\"go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1\",\"name\":\"go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-328: Use of Weak Hash\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.\"},\"help\":{\"markdown\":\"String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.database.string-formatted-query.string-formatted-query)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.database.string-formatted-query.string-formatted-query\",\"id\":\"go.lang.security.audit.database.string-formatted-query.string-formatted-query\",\"name\":\"go.lang.security.audit.database.string-formatted-query.string-formatted-query\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\",\"LOW CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.database.string-formatted-query.string-formatted-query\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected a network listener listening on 0.0.0.0 or an empty string. This could unexpectedly expose the server publicly as it binds to all available interfaces. Instead, specify another IP address that is not 0.0.0.0 nor the empty string.\"},\"help\":{\"markdown\":\"Detected a network listener listening on 0.0.0.0 or an empty string. This could unexpectedly expose the server publicly as it binds to all available interfaces. Instead, specify another IP address that is not 0.0.0.0 nor the empty string.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.net.bind_all.avoid-bind-to-all-interfaces)\\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\\n\",\"text\":\"Detected a network listener listening on 0.0.0.0 or an empty string. This could unexpectedly expose the server publicly as it binds to all available interfaces. Instead, specify another IP address that is not 0.0.0.0 nor the empty string.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.net.bind_all.avoid-bind-to-all-interfaces\",\"id\":\"go.lang.security.audit.net.bind_all.avoid-bind-to-all-interfaces\",\"name\":\"go.lang.security.audit.net.bind_all.avoid-bind-to-all-interfaces\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\",\"HIGH CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.net.bind_all.avoid-bind-to-all-interfaces\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected a potentially dynamic ClientTrace. This occurred because semgrep could not find a static definition for '$TRACE'. Dynamic ClientTraces are dangerous because they deserialize function code to run when certain Request events occur, which could lead to code being run without your knowledge. Ensure that your ClientTrace is statically defined.\"},\"help\":{\"markdown\":\"Detected a potentially dynamic ClientTrace. This occurred because semgrep could not find a static definition for '$TRACE'. Dynamic ClientTraces are dangerous because they deserialize function code to run when certain Request events occur, which could lead to code being run without your knowledge. Ensure that your ClientTrace is statically defined.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.net.dynamic-httptrace-clienttrace.dynamic-httptrace-clienttrace)\\n - [https://github.com/returntocorp/semgrep-rules/issues/518](https://github.com/returntocorp/semgrep-rules/issues/518)\\n\",\"text\":\"Detected a potentially dynamic ClientTrace. This occurred because semgrep could not find a static definition for '$TRACE'. Dynamic ClientTraces are dangerous because they deserialize function code to run when certain Request events occur, which could lead to code being run without your knowledge. Ensure that your ClientTrace is statically defined.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.net.dynamic-httptrace-clienttrace.dynamic-httptrace-clienttrace\",\"id\":\"go.lang.security.audit.net.dynamic-httptrace-clienttrace.dynamic-httptrace-clienttrace\",\"name\":\"go.lang.security.audit.net.dynamic-httptrace-clienttrace.dynamic-httptrace-clienttrace\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-913: Improper Control of Dynamically-Managed Code Resources\",\"MEDIUM CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.net.dynamic-httptrace-clienttrace.dynamic-httptrace-clienttrace\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Found a formatted template string passed to 'template.HTML()'. 'template.HTML()' does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability.\"},\"help\":{\"markdown\":\"Found a formatted template string passed to 'template.HTML()'. 'template.HTML()' does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.net.formatted-template-string.formatted-template-string)\\n - [https://golang.org/pkg/html/template/#HTML](https://golang.org/pkg/html/template/#HTML)\\n\",\"text\":\"Found a formatted template string passed to 'template.HTML()'. 'template.HTML()' does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.net.formatted-template-string.formatted-template-string\",\"id\":\"go.lang.security.audit.net.formatted-template-string.formatted-template-string\",\"name\":\"go.lang.security.audit.net.formatted-template-string.formatted-template-string\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"MEDIUM CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.net.formatted-template-string.formatted-template-string\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"The profiling 'pprof' endpoint is automatically exposed on /debug/pprof. This could leak information about the server. Instead, use `import \\\"net/http/pprof\\\"`. See https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/ for more information and mitigation.\"},\"help\":{\"markdown\":\"The profiling 'pprof' endpoint is automatically exposed on /debug/pprof. This could leak information about the server. Instead, use `import \\\"net/http/pprof\\\"`. See https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/ for more information and mitigation.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.net.pprof.pprof-debug-exposure)\\n - [https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/](https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/)\\n\",\"text\":\"The profiling 'pprof' endpoint is automatically exposed on /debug/pprof. This could leak information about the server. Instead, use `import \\\"net/http/pprof\\\"`. See https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/ for more information and mitigation.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.net.pprof.pprof-debug-exposure\",\"id\":\"go.lang.security.audit.net.pprof.pprof-debug-exposure\",\"name\":\"go.lang.security.audit.net.pprof.pprof-debug-exposure\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-489: Active Debug Code\",\"LOW CONFIDENCE\",\"OWASP-A06:2017 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.net.pprof.pprof-debug-exposure\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Found a formatted template string passed to 'template. HTMLAttr()'. 'template.HTMLAttr()' does not escape contents. Be absolutely sure there is no user-controlled data in this template or validate and sanitize the data before passing it into the template.\"},\"help\":{\"markdown\":\"Found a formatted template string passed to 'template. HTMLAttr()'. 'template.HTMLAttr()' does not escape contents. Be absolutely sure there is no user-controlled data in this template or validate and sanitize the data before passing it into the template.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.net.unescaped-data-in-htmlattr.unescaped-data-in-htmlattr)\\n - [https://golang.org/pkg/html/template/#HTMLAttr](https://golang.org/pkg/html/template/#HTMLAttr)\\n\",\"text\":\"Found a formatted template string passed to 'template. HTMLAttr()'. 'template.HTMLAttr()' does not escape contents. Be absolutely sure there is no user-controlled data in this template or validate and sanitize the data before passing it into the template.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.net.unescaped-data-in-htmlattr.unescaped-data-in-htmlattr\",\"id\":\"go.lang.security.audit.net.unescaped-data-in-htmlattr.unescaped-data-in-htmlattr\",\"name\":\"go.lang.security.audit.net.unescaped-data-in-htmlattr.unescaped-data-in-htmlattr\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.net.unescaped-data-in-htmlattr.unescaped-data-in-htmlattr\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Found a formatted template string passed to 'template.JS()'. 'template.JS()' does not escape contents. Be absolutely sure there is no user-controlled data in this template.\"},\"help\":{\"markdown\":\"Found a formatted template string passed to 'template.JS()'. 'template.JS()' does not escape contents. Be absolutely sure there is no user-controlled data in this template.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.net.unescaped-data-in-js.unescaped-data-in-js)\\n - [https://golang.org/pkg/html/template/#JS](https://golang.org/pkg/html/template/#JS)\\n\",\"text\":\"Found a formatted template string passed to 'template.JS()'. 'template.JS()' does not escape contents. Be absolutely sure there is no user-controlled data in this template.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.net.unescaped-data-in-js.unescaped-data-in-js\",\"id\":\"go.lang.security.audit.net.unescaped-data-in-js.unescaped-data-in-js\",\"name\":\"go.lang.security.audit.net.unescaped-data-in-js.unescaped-data-in-js\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.net.unescaped-data-in-js.unescaped-data-in-js\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Found a formatted template string passed to 'template.URL()'. 'template.URL()' does not escape contents, and this could result in XSS (cross-site scripting) and therefore confidential data being stolen. Sanitize data coming into this function or make sure that no user-controlled input is coming into the function.\"},\"help\":{\"markdown\":\"Found a formatted template string passed to 'template.URL()'. 'template.URL()' does not escape contents, and this could result in XSS (cross-site scripting) and therefore confidential data being stolen. Sanitize data coming into this function or make sure that no user-controlled input is coming into the function.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.net.unescaped-data-in-url.unescaped-data-in-url)\\n - [https://golang.org/pkg/html/template/#URL](https://golang.org/pkg/html/template/#URL)\\n\",\"text\":\"Found a formatted template string passed to 'template.URL()'. 'template.URL()' does not escape contents, and this could result in XSS (cross-site scripting) and therefore confidential data being stolen. Sanitize data coming into this function or make sure that no user-controlled input is coming into the function.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.net.unescaped-data-in-url.unescaped-data-in-url\",\"id\":\"go.lang.security.audit.net.unescaped-data-in-url.unescaped-data-in-url\",\"name\":\"go.lang.security.audit.net.unescaped-data-in-url.unescaped-data-in-url\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.net.unescaped-data-in-url.unescaped-data-in-url\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.\"},\"help\":{\"markdown\":\"Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.net.use-tls.use-tls)\\n - [https://golang.org/pkg/net/http/#ListenAndServeTLS](https://golang.org/pkg/net/http/#ListenAndServeTLS)\\n\",\"text\":\"Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.net.use-tls.use-tls\",\"id\":\"go.lang.security.audit.net.use-tls.use-tls\",\"name\":\"go.lang.security.audit.net.use-tls.use-tls\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-319: Cleartext Transmission of Sensitive Information\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.net.use-tls.use-tls\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Found data going from url query parameters into formatted data written to ResponseWriter. This could be XSS and should not be done. If you must do this, ensure your data is sanitized or escaped.\"},\"help\":{\"markdown\":\"Found data going from url query parameters into formatted data written to ResponseWriter. This could be XSS and should not be done. If you must do this, ensure your data is sanitized or escaped.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf.wip-xss-using-responsewriter-and-printf)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"Found data going from url query parameters into formatted data written to ResponseWriter. This could be XSS and should not be done. If you must do this, ensure your data is sanitized or escaped.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf.wip-xss-using-responsewriter-and-printf\",\"id\":\"go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf.wip-xss-using-responsewriter-and-printf\",\"name\":\"go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf.wip-xss-using-responsewriter-and-printf\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"MEDIUM CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf.wip-xss-using-responsewriter-and-printf\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"'reflect.MakeFunc' detected. This will sidestep protections that are normally afforded by Go's type system. Audit this call and be sure that user input cannot be used to affect the code generated by MakeFunc; otherwise, you will have a serious security vulnerability.\"},\"help\":{\"markdown\":\"'reflect.MakeFunc' detected. This will sidestep protections that are normally afforded by Go's type system. Audit this call and be sure that user input cannot be used to affect the code generated by MakeFunc; otherwise, you will have a serious security vulnerability.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.reflect-makefunc.reflect-makefunc)\\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\\n\",\"text\":\"'reflect.MakeFunc' detected. This will sidestep protections that are normally afforded by Go's type system. Audit this call and be sure that user input cannot be used to affect the code generated by MakeFunc; otherwise, you will have a serious security vulnerability.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.reflect-makefunc.reflect-makefunc\",\"id\":\"go.lang.security.audit.reflect-makefunc.reflect-makefunc\",\"name\":\"go.lang.security.audit.reflect-makefunc.reflect-makefunc\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-913: Improper Control of Dynamically-Managed Code Resources\",\"LOW CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.reflect-makefunc.reflect-makefunc\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Using the unsafe package in Go gives you low-level memory management and many of the strengths of the C language, but also steps around the type safety of Go and can lead to buffer overflows and possible arbitrary code execution by an attacker. Only use this package if you absolutely know what you're doing.\"},\"help\":{\"markdown\":\"Using the unsafe package in Go gives you low-level memory management and many of the strengths of the C language, but also steps around the type safety of Go and can lead to buffer overflows and possible arbitrary code execution by an attacker. Only use this package if you absolutely know what you're doing.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.unsafe.use-of-unsafe-block)\\n - [https://cwe.mitre.org/data/definitions/242.html](https://cwe.mitre.org/data/definitions/242.html)\\n\",\"text\":\"Using the unsafe package in Go gives you low-level memory management and many of the strengths of the C language, but also steps around the type safety of Go and can lead to buffer overflows and possible arbitrary code execution by an attacker. Only use this package if you absolutely know what you're doing.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.audit.unsafe.use-of-unsafe-block\",\"id\":\"go.lang.security.audit.unsafe.use-of-unsafe-block\",\"name\":\"go.lang.security.audit.unsafe.use-of-unsafe-block\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-242: Use of Inherently Dangerous Function\",\"LOW CONFIDENCE\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.audit.unsafe.use-of-unsafe-block\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"File creation in shared tmp directory without using `io.CreateTemp`.\"},\"help\":{\"markdown\":\"File creation in shared tmp directory without using `io.CreateTemp`.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.bad_tmp.bad-tmp-file-creation)\\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\\n - [https://pkg.go.dev/io/ioutil#TempFile](https://pkg.go.dev/io/ioutil#TempFile)\\n - [https://pkg.go.dev/os#CreateTemp](https://pkg.go.dev/os#CreateTemp)\\n - [https://github.com/securego/gosec/blob/5fd2a370447223541cddb35da8d1bc707b7bb153/rules/tempfiles.go#L67](https://github.com/securego/gosec/blob/5fd2a370447223541cddb35da8d1bc707b7bb153/rules/tempfiles.go#L67)\\n\",\"text\":\"File creation in shared tmp directory without using `io.CreateTemp`.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.bad_tmp.bad-tmp-file-creation\",\"id\":\"go.lang.security.bad_tmp.bad-tmp-file-creation\",\"name\":\"go.lang.security.bad_tmp.bad-tmp-file-creation\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-377: Insecure Temporary File\",\"LOW CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.bad_tmp.bad-tmp-file-creation\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected a possible denial-of-service via a zip bomb attack. By limiting the max bytes read, you can mitigate this attack. `io.CopyN()` can specify a size. \"},\"help\":{\"markdown\":\"Detected a possible denial-of-service via a zip bomb attack. By limiting the max bytes read, you can mitigate this attack. `io.CopyN()` can specify a size. \\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.decompression_bomb.potential-dos-via-decompression-bomb)\\n - [https://golang.org/pkg/io/#CopyN](https://golang.org/pkg/io/#CopyN)\\n - [https://github.com/securego/gosec/blob/master/rules/decompression-bomb.go](https://github.com/securego/gosec/blob/master/rules/decompression-bomb.go)\\n\",\"text\":\"Detected a possible denial-of-service via a zip bomb attack. By limiting the max bytes read, you can mitigate this attack. `io.CopyN()` can specify a size. \\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.decompression_bomb.potential-dos-via-decompression-bomb\",\"id\":\"go.lang.security.decompression_bomb.potential-dos-via-decompression-bomb\",\"name\":\"go.lang.security.decompression_bomb.potential-dos-via-decompression-bomb\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-400: Uncontrolled Resource Consumption\",\"LOW CONFIDENCE\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.decompression_bomb.potential-dos-via-decompression-bomb\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"File traversal when extracting zip archive\"},\"help\":{\"markdown\":\"File traversal when extracting zip archive\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.zip.path-traversal-inside-zip-extraction)\\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\\n\",\"text\":\"File traversal when extracting zip archive\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.lang.security.zip.path-traversal-inside-zip-extraction\",\"id\":\"go.lang.security.zip.path-traversal-inside-zip-extraction\",\"name\":\"go.lang.security.zip.path-traversal-inside-zip-extraction\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\",\"LOW CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"OWASP-A05:2017 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.lang.security.zip.path-traversal-inside-zip-extraction\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Detected non-static script inside otto VM. Audit the input to 'VM.Run'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.\"},\"help\":{\"markdown\":\"Detected non-static script inside otto VM. Audit the input to 'VM.Run'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/go.otto.security.audit.dangerous-execution.dangerous-execution)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"Detected non-static script inside otto VM. Audit the input to 'VM.Run'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/go.otto.security.audit.dangerous-execution.dangerous-execution\",\"id\":\"go.otto.security.audit.dangerous-execution.dangerous-execution\",\"name\":\"go.otto.security.audit.dangerous-execution.dangerous-execution\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: go.otto.security.audit.dangerous-execution.dangerous-execution\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\"},\"help\":{\"markdown\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\\n\",\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret\",\"id\":\"java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret\",\"name\":\"java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"HIGH CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\"},\"help\":{\"markdown\":\"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal)\\n - [https://www.owasp.org/index.php/Path_Traversal](https://www.owasp.org/index.php/Path_Traversal)\\n\",\"text\":\"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal\",\"id\":\"java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal\",\"name\":\"java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\",\"MEDIUM CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"OWASP-A05:2017 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information.\"},\"help\":{\"markdown\":\"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.anonymous-ldap-bind.anonymous-ldap-bind)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.anonymous-ldap-bind.anonymous-ldap-bind\",\"id\":\"java.lang.security.audit.anonymous-ldap-bind.anonymous-ldap-bind\",\"name\":\"java.lang.security.audit.anonymous-ldap-bind.anonymous-ldap-bind\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-287: Improper Authentication\",\"LOW CONFIDENCE\",\"OWASP-A02:2017 - Broken Authentication\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.anonymous-ldap-bind.anonymous-ldap-bind\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(\\\"%02X\\\", ...)' instead.\"},\"help\":{\"markdown\":\"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(\\\"%02X\\\", ...)' instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion)\\n - [https://cwe.mitre.org/data/definitions/704.html](https://cwe.mitre.org/data/definitions/704.html)\\n\",\"text\":\"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(\\\"%02X\\\", ...)' instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion\",\"id\":\"java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion\",\"name\":\"java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-704: Incorrect Type Conversion or Cast\",\"LOW CONFIDENCE\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead.\"},\"help\":{\"markdown\":\"Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle)\\n - [https://capec.mitre.org/data/definitions/463.html](https://capec.mitre.org/data/definitions/463.html)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#cipher-modes](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#cipher-modes)\\n - [https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY](https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY)\\n\",\"text\":\"Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle\",\"id\":\"java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle\",\"name\":\"java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"HIGH CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"A formatted or concatenated string was detected as input to a java.lang.Runtime call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.\"},\"help\":{\"markdown\":\"A formatted or concatenated string was detected as input to a java.lang.Runtime call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"A formatted or concatenated string was detected as input to a java.lang.Runtime call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call\",\"id\":\"java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call\",\"name\":\"java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\",\"LOW CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'\"},\"help\":{\"markdown\":\"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly)\\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\\n\",\"text\":\"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly\",\"id\":\"java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly\",\"name\":\"java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag\",\"LOW CONFIDENCE\",\"OWASP-A05:2021 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'\"},\"help\":{\"markdown\":\"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag)\\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\\n\",\"text\":\"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag\",\"id\":\"java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag\",\"name\":\"java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\",\"LOW CONFIDENCE\",\"OWASP-A05:2021 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.\"},\"help\":{\"markdown\":\"When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crlf-injection-logs.crlf-injection-logs)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.crlf-injection-logs.crlf-injection-logs\",\"id\":\"java.lang.security.audit.crlf-injection-logs.crlf-injection-logs\",\"name\":\"java.lang.security.audit.crlf-injection-logs.crlf-injection-logs\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')\",\"MEDIUM CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.crlf-injection-logs.crlf-injection-logs\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information.\"},\"help\":{\"markdown\":\"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated)\\n - [https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard](https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms)\\n\",\"text\":\"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated\",\"id\":\"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated\",\"name\":\"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-326: Inadequate Encryption Strength\",\"HIGH CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES.\"},\"help\":{\"markdown\":\"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated)\\n - [https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA](https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA)\\n\",\"text\":\"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated\",\"id\":\"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated\",\"name\":\"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-326: Inadequate Encryption Strength\",\"HIGH CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\\\"AES/CBC/PKCS7PADDING\\\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\"},\"help\":{\"markdown\":\"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\\\"AES/CBC/PKCS7PADDING\\\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.no-null-cipher.no-null-cipher)\\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\\n\",\"text\":\"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\\\"AES/CBC/PKCS7PADDING\\\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.crypto.no-null-cipher.no-null-cipher\",\"id\":\"java.lang.security.audit.crypto.no-null-cipher.no-null-cipher\",\"name\":\"java.lang.security.audit.crypto.no-null-cipher.no-null-cipher\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"HIGH CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.crypto.no-null-cipher.no-null-cipher\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Initialization Vectors (IVs) for block ciphers should be randomly generated each time they are used. Using a static IV means the same plaintext encrypts to the same ciphertext every time, weakening the strength of the encryption.\"},\"help\":{\"markdown\":\"Initialization Vectors (IVs) for block ciphers should be randomly generated each time they are used. Using a static IV means the same plaintext encrypts to the same ciphertext every time, weakening the strength of the encryption.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector)\\n - [https://cwe.mitre.org/data/definitions/329.html](https://cwe.mitre.org/data/definitions/329.html)\\n\",\"text\":\"Initialization Vectors (IVs) for block ciphers should be randomly generated each time they are used. Using a static IV means the same plaintext encrypts to the same ciphertext every time, weakening the strength of the encryption.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector\",\"id\":\"java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector\",\"name\":\"java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-329: Generation of Predictable IV with CBC Mode\",\"HIGH CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Using RSA without OAEP mode weakens the encryption.\"},\"help\":{\"markdown\":\"Using RSA without OAEP mode weakens the encryption.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding)\\n - [https://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/](https://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/)\\n\",\"text\":\"Using RSA without OAEP mode weakens the encryption.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding\",\"id\":\"java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding\",\"name\":\"java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-326: Inadequate Encryption Strength\",\"HIGH CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Cryptographic algorithms are notoriously difficult to get right. By implementing a custom message digest, you risk introducing security issues into your program. Use one of the many sound message digests already available to you: MessageDigest sha256Digest = MessageDigest.getInstance(\\\"SHA256\\\");\"},\"help\":{\"markdown\":\"Cryptographic algorithms are notoriously difficult to get right. By implementing a custom message digest, you risk introducing security issues into your program. Use one of the many sound message digests already available to you: MessageDigest sha256Digest = MessageDigest.getInstance(\\\"SHA256\\\");\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests.avoid-implementing-custom-digests)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#custom-algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#custom-algorithms)\\n\",\"text\":\"Cryptographic algorithms are notoriously difficult to get right. By implementing a custom message digest, you risk introducing security issues into your program. Use one of the many sound message digests already available to you: MessageDigest sha256Digest = MessageDigest.getInstance(\\\"SHA256\\\");\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests.avoid-implementing-custom-digests\",\"id\":\"java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests.avoid-implementing-custom-digests\",\"name\":\"java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests.avoid-implementing-custom-digests\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"LOW CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests.avoid-implementing-custom-digests\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use HttpClientBuilder instead.\"},\"help\":{\"markdown\":\"DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use HttpClientBuilder instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated)\\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\\n\",\"text\":\"DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use HttpClientBuilder instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated\",\"id\":\"java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated\",\"name\":\"java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-326: Inadequate Encryption Strength\",\"LOW CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Insecure HostnameVerifier implementation detected. This will accept any SSL certificate with any hostname, which creates the possibility for man-in-the-middle attacks.\"},\"help\":{\"markdown\":\"Insecure HostnameVerifier implementation detected. This will accept any SSL certificate with any hostname, which creates the possibility for man-in-the-middle attacks.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.insecure-hostname-verifier.insecure-hostname-verifier)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Insecure HostnameVerifier implementation detected. This will accept any SSL certificate with any hostname, which creates the possibility for man-in-the-middle attacks.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.insecure-hostname-verifier.insecure-hostname-verifier\",\"id\":\"java.lang.security.audit.crypto.ssl.insecure-hostname-verifier.insecure-hostname-verifier\",\"name\":\"java.lang.security.audit.crypto.ssl.insecure-hostname-verifier.insecure-hostname-verifier\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-295: Improper Certificate Validation\",\"LOW CONFIDENCE\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.crypto.ssl.insecure-hostname-verifier.insecure-hostname-verifier\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected empty trust manager implementations. This is dangerous because it accepts any certificate, enabling man-in-the-middle attacks. Consider using a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https for more information.\"},\"help\":{\"markdown\":\"Detected empty trust manager implementations. This is dangerous because it accepts any certificate, enabling man-in-the-middle attacks. Consider using a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https for more information.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.insecure-trust-manager.insecure-trust-manager)\\n - [https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https](https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https)\\n\",\"text\":\"Detected empty trust manager implementations. This is dangerous because it accepts any certificate, enabling man-in-the-middle attacks. Consider using a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https for more information.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.insecure-trust-manager.insecure-trust-manager\",\"id\":\"java.lang.security.audit.crypto.ssl.insecure-trust-manager.insecure-trust-manager\",\"name\":\"java.lang.security.audit.crypto.ssl.insecure-trust-manager.insecure-trust-manager\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-295: Improper Certificate Validation\",\"LOW CONFIDENCE\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.crypto.ssl.insecure-trust-manager.insecure-trust-manager\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead.\"},\"help\":{\"markdown\":\"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket)\\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\\n\",\"text\":\"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket\",\"id\":\"java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket\",\"name\":\"java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-319: Cleartext Transmission of Sensitive Information\",\"HIGH CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.\"},\"help\":{\"markdown\":\"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-md5.use-of-md5)\\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\\n\",\"text\":\"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-md5.use-of-md5\",\"id\":\"java.lang.security.audit.crypto.use-of-md5.use-of-md5\",\"name\":\"java.lang.security.audit.crypto.use-of-md5.use-of-md5\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-328: Use of Weak Hash\",\"HIGH CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.crypto.use-of-md5.use-of-md5\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications.\"},\"help\":{\"markdown\":\"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-sha1.use-of-sha1)\\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\\n\",\"text\":\"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-sha1.use-of-sha1\",\"id\":\"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1\",\"name\":\"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-328: Use of Weak Hash\",\"HIGH CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.crypto.use-of-sha1.use-of-sha1\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead.\"},\"help\":{\"markdown\":\"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.weak-random.weak-random)\\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\\n\",\"text\":\"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.crypto.weak-random.weak-random\",\"id\":\"java.lang.security.audit.crypto.weak-random.weak-random\",\"name\":\"java.lang.security.audit.crypto.weak-random.weak-random\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-330: Use of Insufficiently Random Values\",\"LOW CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.crypto.weak-random.weak-random\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"An expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\"},\"help\":{\"markdown\":\"An expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.el-injection.el-injection)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"An expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.el-injection.el-injection\",\"id\":\"java.lang.security.audit.el-injection.el-injection\",\"name\":\"java.lang.security.audit.el-injection.el-injection\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.el-injection.el-injection\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.\"},\"help\":{\"markdown\":\"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\\n - [https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps](https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps)\\n - [https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement](https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement)\\n\",\"text\":\"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string\",\"id\":\"java.lang.security.audit.formatted-sql-string.formatted-sql-string\",\"name\":\"java.lang.security.audit.formatted-sql-string.formatted-sql-string\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\",\"MEDIUM CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.formatted-sql-string.formatted-sql-string\"}},{\"defaultConfiguration\":{\"level\":\"note\"},\"fullDescription\":{\"text\":\"Older Java application servers are vulnerable to HTTP response splitting, which may occur if an HTTP request can be injected with CRLF characters. This finding is reported for completeness; it is recommended to ensure your environment is not affected by testing this yourself.\"},\"help\":{\"markdown\":\"Older Java application servers are vulnerable to HTTP response splitting, which may occur if an HTTP request can be injected with CRLF characters. This finding is reported for completeness; it is recommended to ensure your environment is not affected by testing this yourself.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.http-response-splitting.http-response-splitting)\\n - [https://www.owasp.org/index.php/HTTP_Response_Splitting](https://www.owasp.org/index.php/HTTP_Response_Splitting)\\n\",\"text\":\"Older Java application servers are vulnerable to HTTP response splitting, which may occur if an HTTP request can be injected with CRLF characters. This finding is reported for completeness; it is recommended to ensure your environment is not affected by testing this yourself.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.http-response-splitting.http-response-splitting\",\"id\":\"java.lang.security.audit.http-response-splitting.http-response-splitting\",\"name\":\"java.lang.security.audit.http-response-splitting.http-response-splitting\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\",\"MEDIUM CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.http-response-splitting.http-response-splitting\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Insecure SMTP connection detected. This connection will trust any SSL certificate. Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'.\"},\"help\":{\"markdown\":\"Insecure SMTP connection detected. This connection will trust any SSL certificate. Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Insecure SMTP connection detected. This connection will trust any SSL certificate. Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection\",\"id\":\"java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection\",\"name\":\"java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-297: Improper Validation of Certificate with Host Mismatch\",\"MEDIUM CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Possible JDBC injection detected. Use the parameterized query feature available in queryForObject instead of concatenating or formatting strings: 'jdbc.queryForObject(\\\"select * from table where name = ?\\\", Integer.class, parameterName);'\"},\"help\":{\"markdown\":\"Possible JDBC injection detected. Use the parameterized query feature available in queryForObject instead of concatenating or formatting strings: 'jdbc.queryForObject(\\\"select * from table where name = ?\\\", Integer.class, parameterName);'\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.jdbc-sql-formatted-string.jdbc-sql-formatted-string)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"Possible JDBC injection detected. Use the parameterized query feature available in queryForObject instead of concatenating or formatting strings: 'jdbc.queryForObject(\\\"select * from table where name = ?\\\", Integer.class, parameterName);'\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.jdbc-sql-formatted-string.jdbc-sql-formatted-string\",\"id\":\"java.lang.security.audit.jdbc-sql-formatted-string.jdbc-sql-formatted-string\",\"name\":\"java.lang.security.audit.jdbc-sql-formatted-string.jdbc-sql-formatted-string\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\",\"LOW CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.jdbc-sql-formatted-string.jdbc-sql-formatted-string\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"An object-returning LDAP search will allow attackers to control the LDAP response. This could lead to Remote Code Execution.\"},\"help\":{\"markdown\":\"An object-returning LDAP search will allow attackers to control the LDAP response. This could lead to Remote Code Execution.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.ldap-entry-poisoning.ldap-entry-poisoning)\\n - [https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf](https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\\n\",\"text\":\"An object-returning LDAP search will allow attackers to control the LDAP response. This could lead to Remote Code Execution.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.ldap-entry-poisoning.ldap-entry-poisoning\",\"id\":\"java.lang.security.audit.ldap-entry-poisoning.ldap-entry-poisoning\",\"name\":\"java.lang.security.audit.ldap-entry-poisoning.ldap-entry-poisoning\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\",\"LOW CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.ldap-entry-poisoning.ldap-entry-poisoning\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected non-constant data passed into an LDAP query. If this data can be controlled by an external user, this is an LDAP injection. Ensure data passed to an LDAP query is not controllable; or properly sanitize the data.\"},\"help\":{\"markdown\":\"Detected non-constant data passed into an LDAP query. If this data can be controlled by an external user, this is an LDAP injection. Ensure data passed to an LDAP query is not controllable; or properly sanitize the data.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.ldap-injection.ldap-injection)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"Detected non-constant data passed into an LDAP query. If this data can be controlled by an external user, this is an LDAP injection. Ensure data passed to an LDAP query is not controllable; or properly sanitize the data.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.ldap-injection.ldap-injection\",\"id\":\"java.lang.security.audit.ldap-injection.ldap-injection\",\"name\":\"java.lang.security.audit.ldap-injection.ldap-injection\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\",\"LOW CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.ldap-injection.ldap-injection\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object.\"},\"help\":{\"markdown\":\"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.object-deserialization.object-deserialization)\\n - [https://www.owasp.org/index.php/Deserialization_of_untrusted_data](https://www.owasp.org/index.php/Deserialization_of_untrusted_data)\\n - [https://www.oracle.com/java/technologies/javase/seccodeguide.html#8](https://www.oracle.com/java/technologies/javase/seccodeguide.html#8)\\n\",\"text\":\"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.object-deserialization.object-deserialization\",\"id\":\"java.lang.security.audit.object-deserialization.object-deserialization\",\"name\":\"java.lang.security.audit.object-deserialization.object-deserialization\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-502: Deserialization of Untrusted Data\",\"LOW CONFIDENCE\",\"OWASP-A08:2017 - Insecure Deserialization\",\"OWASP-A08:2021 - Software and Data Integrity Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.object-deserialization.object-deserialization\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected file permissions that are overly permissive (read, write, and execute). It is generally a bad practices to set overly permissive file permission such as read+write+exec for all users. If the file affected is a configuration, a binary, a script or sensitive data, it can lead to privilege escalation or information leakage. Instead, follow the principle of least privilege and give users only the  permissions they need.\"},\"help\":{\"markdown\":\"Detected file permissions that are overly permissive (read, write, and execute). It is generally a bad practices to set overly permissive file permission such as read+write+exec for all users. If the file affected is a configuration, a binary, a script or sensitive data, it can lead to privilege escalation or information leakage. Instead, follow the principle of least privilege and give users only the  permissions they need.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.overly-permissive-file-permission.overly-permissive-file-permission)\\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\\n\",\"text\":\"Detected file permissions that are overly permissive (read, write, and execute). It is generally a bad practices to set overly permissive file permission such as read+write+exec for all users. If the file affected is a configuration, a binary, a script or sensitive data, it can lead to privilege escalation or information leakage. Instead, follow the principle of least privilege and give users only the  permissions they need.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.overly-permissive-file-permission.overly-permissive-file-permission\",\"id\":\"java.lang.security.audit.overly-permissive-file-permission.overly-permissive-file-permission\",\"name\":\"java.lang.security.audit.overly-permissive-file-permission.overly-permissive-file-permission\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-276: Incorrect Default Permissions\",\"LOW CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.overly-permissive-file-permission.overly-permissive-file-permission\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"https://find-sec-bugs.github.io/bugs.htm#PERMISSIVE_CORS Permissive CORS policy will allow a malicious application to communicate with the victim application in an inappropriate way, leading to spoofing, data theft, relay and other attacks.\"},\"help\":{\"markdown\":\"https://find-sec-bugs.github.io/bugs.htm#PERMISSIVE_CORS Permissive CORS policy will allow a malicious application to communicate with the victim application in an inappropriate way, leading to spoofing, data theft, relay and other attacks.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.permissive-cors.permissive-cors)\\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\\n\",\"text\":\"https://find-sec-bugs.github.io/bugs.htm#PERMISSIVE_CORS Permissive CORS policy will allow a malicious application to communicate with the victim application in an inappropriate way, leading to spoofing, data theft, relay and other attacks.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.permissive-cors.permissive-cors\",\"id\":\"java.lang.security.audit.permissive-cors.permissive-cors\",\"name\":\"java.lang.security.audit.permissive-cors.permissive-cors\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-183: Permissive List of Allowed Inputs\",\"LOW CONFIDENCE\",\"OWASP-A04:2021 - Insecure Design\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.permissive-cors.permissive-cors\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected potential code injection using ScriptEngine. Ensure user-controlled data cannot enter '.eval()', otherwise, this is a code injection vulnerability.\"},\"help\":{\"markdown\":\"Detected potential code injection using ScriptEngine. Ensure user-controlled data cannot enter '.eval()', otherwise, this is a code injection vulnerability.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.script-engine-injection.script-engine-injection)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"Detected potential code injection using ScriptEngine. Ensure user-controlled data cannot enter '.eval()', otherwise, this is a code injection vulnerability.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.script-engine-injection.script-engine-injection\",\"id\":\"java.lang.security.audit.script-engine-injection.script-engine-injection\",\"name\":\"java.lang.security.audit.script-engine-injection.script-engine-injection\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.script-engine-injection.script-engine-injection\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.\"},\"help\":{\"markdown\":\"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\\n\",\"text\":\"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request\",\"id\":\"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request\",\"name\":\"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\",\"HIGH CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values.\"},\"help\":{\"markdown\":\"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request\",\"id\":\"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request\",\"name\":\"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\",\"MEDIUM CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\"},\"help\":{\"markdown\":\"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request)\\n - [https://sensei.securecodewarrior.com/recipes/scw%3Ajava%3ALDAP-injection](https://sensei.securecodewarrior.com/recipes/scw%3Ajava%3ALDAP-injection)\\n\",\"text\":\"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request\",\"id\":\"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request\",\"name\":\"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\",\"MEDIUM CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.\"},\"help\":{\"markdown\":\"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request)\\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\\n\",\"text\":\"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request\",\"id\":\"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request\",\"name\":\"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-501: Trust Boundary Violation\",\"MEDIUM CONFIDENCE\",\"OWASP-A04:2021 - Insecure Design\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\"},\"help\":{\"markdown\":\"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request\",\"id\":\"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request\",\"name\":\"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')\",\"MEDIUM CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs.\"},\"help\":{\"markdown\":\"Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect)\\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\\n\",\"text\":\"Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect\",\"id\":\"java.lang.security.audit.unvalidated-redirect.unvalidated-redirect\",\"name\":\"java.lang.security.audit.unvalidated-redirect.unvalidated-redirect\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-601: URL Redirection to Untrusted Site ('Open Redirect')\",\"MEDIUM CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.unvalidated-redirect.unvalidated-redirect\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"URL rewriting has significant security risks. Since session ID appears in the URL, it may be easily seen by third parties.\"},\"help\":{\"markdown\":\"URL rewriting has significant security risks. Since session ID appears in the URL, it may be easily seen by third parties.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.url-rewriting.url-rewriting)\\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\\n\",\"text\":\"URL rewriting has significant security risks. Since session ID appears in the URL, it may be easily seen by third parties.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.url-rewriting.url-rewriting\",\"id\":\"java.lang.security.audit.url-rewriting.url-rewriting\",\"name\":\"java.lang.security.audit.url-rewriting.url-rewriting\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\",\"LOW CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.url-rewriting.url-rewriting\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\\\"TLSv1.2\\\") for the best security.\"},\"help\":{\"markdown\":\"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\\\"TLSv1.2\\\") for the best security.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.weak-ssl-context.weak-ssl-context)\\n - [https://tools.ietf.org/html/rfc7568](https://tools.ietf.org/html/rfc7568)\\n - [https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html](https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html)\\n\",\"text\":\"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\\\"TLSv1.2\\\") for the best security.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.weak-ssl-context.weak-ssl-context\",\"id\":\"java.lang.security.audit.weak-ssl-context.weak-ssl-context\",\"name\":\"java.lang.security.audit.weak-ssl-context.weak-ssl-context\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-326: Inadequate Encryption Strength\",\"HIGH CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.weak-ssl-context.weak-ssl-context\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"XMLDecoder should not be used to parse untrusted data. Deserializing user input can lead to arbitrary code execution. Use an alternative and explicitly disable external entities. See https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html for alternatives and vulnerability prevention.\"},\"help\":{\"markdown\":\"XMLDecoder should not be used to parse untrusted data. Deserializing user input can lead to arbitrary code execution. Use an alternative and explicitly disable external entities. See https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html for alternatives and vulnerability prevention.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.xml-decoder.xml-decoder)\\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\\n\",\"text\":\"XMLDecoder should not be used to parse untrusted data. Deserializing user input can lead to arbitrary code execution. Use an alternative and explicitly disable external entities. See https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html for alternatives and vulnerability prevention.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.xml-decoder.xml-decoder\",\"id\":\"java.lang.security.audit.xml-decoder.xml-decoder\",\"name\":\"java.lang.security.audit.xml-decoder.xml-decoder\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-611: Improper Restriction of XML External Entity Reference\",\"LOW CONFIDENCE\",\"OWASP-A04:2017 - XML External Entities (XXE)\",\"OWASP-A05:2021 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.xml-decoder.xml-decoder\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.\"},\"help\":{\"markdown\":\"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer)\\n - [https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html](https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html)\\n\",\"text\":\"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer\",\"id\":\"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer\",\"name\":\"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"MEDIUM CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"It looks like you're using an implementation of XSSRequestWrapper from dzone. (https://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html) The XSS filtering in this code is not secure and can be bypassed by malicious actors. It is recommended to use a stack that automatically escapes in your view or templates instead of filtering yourself.\"},\"help\":{\"markdown\":\"It looks like you're using an implementation of XSSRequestWrapper from dzone. (https://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html) The XSS filtering in this code is not secure and can be bypassed by malicious actors. It is recommended to use a stack that automatically escapes in your view or templates instead of filtering yourself.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.xssrequestwrapper-is-insecure.xssrequestwrapper-is-insecure)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"It looks like you're using an implementation of XSSRequestWrapper from dzone. (https://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html) The XSS filtering in this code is not secure and can be bypassed by malicious actors. It is recommended to use a stack that automatically escapes in your view or templates instead of filtering yourself.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.audit.xssrequestwrapper-is-insecure.xssrequestwrapper-is-insecure\",\"id\":\"java.lang.security.audit.xssrequestwrapper-is-insecure.xssrequestwrapper-is-insecure\",\"name\":\"java.lang.security.audit.xssrequestwrapper-is-insecure.xssrequestwrapper-is-insecure\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.audit.xssrequestwrapper-is-insecure.xssrequestwrapper-is-insecure\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\"},\"help\":{\"markdown\":\"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal)\\n - [https://www.owasp.org/index.php/Path_Traversal](https://www.owasp.org/index.php/Path_Traversal)\\n\",\"text\":\"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal\",\"id\":\"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal\",\"name\":\"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\",\"MEDIUM CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"OWASP-A05:2017 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'.\"},\"help\":{\"markdown\":\"Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss\",\"id\":\"java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss\",\"name\":\"java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"MEDIUM CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"XML external entities are enabled for this XMLInputFactory. This is vulnerable to XML external entity attacks. Disable external entities by setting \\\"javax.xml.stream.isSupportingExternalEntities\\\" to false.\"},\"help\":{\"markdown\":\"XML external entities are enabled for this XMLInputFactory. This is vulnerable to XML external entity attacks. Disable external entities by setting \\\"javax.xml.stream.isSupportingExternalEntities\\\" to false.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.xmlinputfactory-external-entities-enabled.xmlinputfactory-external-entities-enabled)\\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\\n - [https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf](https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf)\\n\",\"text\":\"XML external entities are enabled for this XMLInputFactory. This is vulnerable to XML external entity attacks. Disable external entities by setting \\\"javax.xml.stream.isSupportingExternalEntities\\\" to false.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.xmlinputfactory-external-entities-enabled.xmlinputfactory-external-entities-enabled\",\"id\":\"java.lang.security.xmlinputfactory-external-entities-enabled.xmlinputfactory-external-entities-enabled\",\"name\":\"java.lang.security.xmlinputfactory-external-entities-enabled.xmlinputfactory-external-entities-enabled\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-611: Improper Restriction of XML External Entity Reference\",\"LOW CONFIDENCE\",\"OWASP-A04:2017 - XML External Entities (XXE)\",\"OWASP-A05:2021 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.xmlinputfactory-external-entities-enabled.xmlinputfactory-external-entities-enabled\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \\\"javax.xml.stream.isSupportingExternalEntities\\\" to false.\"},\"help\":{\"markdown\":\"XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \\\"javax.xml.stream.isSupportingExternalEntities\\\" to false.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe)\\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\\n - [https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf](https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#xmlinputfactory-a-stax-parser](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#xmlinputfactory-a-stax-parser)\\n\",\"text\":\"XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \\\"javax.xml.stream.isSupportingExternalEntities\\\" to false.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe\",\"id\":\"java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe\",\"name\":\"java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-611: Improper Restriction of XML External Entity Reference\",\"MEDIUM CONFIDENCE\",\"OWASP-A04:2017 - XML External Entities (XXE)\",\"OWASP-A05:2021 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Using an arbitrary object ('$PARAMTYPE $PARAM') with Java RMI is an insecure deserialization vulnerability. This object can be manipulated by a malicious actor allowing them to execute code on your system. Instead, use an integer ID to look up your object, or consider alternative serialization schemes such as JSON.\"},\"help\":{\"markdown\":\"Using an arbitrary object ('$PARAMTYPE $PARAM') with Java RMI is an insecure deserialization vulnerability. This object can be manipulated by a malicious actor allowing them to execute code on your system. Instead, use an integer ID to look up your object, or consider alternative serialization schemes such as JSON.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.rmi.security.server-dangerous-object-deserialization.server-dangerous-object-deserialization)\\n - [https://frohoff.github.io/appseccali-marshalling-pickles/](https://frohoff.github.io/appseccali-marshalling-pickles/)\\n - [https://book.hacktricks.xyz/network-services-pentesting/1099-pentesting-java-rmi](https://book.hacktricks.xyz/network-services-pentesting/1099-pentesting-java-rmi)\\n - [https://youtu.be/t_aw1mDNhzI](https://youtu.be/t_aw1mDNhzI)\\n - [https://github.com/qtc-de/remote-method-guesser](https://github.com/qtc-de/remote-method-guesser)\\n - [https://github.com/openjdk/jdk/blob/master/src/java.rmi/share/classes/sun/rmi/server/UnicastRef.java#L303C4-L331](https://github.com/openjdk/jdk/blob/master/src/java.rmi/share/classes/sun/rmi/server/UnicastRef.java#L303C4-L331)\\n\",\"text\":\"Using an arbitrary object ('$PARAMTYPE $PARAM') with Java RMI is an insecure deserialization vulnerability. This object can be manipulated by a malicious actor allowing them to execute code on your system. Instead, use an integer ID to look up your object, or consider alternative serialization schemes such as JSON.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.rmi.security.server-dangerous-object-deserialization.server-dangerous-object-deserialization\",\"id\":\"java.rmi.security.server-dangerous-object-deserialization.server-dangerous-object-deserialization\",\"name\":\"java.rmi.security.server-dangerous-object-deserialization.server-dangerous-object-deserialization\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-502: Deserialization of Untrusted Data\",\"LOW CONFIDENCE\",\"OWASP-A08:2017 - Insecure Deserialization\",\"OWASP-A08:2021 - Software and Data Integrity Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.rmi.security.server-dangerous-object-deserialization.server-dangerous-object-deserialization\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\"},\"help\":{\"markdown\":\"A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.spring.security.audit.spel-injection.spel-injection)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.spring.security.audit.spel-injection.spel-injection\",\"id\":\"java.spring.security.audit.spel-injection.spel-injection\",\"name\":\"java.spring.security.audit.spel-injection.spel-injection\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.spring.security.audit.spel-injection.spel-injection\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"CSRF protection is disabled for this configuration. This is a security risk.\"},\"help\":{\"markdown\":\"CSRF protection is disabled for this configuration. This is a security risk.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled)\\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\\n\",\"text\":\"CSRF protection is disabled for this configuration. This is a security risk.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled\",\"id\":\"java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled\",\"name\":\"java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-352: Cross-Site Request Forgery (CSRF)\",\"LOW CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Application redirects a user to a destination URL specified by a user supplied parameter that is not validated.\"},\"help\":{\"markdown\":\"Application redirects a user to a destination URL specified by a user supplied parameter that is not validated.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect)\\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\\n\",\"text\":\"Application redirects a user to a destination URL specified by a user supplied parameter that is not validated.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect\",\"id\":\"java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect\",\"name\":\"java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-601: URL Redirection to Untrusted Site ('Open Redirect')\",\"MEDIUM CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\"},\"help\":{\"markdown\":\"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping)\\n - [https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING](https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING)\\n\",\"text\":\"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\",\"id\":\"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\",\"name\":\"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-352: Cross-Site Request Forgery (CSRF)\",\"LOW CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\"},\"help\":{\"markdown\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\\n\",\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret\",\"id\":\"javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret\",\"name\":\"javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"HIGH CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"It looks like '$UNK' is read from user input and it is used to as a redirect. Ensure '$UNK' is not externally controlled, otherwise this is an open redirect.\"},\"help\":{\"markdown\":\"It looks like '$UNK' is read from user input and it is used to as a redirect. Ensure '$UNK' is not externally controlled, otherwise this is an open redirect.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect)\\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\\n\",\"text\":\"It looks like '$UNK' is read from user input and it is used to as a redirect. Ensure '$UNK' is not externally controlled, otherwise this is an open redirect.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect\",\"id\":\"javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect\",\"name\":\"javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-601: URL Redirection to Untrusted Site ('Open Redirect')\",\"LOW CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\"},\"help\":{\"markdown\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\\n\",\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret\",\"id\":\"javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret\",\"name\":\"javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"HIGH CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine.\"},\"help\":{\"markdown\":\"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection)\\n - [https://blog.gopheracademy.com/advent-2017/go-grpc-beyond-basics/#:~:text=disables%20transport%20security](https://blog.gopheracademy.com/advent-2017/go-grpc-beyond-basics/#:~:text=disables%20transport%20security)\\n\",\"text\":\"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection\",\"id\":\"javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection\",\"name\":\"javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-502: Deserialization of Untrusted Data\",\"LOW CONFIDENCE\",\"OWASP-A08:2017 - Insecure Deserialization\",\"OWASP-A08:2021 - Software and Data Integrity Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\"},\"help\":{\"markdown\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\\n\",\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret\",\"id\":\"javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret\",\"name\":\"javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"HIGH CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\"},\"help\":{\"markdown\":\"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.jose.security.jwt-none-alg.jwt-none-alg)\\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\\n\",\"text\":\"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.jose.security.jwt-none-alg.jwt-none-alg\",\"id\":\"javascript.jose.security.jwt-none-alg.jwt-none-alg\",\"name\":\"javascript.jose.security.jwt-none-alg.jwt-none-alg\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"HIGH CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.jose.security.jwt-none-alg.jwt-none-alg\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\"},\"help\":{\"markdown\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\\n\",\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret\",\"id\":\"javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret\",\"name\":\"javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"HIGH CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\"},\"help\":{\"markdown\":\"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg)\\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\\n\",\"text\":\"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg\",\"id\":\"javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg\",\"name\":\"javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data.\"},\"help\":{\"markdown\":\"Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag)\\n - [https://www.developsec.com/2017/11/09/xss-in-a-script-tag/](https://www.developsec.com/2017/11/09/xss-in-a-script-tag/)\\n - [https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68](https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68)\\n\",\"text\":\"Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag\",\"id\":\"javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag\",\"name\":\"javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer.\"},\"help\":{\"markdown\":\"Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.detect-buffer-noassert.detect-buffer-noassert)\\n - [https://cwe.mitre.org/data/definitions/119.html](https://cwe.mitre.org/data/definitions/119.html)\\n\",\"text\":\"Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.lang.security.detect-buffer-noassert.detect-buffer-noassert\",\"id\":\"javascript.lang.security.detect-buffer-noassert.detect-buffer-noassert\",\"name\":\"javascript.lang.security.detect-buffer-noassert.detect-buffer-noassert\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\",\"LOW CONFIDENCE\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.lang.security.detect-buffer-noassert.detect-buffer-noassert\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Detected calls to child_process from a function argument `$FUNC`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. \"},\"help\":{\"markdown\":\"Detected calls to child_process from a function argument `$FUNC`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. \\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.detect-child-process.detect-child-process)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions](https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions)\\n\",\"text\":\"Detected calls to child_process from a function argument `$FUNC`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. \\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.lang.security.detect-child-process.detect-child-process\",\"id\":\"javascript.lang.security.detect-child-process.detect-child-process\",\"name\":\"javascript.lang.security.detect-child-process.detect-child-process\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\",\"LOW CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.lang.security.detect-child-process.detect-child-process\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Markup escaping disabled. This can be used with some template engines to escape disabling of HTML entities, which can lead to XSS attacks.\"},\"help\":{\"markdown\":\"Markup escaping disabled. This can be used with some template engines to escape disabling of HTML entities, which can lead to XSS attacks.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"Markup escaping disabled. This can be used with some template engines to escape disabling of HTML entities, which can lead to XSS attacks.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape\",\"id\":\"javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape\",\"name\":\"javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-116: Improper Encoding or Escaping of Output\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.\"},\"help\":{\"markdown\":\"Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression)\\n - [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!)\\n\",\"text\":\"Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression\",\"id\":\"javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression\",\"name\":\"javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\",\"MEDIUM CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected use of express.csrf() middleware before express.methodOverride(). This can allow GET requests (which are not checked by csrf) to turn into POST requests later.\"},\"help\":{\"markdown\":\"Detected use of express.csrf() middleware before express.methodOverride(). This can allow GET requests (which are not checked by csrf) to turn into POST requests later.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.detect-no-csrf-before-method-override.detect-no-csrf-before-method-override)\\n - [https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/bypass-connect-csrf-protection-by-abusing.md](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/bypass-connect-csrf-protection-by-abusing.md)\\n\",\"text\":\"Detected use of express.csrf() middleware before express.methodOverride(). This can allow GET requests (which are not checked by csrf) to turn into POST requests later.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.lang.security.detect-no-csrf-before-method-override.detect-no-csrf-before-method-override\",\"id\":\"javascript.lang.security.detect-no-csrf-before-method-override.detect-no-csrf-before-method-override\",\"name\":\"javascript.lang.security.detect-no-csrf-before-method-override.detect-no-csrf-before-method-override\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-352: Cross-Site Request Forgery (CSRF)\",\"LOW CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"OWASP-A05:2017 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.lang.security.detect-no-csrf-before-method-override.detect-no-csrf-before-method-override\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers.\"},\"help\":{\"markdown\":\"Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.detect-pseudorandombytes.detect-pseudoRandomBytes)\\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\\n\",\"text\":\"Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.lang.security.detect-pseudorandombytes.detect-pseudoRandomBytes\",\"id\":\"javascript.lang.security.detect-pseudorandombytes.detect-pseudoRandomBytes\",\"name\":\"javascript.lang.security.detect-pseudorandombytes.detect-pseudoRandomBytes\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)\",\"LOW CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.lang.security.detect-pseudorandombytes.detect-pseudoRandomBytes\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Git allows shell commands to be specified in ext URLs for remote repositories. For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command to try to connect to a remote repository. Make sure that the URL is not controlled by external input.\"},\"help\":{\"markdown\":\"Git allows shell commands to be specified in ext URLs for remote repositories. For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command to try to connect to a remote repository. Make sure that the URL is not controlled by external input.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.spawn-git-clone.spawn-git-clone)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"Git allows shell commands to be specified in ext URLs for remote repositories. For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command to try to connect to a remote repository. Make sure that the URL is not controlled by external input.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.lang.security.spawn-git-clone.spawn-git-clone\",\"id\":\"javascript.lang.security.spawn-git-clone.spawn-git-clone\",\"name\":\"javascript.lang.security.spawn-git-clone.spawn-git-clone\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\",\"LOW CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.lang.security.spawn-git-clone.spawn-git-clone\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\"},\"help\":{\"markdown\":\"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.node-expat.security.audit.expat-xxe.expat-xxe)\\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\\n\",\"text\":\"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.node-expat.security.audit.expat-xxe.expat-xxe\",\"id\":\"javascript.node-expat.security.audit.expat-xxe.expat-xxe\",\"name\":\"javascript.node-expat.security.audit.expat-xxe.expat-xxe\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-611: Improper Restriction of XML External Entity Reference\",\"LOW CONFIDENCE\",\"OWASP-A04:2017 - XML External Entities (XXE)\",\"OWASP-A05:2021 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.node-expat.security.audit.expat-xxe.expat-xxe\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\"},\"help\":{\"markdown\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\\n\",\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret\",\"id\":\"javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret\",\"name\":\"javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"HIGH CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do anything with custom DTD entity definitions. If you're implementing a custom DTD entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities, or be absolutely sure that external entities received from a trusted source while processing XML.\"},\"help\":{\"markdown\":\"Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do anything with custom DTD entity definitions. If you're implementing a custom DTD entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities, or be absolutely sure that external entities received from a trusted source while processing XML.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.sax.security.audit.sax-xxe.sax-xxe)\\n - [https://github.com/Leonidas-from-XIV/node-xml2js/issues/415](https://github.com/Leonidas-from-XIV/node-xml2js/issues/415)\\n - [https://github.com/isaacs/sax-js](https://github.com/isaacs/sax-js)\\n\",\"text\":\"Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do anything with custom DTD entity definitions. If you're implementing a custom DTD entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities, or be absolutely sure that external entities received from a trusted source while processing XML.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.sax.security.audit.sax-xxe.sax-xxe\",\"id\":\"javascript.sax.security.audit.sax-xxe.sax-xxe\",\"name\":\"javascript.sax.security.audit.sax-xxe.sax-xxe\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-611: Improper Restriction of XML External Entity Reference\",\"LOW CONFIDENCE\",\"OWASP-A04:2017 - XML External Entities (XXE)\",\"OWASP-A05:2021 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.sax.security.audit.sax-xxe.sax-xxe\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\"},\"help\":{\"markdown\":\"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe)\\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\\n\",\"text\":\"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe\",\"id\":\"javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe\",\"name\":\"javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-611: Improper Restriction of XML External Entity Reference\",\"LOW CONFIDENCE\",\"OWASP-A04:2017 - XML External Entities (XXE)\",\"OWASP-A05:2021 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected public S3 bucket policy. This policy allows anyone to access certain properties of or items in the bucket. Do not do this unless you will never have sensitive data inside the bucket.\"},\"help\":{\"markdown\":\"Detected public S3 bucket policy. This policy allows anyone to access certain properties of or items in the bucket. Do not do this unless you will never have sensitive data inside the bucket.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/json.aws.security.public-s3-policy-statement.public-s3-policy-statement)\\n - [https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteAccessPermissionsReqd.html](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteAccessPermissionsReqd.html)\\n\",\"text\":\"Detected public S3 bucket policy. This policy allows anyone to access certain properties of or items in the bucket. Do not do this unless you will never have sensitive data inside the bucket.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/json.aws.security.public-s3-policy-statement.public-s3-policy-statement\",\"id\":\"json.aws.security.public-s3-policy-statement.public-s3-policy-statement\",\"name\":\"json.aws.security.public-s3-policy-statement.public-s3-policy-statement\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-264: CWE CATEGORY: Permissions, Privileges, and Access Controls\",\"MEDIUM CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: json.aws.security.public-s3-policy-statement.public-s3-policy-statement\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. It is recommended to rotate the secret and retrieve them from a secure secret vault or Hardware Security Module (HSM), alternatively environment variables can be used if allowed by your company policy.\"},\"help\":{\"markdown\":\"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. It is recommended to rotate the secret and retrieve them from a secure secret vault or Hardware Security Module (HSM), alternatively environment variables can be used if allowed by your company policy.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/kotlin.gradle.security.build-gradle-password-hardcoded.build-gradle-password-hardcoded)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. It is recommended to rotate the secret and retrieve them from a secure secret vault or Hardware Security Module (HSM), alternatively environment variables can be used if allowed by your company policy.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/kotlin.gradle.security.build-gradle-password-hardcoded.build-gradle-password-hardcoded\",\"id\":\"kotlin.gradle.security.build-gradle-password-hardcoded.build-gradle-password-hardcoded\",\"name\":\"kotlin.gradle.security.build-gradle-password-hardcoded.build-gradle-password-hardcoded\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"MEDIUM CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: kotlin.gradle.security.build-gradle-password-hardcoded.build-gradle-password-hardcoded\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information.\"},\"help\":{\"markdown\":\"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/kotlin.lang.security.anonymous-ldap-bind.anonymous-ldap-bind)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/kotlin.lang.security.anonymous-ldap-bind.anonymous-ldap-bind\",\"id\":\"kotlin.lang.security.anonymous-ldap-bind.anonymous-ldap-bind\",\"name\":\"kotlin.lang.security.anonymous-ldap-bind.anonymous-ldap-bind\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-287: Improper Authentication\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2017 - Broken Authentication\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: kotlin.lang.security.anonymous-ldap-bind.anonymous-ldap-bind\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.\"},\"help\":{\"markdown\":\"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/kotlin.lang.security.ecb-cipher.ecb-cipher)\\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\\n\",\"text\":\"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/kotlin.lang.security.ecb-cipher.ecb-cipher\",\"id\":\"kotlin.lang.security.ecb-cipher.ecb-cipher\",\"name\":\"kotlin.lang.security.ecb-cipher.ecb-cipher\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: kotlin.lang.security.ecb-cipher.ecb-cipher\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\\\"AES/CBC/PKCS7PADDING\\\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\"},\"help\":{\"markdown\":\"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\\\"AES/CBC/PKCS7PADDING\\\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/kotlin.lang.security.no-null-cipher.no-null-cipher)\\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\\n\",\"text\":\"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\\\"AES/CBC/PKCS7PADDING\\\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/kotlin.lang.security.no-null-cipher.no-null-cipher\",\"id\":\"kotlin.lang.security.no-null-cipher.no-null-cipher\",\"name\":\"kotlin.lang.security.no-null-cipher.no-null-cipher\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: kotlin.lang.security.no-null-cipher.no-null-cipher\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\"},\"help\":{\"markdown\":\"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/kotlin.lang.security.use-of-md5.use-of-md5)\\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\\n\",\"text\":\"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/kotlin.lang.security.use-of-md5.use-of-md5\",\"id\":\"kotlin.lang.security.use-of-md5.use-of-md5\",\"name\":\"kotlin.lang.security.use-of-md5.use-of-md5\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-328: Use of Weak Hash\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: kotlin.lang.security.use-of-md5.use-of-md5\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\"},\"help\":{\"markdown\":\"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/kotlin.lang.security.use-of-sha1.use-of-sha1)\\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\\n\",\"text\":\"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/kotlin.lang.security.use-of-sha1.use-of-sha1\",\"id\":\"kotlin.lang.security.use-of-sha1.use-of-sha1\",\"name\":\"kotlin.lang.security.use-of-sha1.use-of-sha1\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: kotlin.lang.security.use-of-sha1.use-of-sha1\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"RSA keys should be at least 2048 bits based on NIST recommendation.\"},\"help\":{\"markdown\":\"RSA keys should be at least 2048 bits based on NIST recommendation.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/kotlin.lang.security.weak-rsa.use-of-weak-rsa-key)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms)\\n\",\"text\":\"RSA keys should be at least 2048 bits based on NIST recommendation.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/kotlin.lang.security.weak-rsa.use-of-weak-rsa-key\",\"id\":\"kotlin.lang.security.weak-rsa.use-of-weak-rsa-key\",\"name\":\"kotlin.lang.security.weak-rsa.use-of-weak-rsa-key\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-326: Inadequate Encryption Strength\",\"HIGH CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: kotlin.lang.security.weak-rsa.use-of-weak-rsa-key\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Found a formatted string in BashOperator: $CMD. This could be vulnerable to injection. Be extra sure your variables are not controllable by external sources.\"},\"help\":{\"markdown\":\"Found a formatted string in BashOperator: $CMD. This could be vulnerable to injection. Be extra sure your variables are not controllable by external sources.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.airflow.security.audit.formatted-string-bashoperator.formatted-string-bashoperator)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"Found a formatted string in BashOperator: $CMD. This could be vulnerable to injection. Be extra sure your variables are not controllable by external sources.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.airflow.security.audit.formatted-string-bashoperator.formatted-string-bashoperator\",\"id\":\"python.airflow.security.audit.formatted-string-bashoperator.formatted-string-bashoperator\",\"name\":\"python.airflow.security.audit.formatted-string-bashoperator.formatted-string-bashoperator\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\",\"LOW CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.airflow.security.audit.formatted-string-bashoperator.formatted-string-bashoperator\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\"},\"help\":{\"markdown\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.boto3.security.hardcoded-token.hardcoded-token)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\\n - [https://bento.dev/checks/boto3/hardcoded-access-token/](https://bento.dev/checks/boto3/hardcoded-access-token/)\\n - [https://aws.amazon.com/blogs/security/what-to-do-if-you-inadvertently-expose-an-aws-access-key/](https://aws.amazon.com/blogs/security/what-to-do-if-you-inadvertently-expose-an-aws-access-key/)\\n\",\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.boto3.security.hardcoded-token.hardcoded-token\",\"id\":\"python.boto3.security.hardcoded-token.hardcoded-token\",\"name\":\"python.boto3.security.hardcoded-token.hardcoded-token\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"MEDIUM CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.boto3.security.hardcoded-token.hardcoded-token\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"IDEA (International Data Encryption Algorithm) is a block cipher created in 1991.  It is an optional component of the OpenPGP standard. This cipher is susceptible to attacks when using weak keys.  It is recommended that you do not use this cipher for new applications. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead.\"},\"help\":{\"markdown\":\"IDEA (International Data Encryption Algorithm) is a block cipher created in 1991.  It is an optional component of the OpenPGP standard. This cipher is susceptible to attacks when using weak keys.  It is recommended that you do not use this cipher for new applications. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea)\\n - [https://tools.ietf.org/html/rfc5469](https://tools.ietf.org/html/rfc5469)\\n - [https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#cryptography.hazmat.primitives.ciphers.algorithms.IDEA](https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#cryptography.hazmat.primitives.ciphers.algorithms.IDEA)\\n\",\"text\":\"IDEA (International Data Encryption Algorithm) is a block cipher created in 1991.  It is an optional component of the OpenPGP standard. This cipher is susceptible to attacks when using weak keys.  It is recommended that you do not use this cipher for new applications. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea\",\"id\":\"python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea\",\"name\":\"python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"ECB (Electronic Code Book) is the simplest mode of operation for block ciphers.  Each block of data is encrypted in the same way.  This means identical plaintext blocks will always result in identical ciphertext blocks, which can leave significant patterns in the output. Use a different, cryptographically strong mode instead, such as GCM.\"},\"help\":{\"markdown\":\"ECB (Electronic Code Book) is the simplest mode of operation for block ciphers.  Each block of data is encrypted in the same way.  This means identical plaintext blocks will always result in identical ciphertext blocks, which can leave significant patterns in the output. Use a different, cryptographically strong mode instead, such as GCM.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb)\\n - [https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#insecure-modes](https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#insecure-modes)\\n - [https://crypto.stackexchange.com/questions/20941/why-shouldnt-i-use-ecb-encryption](https://crypto.stackexchange.com/questions/20941/why-shouldnt-i-use-ecb-encryption)\\n\",\"text\":\"ECB (Electronic Code Book) is the simplest mode of operation for block ciphers.  Each block of data is encrypted in the same way.  This means identical plaintext blocks will always result in identical ciphertext blocks, which can leave significant patterns in the output. Use a different, cryptographically strong mode instead, such as GCM.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb\",\"id\":\"python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb\",\"name\":\"python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\"},\"help\":{\"markdown\":\"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1)\\n - [https://cryptography.io/en/latest/hazmat/primitives/cryptographic-hashes/#sha-1](https://cryptography.io/en/latest/hazmat/primitives/cryptographic-hashes/#sha-1)\\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\\n\",\"text\":\"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1\",\"id\":\"python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1\",\"name\":\"python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected an insufficient curve size for EC. NIST recommends a key size of 224 or higher. For example, use 'ec.SECP256R1'.\"},\"help\":{\"markdown\":\"Detected an insufficient curve size for EC. NIST recommends a key size of 224 or higher. For example, use 'ec.SECP256R1'.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size)\\n - [https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf)\\n - [https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/#elliptic-curves](https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/#elliptic-curves)\\n\",\"text\":\"Detected an insufficient curve size for EC. NIST recommends a key size of 224 or higher. For example, use 'ec.SECP256R1'.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size\",\"id\":\"python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size\",\"name\":\"python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-326: Inadequate Encryption Strength\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities.\"},\"help\":{\"markdown\":\"Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization)\\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\\n\",\"text\":\"Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization\",\"id\":\"python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization\",\"name\":\"python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-502: Deserialization of Untrusted Data\",\"MEDIUM CONFIDENCE\",\"OWASP-A08:2017 - Insecure Deserialization\",\"OWASP-A08:2021 - Software and Data Integrity Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"'mark_safe()' is used to mark a string as \\\"safe\\\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.\"},\"help\":{\"markdown\":\"'mark_safe()' is used to mark a string as \\\"safe\\\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe)\\n - [https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe](https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe)\\n - [https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html](https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html)\\n\",\"text\":\"'mark_safe()' is used to mark a string as \\\"safe\\\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe\",\"id\":\"python.django.security.audit.avoid-mark-safe.avoid-mark-safe\",\"name\":\"python.django.security.audit.avoid-mark-safe.avoid-mark-safe\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.\"},\"help\":{\"markdown\":\"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt)\\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\\n\",\"text\":\"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt\",\"id\":\"python.django.security.audit.csrf-exempt.no-csrf-exempt\",\"name\":\"python.django.security.audit.csrf-exempt.no-csrf-exempt\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-352: Cross-Site Request Forgery (CSRF)\",\"LOW CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.audit.csrf-exempt.no-csrf-exempt\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected a Custom Expression ''$EXPRESSION'' calling ''as_sql(...).'' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.\"},\"help\":{\"markdown\":\"Detected a Custom Expression ''$EXPRESSION'' calling ''as_sql(...).'' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql)\\n - [https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.Func.as_sql](https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.Func.as_sql)\\n - [https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/](https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/)\\n\",\"text\":\"Detected a Custom Expression ''$EXPRESSION'' calling ''as_sql(...).'' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql\",\"id\":\"python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql\",\"name\":\"python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\",\"LOW CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Found extension of custom expression: $CLASS. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.\"},\"help\":{\"markdown\":\"Found extension of custom expression: $CLASS. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.extends-custom-expression.extends-custom-expression)\\n - [https://docs.djangoproject.com/en/3.0/ref/models/expressions/#avoiding-sql-injection](https://docs.djangoproject.com/en/3.0/ref/models/expressions/#avoiding-sql-injection)\\n - [https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/](https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/)\\n\",\"text\":\"Found extension of custom expression: $CLASS. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.audit.extends-custom-expression.extends-custom-expression\",\"id\":\"python.django.security.audit.extends-custom-expression.extends-custom-expression\",\"name\":\"python.django.security.audit.extends-custom-expression.extends-custom-expression\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\",\"LOW CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.audit.extends-custom-expression.extends-custom-expression\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"QuerySet.extra' does not provide safeguards against SQL injection and requires very careful use. SQL injection can lead to critical data being stolen by attackers. Instead of using '.extra', use the Django ORM and parameterized queries such as `People.objects.get(name='Bob')`.\"},\"help\":{\"markdown\":\"QuerySet.extra' does not provide safeguards against SQL injection and requires very careful use. SQL injection can lead to critical data being stolen by attackers. Instead of using '.extra', use the Django ORM and parameterized queries such as `People.objects.get(name='Bob')`.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.query-set-extra.avoid-query-set-extra)\\n - [https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.extra](https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.extra)\\n - [https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/](https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/)\\n\",\"text\":\"QuerySet.extra' does not provide safeguards against SQL injection and requires very careful use. SQL injection can lead to critical data being stolen by attackers. Instead of using '.extra', use the Django ORM and parameterized queries such as `People.objects.get(name='Bob')`.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.audit.query-set-extra.avoid-query-set-extra\",\"id\":\"python.django.security.audit.query-set-extra.avoid-query-set-extra\",\"name\":\"python.django.security.audit.query-set-extra.avoid-query-set-extra\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\",\"LOW CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.audit.query-set-extra.avoid-query-set-extra\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected the use of 'RawSQL' or 'raw' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name='Bob')`\"},\"help\":{\"markdown\":\"Detected the use of 'RawSQL' or 'raw' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name='Bob')`\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.raw-query.avoid-raw-sql)\\n - [https://docs.djangoproject.com/en/3.0/ref/models/expressions/#raw-sql-expressions](https://docs.djangoproject.com/en/3.0/ref/models/expressions/#raw-sql-expressions)\\n - [https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/](https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/)\\n\",\"text\":\"Detected the use of 'RawSQL' or 'raw' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name='Bob')`\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.audit.raw-query.avoid-raw-sql\",\"id\":\"python.django.security.audit.raw-query.avoid-raw-sql\",\"name\":\"python.django.security.audit.raw-query.avoid-raw-sql\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\",\"LOW CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.audit.raw-query.avoid-raw-sql\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False. If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None.\"},\"help\":{\"markdown\":\"Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False. If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.secure-cookies.django-secure-set-cookie)\\n - [https://docs.djangoproject.com/en/3.0/ref/request-response/#django.http.HttpResponse.set_cookie](https://docs.djangoproject.com/en/3.0/ref/request-response/#django.http.HttpResponse.set_cookie)\\n - [https://semgrep.dev/blog/2020/bento-check-keeping-cookies-safe-in-flask/](https://semgrep.dev/blog/2020/bento-check-keeping-cookies-safe-in-flask/)\\n - [https://bento.dev/checks/flask/secure-set-cookie/](https://bento.dev/checks/flask/secure-set-cookie/)\\n\",\"text\":\"Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False. If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.audit.secure-cookies.django-secure-set-cookie\",\"id\":\"python.django.security.audit.secure-cookies.django-secure-set-cookie\",\"name\":\"python.django.security.audit.secure-cookies.django-secure-set-cookie\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\",\"LOW CONFIDENCE\",\"OWASP-A05:2021 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.audit.secure-cookies.django-secure-set-cookie\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"The password on '$MODEL' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.\"},\"help\":{\"markdown\":\"The password on '$MODEL' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password)\\n - [https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#module-django.contrib.auth.password_validation](https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#module-django.contrib.auth.password_validation)\\n\",\"text\":\"The password on '$MODEL' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password\",\"id\":\"python.django.security.audit.unvalidated-password.unvalidated-password\",\"name\":\"python.django.security.audit.unvalidated-password.unvalidated-password\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-521: Weak Password Requirements\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.audit.unvalidated-password.unvalidated-password\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected a Context with autoescape disabled. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'.\"},\"help\":{\"markdown\":\"Detected a Context with autoescape disabled. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.xss.context-autoescape-off.context-autoescape-off)\\n - [https://docs.djangoproject.com/en/3.1/ref/settings/#templates](https://docs.djangoproject.com/en/3.1/ref/settings/#templates)\\n - [https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates](https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates)\\n\",\"text\":\"Detected a Context with autoescape disabled. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.audit.xss.context-autoescape-off.context-autoescape-off\",\"id\":\"python.django.security.audit.xss.context-autoescape-off.context-autoescape-off\",\"name\":\"python.django.security.audit.xss.context-autoescape-off.context-autoescape-off\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.audit.xss.context-autoescape-off.context-autoescape-off\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Autoescape is globally disbaled for this Django application. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'.\"},\"help\":{\"markdown\":\"Autoescape is globally disbaled for this Django application. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.xss.global-autoescape-off.global-autoescape-off)\\n - [https://docs.djangoproject.com/en/3.1/ref/settings/#templates](https://docs.djangoproject.com/en/3.1/ref/settings/#templates)\\n - [https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates](https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates)\\n\",\"text\":\"Autoescape is globally disbaled for this Django application. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.audit.xss.global-autoescape-off.global-autoescape-off\",\"id\":\"python.django.security.audit.xss.global-autoescape-off.global-autoescape-off\",\"name\":\"python.django.security.audit.xss.global-autoescape-off.global-autoescape-off\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.audit.xss.global-autoescape-off.global-autoescape-off\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected a template block where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Turn autoescaping on to prevent cross-site scripting (XSS). If you must do this, consider instead, using `mark_safe` in Python code.\"},\"help\":{\"markdown\":\"Detected a template block where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Turn autoescaping on to prevent cross-site scripting (XSS). If you must do this, consider instead, using `mark_safe` in Python code.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.xss.template-autoescape-off.template-autoescape-off)\\n - [https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#autoescape](https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#autoescape)\\n\",\"text\":\"Detected a template block where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Turn autoescaping on to prevent cross-site scripting (XSS). If you must do this, consider instead, using `mark_safe` in Python code.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.audit.xss.template-autoescape-off.template-autoescape-off\",\"id\":\"python.django.security.audit.xss.template-autoescape-off.template-autoescape-off\",\"name\":\"python.django.security.audit.xss.template-autoescape-off.template-autoescape-off\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.audit.xss.template-autoescape-off.template-autoescape-off\"}},{\"defaultConfiguration\":{\"level\":\"note\"},\"fullDescription\":{\"text\":\"Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.\"},\"help\":{\"markdown\":\"Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape)\\n - [https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html#html-escaping-translations-in-django-templates](https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html#html-escaping-translations-in-django-templates)\\n - [https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#internationalization-in-template-code](https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#internationalization-in-template-code)\\n\",\"text\":\"Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape\",\"id\":\"python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape\",\"name\":\"python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape\"}},{\"defaultConfiguration\":{\"level\":\"note\"},\"fullDescription\":{\"text\":\"Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.\"},\"help\":{\"markdown\":\"Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape)\\n - [https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html#html-escaping-translations-in-django-templates](https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html#html-escaping-translations-in-django-templates)\\n - [https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#internationalization-in-template-code](https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#internationalization-in-template-code)\\n\",\"text\":\"Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape\",\"id\":\"python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape\",\"name\":\"python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected a template variable where autoescaping is explicitly disabled with '| safeseq' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability. If you must do this, use `mark_safe` in your Python code.\"},\"help\":{\"markdown\":\"Detected a template variable where autoescaping is explicitly disabled with '| safeseq' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability. If you must do this, use `mark_safe` in your Python code.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.xss.template-var-unescaped-with-safeseq.template-var-unescaped-with-safeseq)\\n - [https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#safeseq](https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#safeseq)\\n\",\"text\":\"Detected a template variable where autoescaping is explicitly disabled with '| safeseq' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability. If you must do this, use `mark_safe` in your Python code.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.audit.xss.template-var-unescaped-with-safeseq.template-var-unescaped-with-safeseq\",\"id\":\"python.django.security.audit.xss.template-var-unescaped-with-safeseq.template-var-unescaped-with-safeseq\",\"name\":\"python.django.security.audit.xss.template-var-unescaped-with-safeseq.template-var-unescaped-with-safeseq\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.audit.xss.template-var-unescaped-with-safeseq.template-var-unescaped-with-safeseq\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Found request data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\"},\"help\":{\"markdown\":\"Found request data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.injection.code.globals-misuse-code-execution.globals-misuse-code-execution)\\n - [https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186](https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186)\\n\",\"text\":\"Found request data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.injection.code.globals-misuse-code-execution.globals-misuse-code-execution\",\"id\":\"python.django.security.injection.code.globals-misuse-code-execution.globals-misuse-code-execution\",\"name\":\"python.django.security.injection.code.globals-misuse-code-execution.globals-misuse-code-execution\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.injection.code.globals-misuse-code-execution.globals-misuse-code-execution\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.\"},\"help\":{\"markdown\":\"Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.injection.code.user-eval.user-eval)\\n - [https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html](https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html)\\n - [https://owasp.org/www-community/attacks/Code_Injection](https://owasp.org/www-community/attacks/Code_Injection)\\n\",\"text\":\"Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.injection.code.user-eval.user-eval\",\"id\":\"python.django.security.injection.code.user-eval.user-eval\",\"name\":\"python.django.security.injection.code.user-eval.user-eval\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\",\"MEDIUM CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.injection.code.user-eval.user-eval\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.\"},\"help\":{\"markdown\":\"Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.injection.code.user-exec.user-exec)\\n - [https://owasp.org/www-community/attacks/Code_Injection](https://owasp.org/www-community/attacks/Code_Injection)\\n\",\"text\":\"Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.injection.code.user-exec.user-exec\",\"id\":\"python.django.security.injection.code.user-exec.user-exec\",\"name\":\"python.django.security.injection.code.user-exec.user-exec\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\",\"MEDIUM CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.injection.code.user-exec.user-exec\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information.\"},\"help\":{\"markdown\":\"Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.injection.command.command-injection-os-system.command-injection-os-system)\\n - [https://owasp.org/www-community/attacks/Command_Injection](https://owasp.org/www-community/attacks/Command_Injection)\\n\",\"text\":\"Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.injection.command.command-injection-os-system.command-injection-os-system\",\"id\":\"python.django.security.injection.command.command-injection-os-system.command-injection-os-system\",\"name\":\"python.django.security.injection.command.command-injection-os-system.command-injection-os-system\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\",\"MEDIUM CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.injection.command.command-injection-os-system.command-injection-os-system\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Found request data in an EmailMessage that is set to use HTML. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.\"},\"help\":{\"markdown\":\"Found request data in an EmailMessage that is set to use HTML. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.injection.email.xss-html-email-body.xss-html-email-body)\\n - [https://www.damonkohler.com/2008/12/email-injection.html](https://www.damonkohler.com/2008/12/email-injection.html)\\n\",\"text\":\"Found request data in an EmailMessage that is set to use HTML. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.injection.email.xss-html-email-body.xss-html-email-body\",\"id\":\"python.django.security.injection.email.xss-html-email-body.xss-html-email-body\",\"name\":\"python.django.security.injection.email.xss-html-email-body.xss-html-email-body\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\",\"MEDIUM CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.injection.email.xss-html-email-body.xss-html-email-body\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Found request data in 'send_mail(...)' that uses 'html_message'. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.\"},\"help\":{\"markdown\":\"Found request data in 'send_mail(...)' that uses 'html_message'. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message)\\n - [https://www.damonkohler.com/2008/12/email-injection.html](https://www.damonkohler.com/2008/12/email-injection.html)\\n\",\"text\":\"Found request data in 'send_mail(...)' that uses 'html_message'. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message\",\"id\":\"python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message\",\"name\":\"python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\",\"MEDIUM CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Mass assignment detected. This can result in assignment to model fields that are unintended and can be exploited by an attacker. Instead of using '**request.$W', assign each field you want to edit individually to prevent mass assignment. You can read more about mass assignment at https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html.\"},\"help\":{\"markdown\":\"Mass assignment detected. This can result in assignment to model fields that are unintended and can be exploited by an attacker. Instead of using '**request.$W', assign each field you want to edit individually to prevent mass assignment. You can read more about mass assignment at https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.injection.mass-assignment.mass-assignment)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html)\\n\",\"text\":\"Mass assignment detected. This can result in assignment to model fields that are unintended and can be exploited by an attacker. Instead of using '**request.$W', assign each field you want to edit individually to prevent mass assignment. You can read more about mass assignment at https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.injection.mass-assignment.mass-assignment\",\"id\":\"python.django.security.injection.mass-assignment.mass-assignment\",\"name\":\"python.django.security.injection.mass-assignment.mass-assignment\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes\",\"LOW CONFIDENCE\",\"OWASP-A08:2021 - Software and Data Integrity Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.injection.mass-assignment.mass-assignment\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Data from request is passed to a file name `$FILE`. This is a path traversal vulnerability, which can lead to sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library.\"},\"help\":{\"markdown\":\"Data from request is passed to a file name `$FILE`. This is a path traversal vulnerability, which can lead to sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.injection.path-traversal.path-traversal-file-name.path-traversal-file-name)\\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\\n\",\"text\":\"Data from request is passed to a file name `$FILE`. This is a path traversal vulnerability, which can lead to sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.injection.path-traversal.path-traversal-file-name.path-traversal-file-name\",\"id\":\"python.django.security.injection.path-traversal.path-traversal-file-name.path-traversal-file-name\",\"name\":\"python.django.security.injection.path-traversal.path-traversal-file-name.path-traversal-file-name\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\",\"LOW CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"OWASP-A05:2017 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.injection.path-traversal.path-traversal-file-name.path-traversal-file-name\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"'$VAR' is using the empty string as its default and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'.\"},\"help\":{\"markdown\":\"'$VAR' is using the empty string as its default and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.passwords.use-none-for-password-default.use-none-for-password-default)\\n - [https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password](https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password)\\n\",\"text\":\"'$VAR' is using the empty string as its default and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.django.security.passwords.use-none-for-password-default.use-none-for-password-default\",\"id\":\"python.django.security.passwords.use-none-for-password-default.use-none-for-password-default\",\"name\":\"python.django.security.passwords.use-none-for-password-default.use-none-for-password-default\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-521: Weak Password Requirements\",\"MEDIUM CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.django.security.passwords.use-none-for-password-default.use-none-for-password-default\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Running flask app with host 0.0.0.0 could expose the server publicly.\"},\"help\":{\"markdown\":\"Running flask app with host 0.0.0.0 could expose the server publicly.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host)\\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\\n\",\"text\":\"Running flask app with host 0.0.0.0 could expose the server publicly.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host\",\"id\":\"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host\",\"name\":\"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-668: Exposure of Resource to Wrong Sphere\",\"HIGH CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function\"},\"help\":{\"markdown\":\"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly)\\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\\n\",\"text\":\"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly\",\"id\":\"python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly\",\"name\":\"python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-668: Exposure of Resource to Wrong Sphere\",\"MEDIUM CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.\"},\"help\":{\"markdown\":\"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled)\\n - [https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/](https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/)\\n\",\"text\":\"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled\",\"id\":\"python.flask.security.audit.debug-enabled.debug-enabled\",\"name\":\"python.flask.security.audit.debug-enabled.debug-enabled\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-489: Active Debug Code\",\"HIGH CONFIDENCE\",\"OWASP-A06:2017 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.audit.debug-enabled.debug-enabled\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable\"},\"help\":{\"markdown\":\"Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG)\\n - [https://bento.dev/checks/flask/avoid-hardcoded-config/](https://bento.dev/checks/flask/avoid-hardcoded-config/)\\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values)\\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features)\\n\",\"text\":\"Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG\",\"id\":\"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG\",\"name\":\"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-489: Active Debug Code\",\"LOW CONFIDENCE\",\"OWASP-A05:2021 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Hardcoded variable `ENV` detected. Set this by using FLASK_ENV environment variable\"},\"help\":{\"markdown\":\"Hardcoded variable `ENV` detected. Set this by using FLASK_ENV environment variable\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_ENV)\\n - [https://bento.dev/checks/flask/avoid-hardcoded-config/](https://bento.dev/checks/flask/avoid-hardcoded-config/)\\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values)\\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features)\\n\",\"text\":\"Hardcoded variable `ENV` detected. Set this by using FLASK_ENV environment variable\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_ENV\",\"id\":\"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_ENV\",\"name\":\"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_ENV\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-489: Active Debug Code\",\"LOW CONFIDENCE\",\"OWASP-A05:2021 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_ENV\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead\"},\"help\":{\"markdown\":\"Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY)\\n - [https://bento.dev/checks/flask/avoid-hardcoded-config/](https://bento.dev/checks/flask/avoid-hardcoded-config/)\\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values)\\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features)\\n\",\"text\":\"Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY\",\"id\":\"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY\",\"name\":\"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-489: Active Debug Code\",\"LOW CONFIDENCE\",\"OWASP-A05:2021 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Hardcoded variable `TESTING` detected. Use environment variables or config files instead\"},\"help\":{\"markdown\":\"Hardcoded variable `TESTING` detected. Use environment variables or config files instead\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING)\\n - [https://bento.dev/checks/flask/avoid-hardcoded-config/](https://bento.dev/checks/flask/avoid-hardcoded-config/)\\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values)\\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features)\\n\",\"text\":\"Hardcoded variable `TESTING` detected. Use environment variables or config files instead\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING\",\"id\":\"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING\",\"name\":\"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-489: Active Debug Code\",\"LOW CONFIDENCE\",\"OWASP-A05:2021 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.\"},\"help\":{\"markdown\":\"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string)\\n - [https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html](https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html)\\n\",\"text\":\"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string\",\"id\":\"python.flask.security.audit.render-template-string.render-template-string\",\"name\":\"python.flask.security.audit.render-template-string.render-template-string\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.audit.render-template-string.render-template-string\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Found a Flask cookie with insecurely configured properties.  By default the secure, httponly and samesite ar configured insecurely. cookies should be handled securely by setting `secure=True`, `httponly=True`, and `samesite='Lax'` in response.set_cookie(...). If these parameters are not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker. Include the `secure=True`, `httponly=True`, `samesite='Lax'` arguments or set these to be true in the Flask configuration.\"},\"help\":{\"markdown\":\"Found a Flask cookie with insecurely configured properties.  By default the secure, httponly and samesite ar configured insecurely. cookies should be handled securely by setting `secure=True`, `httponly=True`, and `samesite='Lax'` in response.set_cookie(...). If these parameters are not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker. Include the `secure=True`, `httponly=True`, `samesite='Lax'` arguments or set these to be true in the Flask configuration.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.secure-set-cookie.secure-set-cookie)\\n - [https://flask.palletsprojects.com/en/3.0.x/api/#flask.Response.set_cookie](https://flask.palletsprojects.com/en/3.0.x/api/#flask.Response.set_cookie)\\n - [https://flask.palletsprojects.com/en/3.0.x/security/#set-cookie-options](https://flask.palletsprojects.com/en/3.0.x/security/#set-cookie-options)\\n\",\"text\":\"Found a Flask cookie with insecurely configured properties.  By default the secure, httponly and samesite ar configured insecurely. cookies should be handled securely by setting `secure=True`, `httponly=True`, and `samesite='Lax'` in response.set_cookie(...). If these parameters are not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker. Include the `secure=True`, `httponly=True`, `samesite='Lax'` arguments or set these to be true in the Flask configuration.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.audit.secure-set-cookie.secure-set-cookie\",\"id\":\"python.flask.security.audit.secure-set-cookie.secure-set-cookie\",\"name\":\"python.flask.security.audit.secure-set-cookie.secure-set-cookie\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\",\"LOW CONFIDENCE\",\"OWASP-A05:2021 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.audit.secure-set-cookie.secure-set-cookie\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Setting 'WTF_CSRF_ENABLED' to 'False' explicitly disables CSRF protection.\"},\"help\":{\"markdown\":\"Setting 'WTF_CSRF_ENABLED' to 'False' explicitly disables CSRF protection.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.wtf-csrf-disabled.flask-wtf-csrf-disabled)\\n - [https://flask-wtf.readthedocs.io/en/1.2.x/csrf/](https://flask-wtf.readthedocs.io/en/1.2.x/csrf/)\\n\",\"text\":\"Setting 'WTF_CSRF_ENABLED' to 'False' explicitly disables CSRF protection.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.audit.wtf-csrf-disabled.flask-wtf-csrf-disabled\",\"id\":\"python.flask.security.audit.wtf-csrf-disabled.flask-wtf-csrf-disabled\",\"name\":\"python.flask.security.audit.wtf-csrf-disabled.flask-wtf-csrf-disabled\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-352: Cross-Site Request Forgery (CSRF)\",\"LOW CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.audit.wtf-csrf-disabled.flask-wtf-csrf-disabled\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.\"},\"help\":{\"markdown\":\"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string)\\n - [https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html](https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html)\\n - [https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti](https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti)\\n\",\"text\":\"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string\",\"id\":\"python.flask.security.dangerous-template-string.dangerous-template-string\",\"name\":\"python.flask.security.dangerous-template-string.dangerous-template-string\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.dangerous-template-string.dangerous-template-string\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Detected user data flowing into eval. This is code injection and should be avoided.\"},\"help\":{\"markdown\":\"Detected user data flowing into eval. This is code injection and should be avoided.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.injection.user-eval.eval-injection)\\n - [https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html](https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html)\\n\",\"text\":\"Detected user data flowing into eval. This is code injection and should be avoided.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.injection.user-eval.eval-injection\",\"id\":\"python.flask.security.injection.user-eval.eval-injection\",\"name\":\"python.flask.security.injection.user-eval.eval-injection\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\",\"MEDIUM CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.injection.user-eval.eval-injection\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Detected user data flowing into exec. This is code injection and should be avoided.\"},\"help\":{\"markdown\":\"Detected user data flowing into exec. This is code injection and should be avoided.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.injection.user-exec.exec-injection)\\n - [https://nedbatchelder.com/blog/201206/exec_really_is_dangerous.html](https://nedbatchelder.com/blog/201206/exec_really_is_dangerous.html)\\n\",\"text\":\"Detected user data flowing into exec. This is code injection and should be avoided.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.injection.user-exec.exec-injection\",\"id\":\"python.flask.security.injection.user-exec.exec-injection\",\"name\":\"python.flask.security.injection.user-exec.exec-injection\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\",\"MEDIUM CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.injection.user-exec.exec-injection\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.\"},\"help\":{\"markdown\":\"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization)\\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\\n\",\"text\":\"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization\",\"id\":\"python.flask.security.insecure-deserialization.insecure-deserialization\",\"name\":\"python.flask.security.insecure-deserialization.insecure-deserialization\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-502: Deserialization of Untrusted Data\",\"LOW CONFIDENCE\",\"OWASP-A08:2017 - Insecure Deserialization\",\"OWASP-A08:2021 - Software and Data Integrity Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.insecure-deserialization.insecure-deserialization\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information.\"},\"help\":{\"markdown\":\"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.open-redirect.open-redirect)\\n - [https://flask-login.readthedocs.io/en/latest/#login-example](https://flask-login.readthedocs.io/en/latest/#login-example)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html#dangerous-url-redirect-example-1](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html#dangerous-url-redirect-example-1)\\n - [https://docs.python.org/3/library/urllib.parse.html#url-parsing](https://docs.python.org/3/library/urllib.parse.html#url-parsing)\\n\",\"text\":\"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.open-redirect.open-redirect\",\"id\":\"python.flask.security.open-redirect.open-redirect\",\"name\":\"python.flask.security.open-redirect.open-redirect\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-601: URL Redirection to Untrusted Site ('Open Redirect')\",\"LOW CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.open-redirect.open-redirect\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected a user-controlled `filename` that could flow to `flask.send_file()` function. This could lead to an attacker reading arbitrary file from the system, leaking private information. Make sure to properly sanitize filename or use `flask.send_from_directory`\"},\"help\":{\"markdown\":\"Detected a user-controlled `filename` that could flow to `flask.send_file()` function. This could lead to an attacker reading arbitrary file from the system, leaking private information. Make sure to properly sanitize filename or use `flask.send_from_directory`\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.secure-static-file-serve.avoid_send_file_without_path_sanitization)\\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\\n\",\"text\":\"Detected a user-controlled `filename` that could flow to `flask.send_file()` function. This could lead to an attacker reading arbitrary file from the system, leaking private information. Make sure to properly sanitize filename or use `flask.send_from_directory`\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.secure-static-file-serve.avoid_send_file_without_path_sanitization\",\"id\":\"python.flask.security.secure-static-file-serve.avoid_send_file_without_path_sanitization\",\"name\":\"python.flask.security.secure-static-file-serve.avoid_send_file_without_path_sanitization\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-73: External Control of File Name or Path\",\"LOW CONFIDENCE\",\"OWASP-A04:2021 - Insecure Design\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.secure-static-file-serve.avoid_send_file_without_path_sanitization\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Flask does not automatically escape Jinja templates unless they have .html, .htm, .xml, or .xhtml extensions. This could lead to XSS attacks. Use .html, .htm, .xml, or .xhtml for your template extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup for more information.\"},\"help\":{\"markdown\":\"Flask does not automatically escape Jinja templates unless they have .html, .htm, .xml, or .xhtml extensions. This could lead to XSS attacks. Use .html, .htm, .xml, or .xhtml for your template extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup for more information.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.unescaped-template-extension.unescaped-template-extension)\\n - [https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup](https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup)\\n - [https://semgrep.dev/blog/2020/bento-check-unescaped-template-extensions-in-flask/](https://semgrep.dev/blog/2020/bento-check-unescaped-template-extensions-in-flask/)\\n - [https://bento.dev/checks/flask/unescaped-file-extension/](https://bento.dev/checks/flask/unescaped-file-extension/)\\n\",\"text\":\"Flask does not automatically escape Jinja templates unless they have .html, .htm, .xml, or .xhtml extensions. This could lead to XSS attacks. Use .html, .htm, .xml, or .xhtml for your template extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup for more information.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.unescaped-template-extension.unescaped-template-extension\",\"id\":\"python.flask.security.unescaped-template-extension.unescaped-template-extension\",\"name\":\"python.flask.security.unescaped-template-extension.unescaped-template-extension\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.unescaped-template-extension.unescaped-template-extension\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Flask response reflects unsanitized user input. This could lead to a cross-site scripting vulnerability (https://owasp.org/www-community/attacks/xss/) in which an attacker causes arbitrary code to be executed in the user's browser. To prevent, please sanitize the user input, e.g. by rendering the response in a Jinja2 template (see considerations in https://flask.palletsprojects.com/en/1.0.x/security/).\"},\"help\":{\"markdown\":\"Flask response reflects unsanitized user input. This could lead to a cross-site scripting vulnerability (https://owasp.org/www-community/attacks/xss/) in which an attacker causes arbitrary code to be executed in the user's browser. To prevent, please sanitize the user input, e.g. by rendering the response in a Jinja2 template (see considerations in https://flask.palletsprojects.com/en/1.0.x/security/).\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.unsanitized-input.response-contains-unsanitized-input)\\n - [https://flask.palletsprojects.com/en/1.0.x/security/](https://flask.palletsprojects.com/en/1.0.x/security/)\\n - [https://owasp.org/www-community/attacks/xss/](https://owasp.org/www-community/attacks/xss/)\\n\",\"text\":\"Flask response reflects unsanitized user input. This could lead to a cross-site scripting vulnerability (https://owasp.org/www-community/attacks/xss/) in which an attacker causes arbitrary code to be executed in the user's browser. To prevent, please sanitize the user input, e.g. by rendering the response in a Jinja2 template (see considerations in https://flask.palletsprojects.com/en/1.0.x/security/).\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.unsanitized-input.response-contains-unsanitized-input\",\"id\":\"python.flask.security.unsanitized-input.response-contains-unsanitized-input\",\"name\":\"python.flask.security.unsanitized-input.response-contains-unsanitized-input\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.unsanitized-input.response-contains-unsanitized-input\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected a segment of a Flask template where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability, or turn autoescape on.\"},\"help\":{\"markdown\":\"Detected a segment of a Flask template where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability, or turn autoescape on.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off)\\n - [https://flask.palletsprojects.com/en/1.1.x/templating/#controlling-autoescaping](https://flask.palletsprojects.com/en/1.1.x/templating/#controlling-autoescaping)\\n - [https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup](https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup)\\n\",\"text\":\"Detected a segment of a Flask template where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability, or turn autoescape on.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off\",\"id\":\"python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off\",\"name\":\"python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.\"},\"help\":{\"markdown\":\"Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe)\\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss)\\n\",\"text\":\"Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe\",\"id\":\"python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe\",\"name\":\"python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"The Connection.recv() method automatically unpickles the data it receives, which can be a security risk unless you can trust the process which sent the message. Therefore, unless the connection object was produced using Pipe() you should only use the recv() and send() methods after performing some sort of authentication. See more dettails: https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection\"},\"help\":{\"markdown\":\"The Connection.recv() method automatically unpickles the data it receives, which can be a security risk unless you can trust the process which sent the message. Therefore, unless the connection object was produced using Pipe() you should only use the recv() and send() methods after performing some sort of authentication. See more dettails: https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.conn_recv.multiprocessing-recv)\\n - [https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection](https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection)\\n\",\"text\":\"The Connection.recv() method automatically unpickles the data it receives, which can be a security risk unless you can trust the process which sent the message. Therefore, unless the connection object was produced using Pipe() you should only use the recv() and send() methods after performing some sort of authentication. See more dettails: https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.audit.conn_recv.multiprocessing-recv\",\"id\":\"python.lang.security.audit.conn_recv.multiprocessing-recv\",\"name\":\"python.lang.security.audit.conn_recv.multiprocessing-recv\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-502: Deserialization of Untrusted Data\",\"LOW CONFIDENCE\",\"OWASP-A08:2017 - Insecure Deserialization\",\"OWASP-A08:2021 - Software and Data Integrity Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.audit.conn_recv.multiprocessing-recv\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\"},\"help\":{\"markdown\":\"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected)\\n - [https://cwe.mitre.org/data/definitions/939.html](https://cwe.mitre.org/data/definitions/939.html)\\n\",\"text\":\"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected\",\"id\":\"python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected\",\"name\":\"python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-939: Improper Authorization in Handler for Custom URL Scheme\",\"LOW CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\"},\"help\":{\"markdown\":\"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected\",\"id\":\"python.lang.security.audit.eval-detected.eval-detected\",\"name\":\"python.lang.security.audit.eval-detected.eval-detected\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.audit.eval-detected.eval-detected\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\"},\"help\":{\"markdown\":\"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected\",\"id\":\"python.lang.security.audit.exec-detected.exec-detected\",\"name\":\"python.lang.security.audit.exec-detected.exec-detected\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.audit.exec-detected.exec-detected\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous if a real password is not supplied.\"},\"help\":{\"markdown\":\"Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous if a real password is not supplied.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous if a real password is not supplied.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument\",\"id\":\"python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument\",\"name\":\"python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"LOW CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.\"},\"help\":{\"markdown\":\"The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.httpsconnection-detected.httpsconnection-detected)\\n - [https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection](https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection)\\n\",\"text\":\"The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.audit.httpsconnection-detected.httpsconnection-detected\",\"id\":\"python.lang.security.audit.httpsconnection-detected.httpsconnection-detected\",\"name\":\"python.lang.security.audit.httpsconnection-detected.httpsconnection-detected\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-295: Improper Certificate Validation\",\"LOW CONFIDENCE\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.audit.httpsconnection-detected.httpsconnection-detected\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Because portions of the logging configuration are passed through eval(), use of this function may open its users to a security risk. While the function only binds to a socket on localhost, and so does not accept connections from remote machines, there are scenarios where untrusted code could be run under the account of the process which calls listen(). To avoid this happening, use the `verify()` argument to `listen()` to prevent unrecognized configurations.\"},\"help\":{\"markdown\":\"Because portions of the logging configuration are passed through eval(), use of this function may open its users to a security risk. While the function only binds to a socket on localhost, and so does not accept connections from remote machines, there are scenarios where untrusted code could be run under the account of the process which calls listen(). To avoid this happening, use the `verify()` argument to `listen()` to prevent unrecognized configurations.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.logging.listeneval.listen-eval)\\n - [https://docs.python.org/3/library/logging.config.html?highlight=security#logging.config.listen](https://docs.python.org/3/library/logging.config.html?highlight=security#logging.config.listen)\\n\",\"text\":\"Because portions of the logging configuration are passed through eval(), use of this function may open its users to a security risk. While the function only binds to a socket on localhost, and so does not accept connections from remote machines, there are scenarios where untrusted code could be run under the account of the process which calls listen(). To avoid this happening, use the `verify()` argument to `listen()` to prevent unrecognized configurations.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.audit.logging.listeneval.listen-eval\",\"id\":\"python.lang.security.audit.logging.listeneval.listen-eval\",\"name\":\"python.lang.security.audit.logging.listeneval.listen-eval\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.audit.logging.listeneval.listen-eval\"}},{\"defaultConfiguration\":{\"level\":\"note\"},\"fullDescription\":{\"text\":\"Mako templates do not provide a global HTML escaping mechanism. This means you must escape all sensitive data in your templates using '| u' for URL escaping or '| h' for HTML escaping. If you are using Mako to serve web content, consider using a system such as Jinja2 which enables global escaping.\"},\"help\":{\"markdown\":\"Mako templates do not provide a global HTML escaping mechanism. This means you must escape all sensitive data in your templates using '| u' for URL escaping or '| h' for HTML escaping. If you are using Mako to serve web content, consider using a system such as Jinja2 which enables global escaping.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.mako-templates-detected.mako-templates-detected)\\n - [https://docs.makotemplates.org/en/latest/syntax.html#expression-escaping](https://docs.makotemplates.org/en/latest/syntax.html#expression-escaping)\\n - [https://jinja.palletsprojects.com/en/2.11.x/intro/#](https://jinja.palletsprojects.com/en/2.11.x/intro/#)\\n\",\"text\":\"Mako templates do not provide a global HTML escaping mechanism. This means you must escape all sensitive data in your templates using '| u' for URL escaping or '| h' for HTML escaping. If you are using Mako to serve web content, consider using a system such as Jinja2 which enables global escaping.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.audit.mako-templates-detected.mako-templates-detected\",\"id\":\"python.lang.security.audit.mako-templates-detected.mako-templates-detected\",\"name\":\"python.lang.security.audit.mako-templates-detected.mako-templates-detected\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.audit.mako-templates-detected.mako-templates-detected\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security\"},\"help\":{\"markdown\":\"The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.marshal.marshal-usage)\\n - [https://docs.python.org/3/library/marshal.html?highlight=security](https://docs.python.org/3/library/marshal.html?highlight=security)\\n\",\"text\":\"The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.audit.marshal.marshal-usage\",\"id\":\"python.lang.security.audit.marshal.marshal-usage\",\"name\":\"python.lang.security.audit.marshal.marshal-usage\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-502: Deserialization of Untrusted Data\",\"LOW CONFIDENCE\",\"OWASP-A08:2017 - Insecure Deserialization\",\"OWASP-A08:2021 - Software and Data Integrity Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.audit.marshal.marshal-usage\"}},{\"defaultConfiguration\":{\"level\":\"note\"},\"fullDescription\":{\"text\":\"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.\"},\"help\":{\"markdown\":\"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces)\\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\\n\",\"text\":\"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces\",\"id\":\"python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces\",\"name\":\"python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\",\"HIGH CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications.\"},\"help\":{\"markdown\":\"Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection)\\n - [https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool](https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool)\\n\",\"text\":\"Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection\",\"id\":\"python.lang.security.audit.network.http-not-https-connection.http-not-https-connection\",\"name\":\"python.lang.security.audit.network.http-not-https-connection.http-not-https-connection\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-319: Cleartext Transmission of Sensitive Information\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.audit.network.http-not-https-connection.http-not-https-connection\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected a paramiko host key policy that implicitly trusts a server's host key. Host keys should be verified to ensure the connection is not to a malicious server. Use RejectPolicy or a custom subclass instead.\"},\"help\":{\"markdown\":\"Detected a paramiko host key policy that implicitly trusts a server's host key. Host keys should be verified to ensure the connection is not to a malicious server. Use RejectPolicy or a custom subclass instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key)\\n - [http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.AutoAddPolicy](http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.AutoAddPolicy)\\n\",\"text\":\"Detected a paramiko host key policy that implicitly trusts a server's host key. Host keys should be verified to ensure the connection is not to a malicious server. Use RejectPolicy or a custom subclass instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key\",\"id\":\"python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key\",\"name\":\"python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-322: Key Exchange without Entity Authentication\",\"LOW CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context()' instead.\"},\"help\":{\"markdown\":\"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context()' instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command)\\n - [http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.SSHClient.exec_command](http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.SSHClient.exec_command)\\n - [https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/plugins/injection_paramiko.py](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/plugins/injection_paramiko.py)\\n\",\"text\":\"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context()' instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command\",\"id\":\"python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command\",\"name\":\"python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\",\"LOW CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket.\"},\"help\":{\"markdown\":\"'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated)\\n - [https://docs.python.org/3/library/ssl.html#ssl.wrap_socket](https://docs.python.org/3/library/ssl.html#ssl.wrap_socket)\\n - [https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket)\\n\",\"text\":\"'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated\",\"id\":\"python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated\",\"name\":\"python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-326: Inadequate Encryption Strength\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.\"},\"help\":{\"markdown\":\"Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true)\\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\\n\",\"text\":\"Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true\",\"id\":\"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true\",\"name\":\"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\",\"MEDIUM CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.audit.subprocess-shell-true.subprocess-shell-true\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected use of the wildcard character in a system call that spawns a shell. This subjects the wildcard to normal shell expansion, which can have unintended consequences if there exist any non-standard file names. Consider a file named '-e sh script.sh' -- this will execute a script when 'rsync' is called. See https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt for more information.\"},\"help\":{\"markdown\":\"Detected use of the wildcard character in a system call that spawns a shell. This subjects the wildcard to normal shell expansion, which can have unintended consequences if there exist any non-standard file names. Consider a file named '-e sh script.sh' -- this will execute a script when 'rsync' is called. See https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt for more information.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.system-wildcard-detected.system-wildcard-detected)\\n - [https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt](https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt)\\n\",\"text\":\"Detected use of the wildcard character in a system call that spawns a shell. This subjects the wildcard to normal shell expansion, which can have unintended consequences if there exist any non-standard file names. Consider a file named '-e sh script.sh' -- this will execute a script when 'rsync' is called. See https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt for more information.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.audit.system-wildcard-detected.system-wildcard-detected\",\"id\":\"python.lang.security.audit.system-wildcard-detected.system-wildcard-detected\",\"name\":\"python.lang.security.audit.system-wildcard-detected.system-wildcard-detected\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-155: Improper Neutralization of Wildcards or Matching Symbols\",\"LOW CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.audit.system-wildcard-detected.system-wildcard-detected\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Telnet does not encrypt communications. Use SSH instead.\"},\"help\":{\"markdown\":\"Telnet does not encrypt communications. Use SSH instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.telnetlib.telnetlib)\\n - [https://docs.python.org/3/library/telnetlib.html](https://docs.python.org/3/library/telnetlib.html)\\n\",\"text\":\"Telnet does not encrypt communications. Use SSH instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.audit.telnetlib.telnetlib\",\"id\":\"python.lang.security.audit.telnetlib.telnetlib\",\"name\":\"python.lang.security.audit.telnetlib.telnetlib\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-319: Cleartext Transmission of Sensitive Information\",\"LOW CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.audit.telnetlib.telnetlib\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.\"},\"help\":{\"markdown\":\"An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.weak-ssl-version.weak-ssl-version)\\n - [https://tools.ietf.org/html/rfc7568](https://tools.ietf.org/html/rfc7568)\\n - [https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html](https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html)\\n - [https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2)\\n\",\"text\":\"An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.audit.weak-ssl-version.weak-ssl-version\",\"id\":\"python.lang.security.audit.weak-ssl-version.weak-ssl-version\",\"name\":\"python.lang.security.audit.weak-ssl-version.weak-ssl-version\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-326: Inadequate Encryption Strength\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML. An attacker with control over the YAML input could create special YAML input that allows the attacker to run arbitrary Python code. This would allow the attacker to steal files, download and install malware, or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead.\"},\"help\":{\"markdown\":\"Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML. An attacker with control over the YAML input could create special YAML input that allows the attacker to run arbitrary Python code. This would allow the attacker to steal files, download and install malware, or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load)\\n - [https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation](https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation)\\n - [https://nvd.nist.gov/vuln/detail/CVE-2017-18342](https://nvd.nist.gov/vuln/detail/CVE-2017-18342)\\n\",\"text\":\"Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML. An attacker with control over the YAML input could create special YAML input that allows the attacker to run arbitrary Python code. This would allow the attacker to steal files, download and install malware, or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load\",\"id\":\"python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load\",\"name\":\"python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-502: Deserialization of Untrusted Data\",\"MEDIUM CONFIDENCE\",\"OWASP-A08:2017 - Insecure Deserialization\",\"OWASP-A08:2021 - Software and Data Integrity Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\"},\"help\":{\"markdown\":\"Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-cPickle)\\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\\n\",\"text\":\"Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-cPickle\",\"id\":\"python.lang.security.deserialization.pickle.avoid-cPickle\",\"name\":\"python.lang.security.deserialization.pickle.avoid-cPickle\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-502: Deserialization of Untrusted Data\",\"LOW CONFIDENCE\",\"OWASP-A08:2017 - Insecure Deserialization\",\"OWASP-A08:2021 - Software and Data Integrity Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.deserialization.pickle.avoid-cPickle\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\"},\"help\":{\"markdown\":\"Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-dill)\\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\\n\",\"text\":\"Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-dill\",\"id\":\"python.lang.security.deserialization.pickle.avoid-dill\",\"name\":\"python.lang.security.deserialization.pickle.avoid-dill\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-502: Deserialization of Untrusted Data\",\"LOW CONFIDENCE\",\"OWASP-A08:2017 - Insecure Deserialization\",\"OWASP-A08:2021 - Software and Data Integrity Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.deserialization.pickle.avoid-dill\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\"},\"help\":{\"markdown\":\"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\\n\",\"text\":\"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle\",\"id\":\"python.lang.security.deserialization.pickle.avoid-pickle\",\"name\":\"python.lang.security.deserialization.pickle.avoid-pickle\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-502: Deserialization of Untrusted Data\",\"LOW CONFIDENCE\",\"OWASP-A08:2017 - Insecure Deserialization\",\"OWASP-A08:2021 - Software and Data Integrity Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.deserialization.pickle.avoid-pickle\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\"},\"help\":{\"markdown\":\"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve)\\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\\n\",\"text\":\"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve\",\"id\":\"python.lang.security.deserialization.pickle.avoid-shelve\",\"name\":\"python.lang.security.deserialization.pickle.avoid-shelve\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-502: Deserialization of Untrusted Data\",\"MEDIUM CONFIDENCE\",\"OWASP-A08:2017 - Insecure Deserialization\",\"OWASP-A08:2021 - Software and Data Integrity Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.deserialization.pickle.avoid-shelve\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\"},\"help\":{\"markdown\":\"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1)\\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\\n\",\"text\":\"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1\",\"id\":\"python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1\",\"name\":\"python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead.\"},\"help\":{\"markdown\":\"Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.insecure-hash-function.insecure-hash-function)\\n - [https://tools.ietf.org/html/rfc6151](https://tools.ietf.org/html/rfc6151)\\n - [https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision](https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision)\\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\\n\",\"text\":\"Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.insecure-hash-function.insecure-hash-function\",\"id\":\"python.lang.security.insecure-hash-function.insecure-hash-function\",\"name\":\"python.lang.security.insecure-hash-function.insecure-hash-function\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.insecure-hash-function.insecure-hash-function\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead.\"},\"help\":{\"markdown\":\"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.unverified-ssl-context.unverified-ssl-context)\\n - [https://docs.python.org/3/library/ssl.html#ssl-security](https://docs.python.org/3/library/ssl.html#ssl-security)\\n - [https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection](https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection)\\n\",\"text\":\"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.unverified-ssl-context.unverified-ssl-context\",\"id\":\"python.lang.security.unverified-ssl-context.unverified-ssl-context\",\"name\":\"python.lang.security.unverified-ssl-context.unverified-ssl-context\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-295: Improper Certificate Validation\",\"MEDIUM CONFIDENCE\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.unverified-ssl-context.unverified-ssl-context\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \\\"XML bombs\\\" can cause denial of service.\"},\"help\":{\"markdown\":\"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \\\"XML bombs\\\" can cause denial of service.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.use-defused-xml.use-defused-xml)\\n - [https://docs.python.org/3/library/xml.html](https://docs.python.org/3/library/xml.html)\\n - [https://github.com/tiran/defusedxml](https://github.com/tiran/defusedxml)\\n - [https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing](https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing)\\n\",\"text\":\"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \\\"XML bombs\\\" can cause denial of service.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.use-defused-xml.use-defused-xml\",\"id\":\"python.lang.security.use-defused-xml.use-defused-xml\",\"name\":\"python.lang.security.use-defused-xml.use-defused-xml\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-611: Improper Restriction of XML External Entity Reference\",\"LOW CONFIDENCE\",\"OWASP-A04:2017 - XML External Entities (XXE)\",\"OWASP-A05:2021 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.use-defused-xml.use-defused-xml\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead.\"},\"help\":{\"markdown\":\"Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc)\\n - [https://pypi.org/project/defusedxml/](https://pypi.org/project/defusedxml/)\\n - [https://docs.python.org/3/library/xml.html#xml-vulnerabilities](https://docs.python.org/3/library/xml.html#xml-vulnerabilities)\\n\",\"text\":\"Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc\",\"id\":\"python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc\",\"name\":\"python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')\",\"LOW CONFIDENCE\",\"OWASP-A04:2017 - XML External Entities (XXE)\",\"OWASP-A05:2021 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.\"},\"help\":{\"markdown\":\"Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor)\\n - [https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption](https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption)\\n\",\"text\":\"Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor\",\"id\":\"python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor\",\"name\":\"python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\"},\"help\":{\"markdown\":\"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1)\\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\\n\",\"text\":\"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1\",\"id\":\"python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1\",\"name\":\"python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.\"},\"help\":{\"markdown\":\"Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.requests.security.disabled-cert-validation.disabled-cert-validation)\\n - [https://stackoverflow.com/questions/41740361/is-it-safe-to-disable-ssl-certificate-verification-in-pythonss-requests-lib](https://stackoverflow.com/questions/41740361/is-it-safe-to-disable-ssl-certificate-verification-in-pythonss-requests-lib)\\n\",\"text\":\"Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.requests.security.disabled-cert-validation.disabled-cert-validation\",\"id\":\"python.requests.security.disabled-cert-validation.disabled-cert-validation\",\"name\":\"python.requests.security.disabled-cert-validation.disabled-cert-validation\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-295: Improper Certificate Validation\",\"LOW CONFIDENCE\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.requests.security.disabled-cert-validation.disabled-cert-validation\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.\"},\"help\":{\"markdown\":\"Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.requests.security.no-auth-over-http.no-auth-over-http)\\n - [https://semgrep.dev/blog/2020/bento-check-no-auth-over-http/](https://semgrep.dev/blog/2020/bento-check-no-auth-over-http/)\\n - [https://bento.dev/checks/requests/no-auth-over-http/](https://bento.dev/checks/requests/no-auth-over-http/)\\n\",\"text\":\"Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.requests.security.no-auth-over-http.no-auth-over-http\",\"id\":\"python.requests.security.no-auth-over-http.no-auth-over-http\",\"name\":\"python.requests.security.no-auth-over-http.no-auth-over-http\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-523: Unprotected Transport of Credentials\",\"LOW CONFIDENCE\",\"OWASP-A02:2017 - Broken Authentication\",\"OWASP-A02:2021 - Cryptographic Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.requests.security.no-auth-over-http.no-auth-over-http\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \\\"bindparams\\\". Use bindParams to securely bind user-input to SQL statements.\"},\"help\":{\"markdown\":\"Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \\\"bindparams\\\". Use bindParams to securely bind user-input to SQL statements.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \\\"bindparams\\\". Use bindParams to securely bind user-input to SQL statements.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection\",\"id\":\"python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection\",\"name\":\"python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\",\"MEDIUM CONFIDENCE\",\"OWASP-A01:2017 - Injection\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead.\"},\"help\":{\"markdown\":\"Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.bad-deserialization.bad-deserialization)\\n - [https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ](https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ)\\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb)\\n\",\"text\":\"Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/ruby.lang.security.bad-deserialization.bad-deserialization\",\"id\":\"ruby.lang.security.bad-deserialization.bad-deserialization\",\"name\":\"ruby.lang.security.bad-deserialization.bad-deserialization\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-502: Deserialization of Untrusted Data\",\"MEDIUM CONFIDENCE\",\"OWASP-A08:2017 - Insecure Deserialization\",\"OWASP-A08:2021 - Software and Data Integrity Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: ruby.lang.security.bad-deserialization.bad-deserialization\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Checks if code allows cookies to be deserialized using Marshal. If the attacker can craft a valid cookie, this could lead to remote code execution. The hybrid check is just to warn users to migrate to :json for best practice.\"},\"help\":{\"markdown\":\"Checks if code allows cookies to be deserialized using Marshal. If the attacker can craft a valid cookie, this could lead to remote code execution. The hybrid check is just to warn users to migrate to :json for best practice.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.cookie-serialization.cookie-serialization)\\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_cookie_serialization.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_cookie_serialization.rb)\\n - [https://robertheaton.com/2013/07/22/how-to-hack-a-rails-app-using-its-secret-token/](https://robertheaton.com/2013/07/22/how-to-hack-a-rails-app-using-its-secret-token/)\\n\",\"text\":\"Checks if code allows cookies to be deserialized using Marshal. If the attacker can craft a valid cookie, this could lead to remote code execution. The hybrid check is just to warn users to migrate to :json for best practice.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/ruby.lang.security.cookie-serialization.cookie-serialization\",\"id\":\"ruby.lang.security.cookie-serialization.cookie-serialization\",\"name\":\"ruby.lang.security.cookie-serialization.cookie-serialization\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: ruby.lang.security.cookie-serialization.cookie-serialization\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Checks for strong parameter bypass through usage of create_with. Create_with bypasses strong parameter protection, which could allow attackers to set arbitrary attributes on models. To fix this vulnerability, either remove all create_with calls or use the permit function to specify tags that are allowed to be set.\"},\"help\":{\"markdown\":\"Checks for strong parameter bypass through usage of create_with. Create_with bypasses strong parameter protection, which could allow attackers to set arbitrary attributes on models. To fix this vulnerability, either remove all create_with calls or use the permit function to specify tags that are allowed to be set.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.create-with.create-with)\\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_create_with.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_create_with.rb)\\n - [https://groups.google.com/g/rubyonrails-security/c/M4chq5Sb540/m/CC1Fh0Y_NWwJ](https://groups.google.com/g/rubyonrails-security/c/M4chq5Sb540/m/CC1Fh0Y_NWwJ)\\n\",\"text\":\"Checks for strong parameter bypass through usage of create_with. Create_with bypasses strong parameter protection, which could allow attackers to set arbitrary attributes on models. To fix this vulnerability, either remove all create_with calls or use the permit function to specify tags that are allowed to be set.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/ruby.lang.security.create-with.create-with\",\"id\":\"ruby.lang.security.create-with.create-with\",\"name\":\"ruby.lang.security.create-with.create-with\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes\",\"LOW CONFIDENCE\",\"OWASP-A08:2021 - Software and Data Integrity Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: ruby.lang.security.create-with.create-with\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected a possible ZeroDivisionError.\"},\"help\":{\"markdown\":\"Detected a possible ZeroDivisionError.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.divide-by-zero.divide-by-zero)\\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_divide_by_zero.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_divide_by_zero.rb)\\n\",\"text\":\"Detected a possible ZeroDivisionError.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/ruby.lang.security.divide-by-zero.divide-by-zero\",\"id\":\"ruby.lang.security.divide-by-zero.divide-by-zero\",\"name\":\"ruby.lang.security.divide-by-zero.divide-by-zero\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-369: Divide By Zero\",\"MEDIUM CONFIDENCE\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: ruby.lang.security.divide-by-zero.divide-by-zero\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Special requests can determine whether a file exists on a filesystem that's outside the Rails app's root directory. To fix this, set config.serve_static_assets = false.\"},\"help\":{\"markdown\":\"Special requests can determine whether a file exists on a filesystem that's outside the Rails app's root directory. To fix this, set config.serve_static_assets = false.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.file-disclosure.file-disclosure)\\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_file_disclosure.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_file_disclosure.rb)\\n - [https://groups.google.com/g/rubyonrails-security/c/23fiuwb1NBA/m/MQVM1-5GkPMJ](https://groups.google.com/g/rubyonrails-security/c/23fiuwb1NBA/m/MQVM1-5GkPMJ)\\n\",\"text\":\"Special requests can determine whether a file exists on a filesystem that's outside the Rails app's root directory. To fix this, set config.serve_static_assets = false.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/ruby.lang.security.file-disclosure.file-disclosure\",\"id\":\"ruby.lang.security.file-disclosure.file-disclosure\",\"name\":\"ruby.lang.security.file-disclosure.file-disclosure\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\",\"LOW CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"OWASP-A05:2017 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: ruby.lang.security.file-disclosure.file-disclosure\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Checks for use of action in Ruby routes. This can cause Rails to render an arbitrary view if an attacker creates an URL accurately. Affects 3.0 applications. Can avoid the vulnerability by providing additional constraints.\"},\"help\":{\"markdown\":\"Checks for use of action in Ruby routes. This can cause Rails to render an arbitrary view if an attacker creates an URL accurately. Affects 3.0 applications. Can avoid the vulnerability by providing additional constraints.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.filter-skipping.filter-skipping)\\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_filter_skipping.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_filter_skipping.rb)\\n - [https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY](https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY)\\n\",\"text\":\"Checks for use of action in Ruby routes. This can cause Rails to render an arbitrary view if an attacker creates an URL accurately. Affects 3.0 applications. Can avoid the vulnerability by providing additional constraints.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/ruby.lang.security.filter-skipping.filter-skipping\",\"id\":\"ruby.lang.security.filter-skipping.filter-skipping\",\"name\":\"ruby.lang.security.filter-skipping.filter-skipping\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-1021: Improper Restriction of Rendered UI Layers or Frames\",\"LOW CONFIDENCE\",\"OWASP-A04:2021 - Insecure Design\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: ruby.lang.security.filter-skipping.filter-skipping\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Checks for configuration setting of force_ssl to false. Force_ssl forces usage of HTTPS, which could lead to network interception of unencrypted application traffic. To fix, set config.force_ssl = true.\"},\"help\":{\"markdown\":\"Checks for configuration setting of force_ssl to false. Force_ssl forces usage of HTTPS, which could lead to network interception of unencrypted application traffic. To fix, set config.force_ssl = true.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.force-ssl-false.force-ssl-false)\\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_force_ssl.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_force_ssl.rb)\\n\",\"text\":\"Checks for configuration setting of force_ssl to false. Force_ssl forces usage of HTTPS, which could lead to network interception of unencrypted application traffic. To fix, set config.force_ssl = true.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/ruby.lang.security.force-ssl-false.force-ssl-false\",\"id\":\"ruby.lang.security.force-ssl-false.force-ssl-false\",\"name\":\"ruby.lang.security.force-ssl-false.force-ssl-false\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-311: Missing Encryption of Sensitive Data\",\"HIGH CONFIDENCE\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"OWASP-A04:2021 - Insecure Design\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: ruby.lang.security.force-ssl-false.force-ssl-false\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected hardcoded password used in basic authentication in a controller class. Including this password in version control could expose this credential. Consider refactoring to use environment variables or configuration files.\"},\"help\":{\"markdown\":\"Detected hardcoded password used in basic authentication in a controller class. Including this password in version control could expose this credential. Consider refactoring to use environment variables or configuration files.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\\n\",\"text\":\"Detected hardcoded password used in basic authentication in a controller class. Including this password in version control could expose this credential. Consider refactoring to use environment variables or configuration files.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller\",\"id\":\"ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller\",\"name\":\"ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"HIGH CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Found the use of an hardcoded passphrase for RSA. The passphrase can be easily discovered, and therefore should not be stored in source-code. It is recommended to remove the passphrase from source-code, and use system environment variables or a restricted configuration file.\"},\"help\":{\"markdown\":\"Found the use of an hardcoded passphrase for RSA. The passphrase can be easily discovered, and therefore should not be stored in source-code. It is recommended to remove the passphrase from source-code, and use system environment variables or a restricted configuration file.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.hardcoded-secret-rsa-passphrase.hardcoded-secret-rsa-passphrase)\\n - [https://cwe.mitre.org/data/definitions/522.html](https://cwe.mitre.org/data/definitions/522.html)\\n\",\"text\":\"Found the use of an hardcoded passphrase for RSA. The passphrase can be easily discovered, and therefore should not be stored in source-code. It is recommended to remove the passphrase from source-code, and use system environment variables or a restricted configuration file.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/ruby.lang.security.hardcoded-secret-rsa-passphrase.hardcoded-secret-rsa-passphrase\",\"id\":\"ruby.lang.security.hardcoded-secret-rsa-passphrase.hardcoded-secret-rsa-passphrase\",\"name\":\"ruby.lang.security.hardcoded-secret-rsa-passphrase.hardcoded-secret-rsa-passphrase\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"HIGH CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: ruby.lang.security.hardcoded-secret-rsa-passphrase.hardcoded-secret-rsa-passphrase\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Mass assignment protection disabled for '$MODEL'. This could permit assignment to sensitive model fields without intention. Instead, use 'attr_accessible' for the model or disable mass assigment using 'config.active_record.whitelist_attributes = true'. ':without_protection => true' must be removed for this to take effect.\"},\"help\":{\"markdown\":\"Mass assignment protection disabled for '$MODEL'. This could permit assignment to sensitive model fields without intention. Instead, use 'attr_accessible' for the model or disable mass assigment using 'config.active_record.whitelist_attributes = true'. ':without_protection => true' must be removed for this to take effect.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.mass-assignment-protection-disabled.mass-assignment-protection-disabled)\\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\\n\",\"text\":\"Mass assignment protection disabled for '$MODEL'. This could permit assignment to sensitive model fields without intention. Instead, use 'attr_accessible' for the model or disable mass assigment using 'config.active_record.whitelist_attributes = true'. ':without_protection => true' must be removed for this to take effect.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/ruby.lang.security.mass-assignment-protection-disabled.mass-assignment-protection-disabled\",\"id\":\"ruby.lang.security.mass-assignment-protection-disabled.mass-assignment-protection-disabled\",\"name\":\"ruby.lang.security.mass-assignment-protection-disabled.mass-assignment-protection-disabled\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes\",\"LOW CONFIDENCE\",\"OWASP-A08:2021 - Software and Data Integrity Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: ruby.lang.security.mass-assignment-protection-disabled.mass-assignment-protection-disabled\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Detected controller which does not enable cross-site request forgery protections using 'protect_from_forgery'. Add 'protect_from_forgery :with => :exception' to your controller class.\"},\"help\":{\"markdown\":\"Detected controller which does not enable cross-site request forgery protections using 'protect_from_forgery'. Add 'protect_from_forgery :with => :exception' to your controller class.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.missing-csrf-protection.missing-csrf-protection)\\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\\n\",\"text\":\"Detected controller which does not enable cross-site request forgery protections using 'protect_from_forgery'. Add 'protect_from_forgery :with => :exception' to your controller class.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/ruby.lang.security.missing-csrf-protection.missing-csrf-protection\",\"id\":\"ruby.lang.security.missing-csrf-protection.missing-csrf-protection\",\"name\":\"ruby.lang.security.missing-csrf-protection.missing-csrf-protection\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-352: Cross-Site Request Forgery (CSRF)\",\"LOW CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: ruby.lang.security.missing-csrf-protection.missing-csrf-protection\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Use of eval with user-controllable input detected. This can lead  to attackers running arbitrary code. Ensure external data does not  reach here, otherwise this is a security vulnerability. Consider  other ways to do this without eval.\"},\"help\":{\"markdown\":\"Use of eval with user-controllable input detected. This can lead  to attackers running arbitrary code. Ensure external data does not  reach here, otherwise this is a security vulnerability. Consider  other ways to do this without eval.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.no-eval.ruby-eval)\\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\\n\",\"text\":\"Use of eval with user-controllable input detected. This can lead  to attackers running arbitrary code. Ensure external data does not  reach here, otherwise this is a security vulnerability. Consider  other ways to do this without eval.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/ruby.lang.security.no-eval.ruby-eval\",\"id\":\"ruby.lang.security.no-eval.ruby-eval\",\"name\":\"ruby.lang.security.no-eval.ruby-eval\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\",\"MEDIUM CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: ruby.lang.security.no-eval.ruby-eval\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Checks for unsafe use of Object#send, try, __send__, and public_send. These only account for unsafe use of a method, not target. This can lead to arbitrary calling of exit, along with arbitrary code execution. Please be sure to sanitize input in order to avoid this.\"},\"help\":{\"markdown\":\"Checks for unsafe use of Object#send, try, __send__, and public_send. These only account for unsafe use of a method, not target. This can lead to arbitrary calling of exit, along with arbitrary code execution. Please be sure to sanitize input in order to avoid this.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.no-send.bad-send)\\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_send.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_send.rb)\\n - [https://the.igreque.info/posts/2016/01-object-send-considered-harmful-en.html](https://the.igreque.info/posts/2016/01-object-send-considered-harmful-en.html)\\n\",\"text\":\"Checks for unsafe use of Object#send, try, __send__, and public_send. These only account for unsafe use of a method, not target. This can lead to arbitrary calling of exit, along with arbitrary code execution. Please be sure to sanitize input in order to avoid this.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/ruby.lang.security.no-send.bad-send\",\"id\":\"ruby.lang.security.no-send.bad-send\",\"name\":\"ruby.lang.security.no-send.bad-send\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-94: Improper Control of Generation of Code ('Code Injection')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: ruby.lang.security.no-send.bad-send\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detected SSL that will accept an unverified connection. This makes the connections susceptible to man-in-the-middle attacks. Use 'OpenSSL::SSL::VERIFY_PEER' instead.\"},\"help\":{\"markdown\":\"Detected SSL that will accept an unverified connection. This makes the connections susceptible to man-in-the-middle attacks. Use 'OpenSSL::SSL::VERIFY_PEER' instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify)\\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\\n\",\"text\":\"Detected SSL that will accept an unverified connection. This makes the connections susceptible to man-in-the-middle attacks. Use 'OpenSSL::SSL::VERIFY_PEER' instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify\",\"id\":\"ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify\",\"name\":\"ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-295: Improper Certificate Validation\",\"MEDIUM CONFIDENCE\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Checks for calls to without_protection during mass assignment (which allows record creation from hash values). This can lead to users bypassing permissions protections. For Rails 4 and higher, mass protection is on by default. Fix: Don't use :without_protection => true. Instead, configure attr_accessible to control attribute access.\"},\"help\":{\"markdown\":\"Checks for calls to without_protection during mass assignment (which allows record creation from hash values). This can lead to users bypassing permissions protections. For Rails 4 and higher, mass protection is on by default. Fix: Don't use :without_protection => true. Instead, configure attr_accessible to control attribute access.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.unprotected-mass-assign.mass-assignment-vuln)\\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_without_protection.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_without_protection.rb)\\n - [https://www.acunetix.com/vulnerabilities/web/rails-mass-assignment/](https://www.acunetix.com/vulnerabilities/web/rails-mass-assignment/)\\n\",\"text\":\"Checks for calls to without_protection during mass assignment (which allows record creation from hash values). This can lead to users bypassing permissions protections. For Rails 4 and higher, mass protection is on by default. Fix: Don't use :without_protection => true. Instead, configure attr_accessible to control attribute access.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/ruby.lang.security.unprotected-mass-assign.mass-assignment-vuln\",\"id\":\"ruby.lang.security.unprotected-mass-assign.mass-assignment-vuln\",\"name\":\"ruby.lang.security.unprotected-mass-assign.mass-assignment-vuln\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes\",\"LOW CONFIDENCE\",\"OWASP-A08:2021 - Software and Data Integrity Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: ruby.lang.security.unprotected-mass-assign.mass-assignment-vuln\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead.\"},\"help\":{\"markdown\":\"Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.weak-hashes-md5.weak-hashes-md5)\\n - [https://www.ibm.com/support/pages/security-bulletin-vulnerability-md5-signature-and-hash-algorithm-affects-sterling-integrator-and-sterling-file-gateway-cve-2015-7575](https://www.ibm.com/support/pages/security-bulletin-vulnerability-md5-signature-and-hash-algorithm-affects-sterling-integrator-and-sterling-file-gateway-cve-2015-7575)\\n\",\"text\":\"Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/ruby.lang.security.weak-hashes-md5.weak-hashes-md5\",\"id\":\"ruby.lang.security.weak-hashes-md5.weak-hashes-md5\",\"name\":\"ruby.lang.security.weak-hashes-md5.weak-hashes-md5\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-328: Use of Weak Hash\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: ruby.lang.security.weak-hashes-md5.weak-hashes-md5\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead.\"},\"help\":{\"markdown\":\"Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1)\\n - [https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html](https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html)\\n - [https://shattered.io/](https://shattered.io/)\\n\",\"text\":\"Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1\",\"id\":\"ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1\",\"name\":\"ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-328: Use of Weak Hash\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\"},\"help\":{\"markdown\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/terraform.aws.security.aws-lambda-environment-credentials.aws-lambda-environment-credentials)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\\n\",\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/terraform.aws.security.aws-lambda-environment-credentials.aws-lambda-environment-credentials\",\"id\":\"terraform.aws.security.aws-lambda-environment-credentials.aws-lambda-environment-credentials\",\"name\":\"terraform.aws.security.aws-lambda-environment-credentials.aws-lambda-environment-credentials\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-326: Inadequate Encryption Strength\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: terraform.aws.security.aws-lambda-environment-credentials.aws-lambda-environment-credentials\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\"},\"help\":{\"markdown\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials)\\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\\n\",\"text\":\"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials\",\"id\":\"terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials\",\"name\":\"terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"MEDIUM CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"The vpc_config resource inside the eks cluster has not explicitly disabled public endpoint access\"},\"help\":{\"markdown\":\"The vpc_config resource inside the eks cluster has not explicitly disabled public endpoint access\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/terraform.lang.security.eks-public-endpoint-enabled.eks-public-endpoint-enabled)\\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\\n\",\"text\":\"The vpc_config resource inside the eks cluster has not explicitly disabled public endpoint access\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/terraform.lang.security.eks-public-endpoint-enabled.eks-public-endpoint-enabled\",\"id\":\"terraform.lang.security.eks-public-endpoint-enabled.eks-public-endpoint-enabled\",\"name\":\"terraform.lang.security.eks-public-endpoint-enabled.eks-public-endpoint-enabled\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\",\"LOW CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: terraform.lang.security.eks-public-endpoint-enabled.eks-public-endpoint-enabled\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"RDS instance or cluster with hardcoded credentials in source code. It is recommended to pass the credentials at runtime, or generate random credentials using the random_password resource.\"},\"help\":{\"markdown\":\"RDS instance or cluster with hardcoded credentials in source code. It is recommended to pass the credentials at runtime, or generate random credentials using the random_password resource.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/terraform.lang.security.rds-insecure-password-storage-in-source-code.rds-insecure-password-storage-in-source-code)\\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#master_password](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#master_password)\\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster#master_password](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster#master_password)\\n - [https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/password](https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/password)\\n\",\"text\":\"RDS instance or cluster with hardcoded credentials in source code. It is recommended to pass the credentials at runtime, or generate random credentials using the random_password resource.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/terraform.lang.security.rds-insecure-password-storage-in-source-code.rds-insecure-password-storage-in-source-code\",\"id\":\"terraform.lang.security.rds-insecure-password-storage-in-source-code.rds-insecure-password-storage-in-source-code\",\"name\":\"terraform.lang.security.rds-insecure-password-storage-in-source-code.rds-insecure-password-storage-in-source-code\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-522: Insufficiently Protected Credentials\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2017 - Broken Authentication\",\"OWASP-A04:2021 - Insecure Design\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: terraform.lang.security.rds-insecure-password-storage-in-source-code.rds-insecure-password-storage-in-source-code\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"CORS rule on bucket permits any origin\"},\"help\":{\"markdown\":\"CORS rule on bucket permits any origin\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/terraform.lang.security.s3-cors-all-origins.all-origins-allowed)\\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#using-cors](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#using-cors)\\n\",\"text\":\"CORS rule on bucket permits any origin\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/terraform.lang.security.s3-cors-all-origins.all-origins-allowed\",\"id\":\"terraform.lang.security.s3-cors-all-origins.all-origins-allowed\",\"name\":\"terraform.lang.security.s3-cors-all-origins.all-origins-allowed\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-942: Permissive Cross-domain Policy with Untrusted Domains\",\"LOW CONFIDENCE\",\"OWASP-A05:2021 - Security Misconfiguration\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: terraform.lang.security.s3-cors-all-origins.all-origins-allowed\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"S3 bucket with public read-write access detected.\"},\"help\":{\"markdown\":\"S3 bucket with public read-write access detected.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket)\\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#acl](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#acl)\\n - [https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl)\\n\",\"text\":\"S3 bucket with public read-write access detected.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket\",\"id\":\"terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket\",\"name\":\"terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\",\"MEDIUM CONFIDENCE\",\"OWASP-A01:2021 - Broken Access Control\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.\"},\"help\":{\"markdown\":\"Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml)\\n - [https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html](https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html)\\n\",\"text\":\"Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml\",\"id\":\"typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml\",\"name\":\"typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"MEDIUM CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml\"}},{\"defaultConfiguration\":{\"level\":\"error\"},\"fullDescription\":{\"text\":\"Unencrypted request over HTTP detected.\"},\"help\":{\"markdown\":\"Unencrypted request over HTTP detected.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/typescript.react.security.react-insecure-request.react-insecure-request)\\n - [https://www.npmjs.com/package/axios](https://www.npmjs.com/package/axios)\\n\",\"text\":\"Unencrypted request over HTTP detected.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/typescript.react.security.react-insecure-request.react-insecure-request\",\"id\":\"typescript.react.security.react-insecure-request.react-insecure-request\",\"name\":\"typescript.react.security.react-insecure-request.react-insecure-request\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-319: Cleartext Transmission of Sensitive Information\",\"MEDIUM CONFIDENCE\",\"OWASP-A02:2021 - Cryptographic Failures\",\"OWASP-A03:2017 - Sensitive Data Exposure\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: typescript.react.security.react-insecure-request.react-insecure-request\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Overwriting `transformLinkUri` or `transformImageUri` to something insecure, or turning `allowDangerousHtml` on, or turning `escapeHtml` off, will open the code up to XSS vectors.\"},\"help\":{\"markdown\":\"Overwriting `transformLinkUri` or `transformImageUri` to something insecure, or turning `allowDangerousHtml` on, or turning `escapeHtml` off, will open the code up to XSS vectors.\\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html)\\n - [https://www.npmjs.com/package/react-markdown#security](https://www.npmjs.com/package/react-markdown#security)\\n\",\"text\":\"Overwriting `transformLinkUri` or `transformImageUri` to something insecure, or turning `allowDangerousHtml` on, or turning `escapeHtml` off, will open the code up to XSS vectors.\\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html\",\"id\":\"typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html\",\"name\":\"typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\",\"LOW CONFIDENCE\",\"OWASP-A03:2021 - Injection\",\"OWASP-A07:2017 - Cross-Site Scripting (XSS)\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html\"}},{\"defaultConfiguration\":{\"level\":\"warning\"},\"fullDescription\":{\"text\":\"Secrets ($VALUE) should not be stored in infrastructure as code files. Use an alternative such as Bitnami Sealed Secrets or KSOPS to encrypt Kubernetes Secrets. \"},\"help\":{\"markdown\":\"Secrets ($VALUE) should not be stored in infrastructure as code files. Use an alternative such as Bitnami Sealed Secrets or KSOPS to encrypt Kubernetes Secrets. \\n\\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\\n\\n<b>References:</b>\\n - [Semgrep Rule](https://semgrep.dev/r/yaml.kubernetes.security.secrets-in-config-file.secrets-in-config-file)\\n - [https://kubernetes.io/docs/concepts/configuration/secret/](https://kubernetes.io/docs/concepts/configuration/secret/)\\n - [https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/0/CTR_Kubernetes_Hardening_Guidance_1.1_20220315.PDF](https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/0/CTR_Kubernetes_Hardening_Guidance_1.1_20220315.PDF)\\n - [https://docs.gitlab.com/ee/user/clusters/agent/gitops/secrets_management.html](https://docs.gitlab.com/ee/user/clusters/agent/gitops/secrets_management.html)\\n - [https://www.cncf.io/blog/2021/04/22/revealing-the-secrets-of-kubernetes-secrets/](https://www.cncf.io/blog/2021/04/22/revealing-the-secrets-of-kubernetes-secrets/)\\n - [https://github.com/bitnami-labs/sealed-secrets](https://github.com/bitnami-labs/sealed-secrets)\\n - [https://www.cncf.io/blog/2022/01/25/secrets-management-essential-when-using-kubernetes/](https://www.cncf.io/blog/2022/01/25/secrets-management-essential-when-using-kubernetes/)\\n - [https://blog.oddbit.com/post/2021-03-09-getting-started-with-ksops/](https://blog.oddbit.com/post/2021-03-09-getting-started-with-ksops/)\\n\",\"text\":\"Secrets ($VALUE) should not be stored in infrastructure as code files. Use an alternative such as Bitnami Sealed Secrets or KSOPS to encrypt Kubernetes Secrets. \\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro\"},\"helpUri\":\"https://semgrep.dev/r/yaml.kubernetes.security.secrets-in-config-file.secrets-in-config-file\",\"id\":\"yaml.kubernetes.security.secrets-in-config-file.secrets-in-config-file\",\"name\":\"yaml.kubernetes.security.secrets-in-config-file.secrets-in-config-file\",\"properties\":{\"precision\":\"very-high\",\"tags\":[\"CWE-798: Use of Hard-coded Credentials\",\"MEDIUM CONFIDENCE\",\"OWASP-A07:2021 - Identification and Authentication Failures\",\"security\"]},\"shortDescription\":{\"text\":\"Semgrep Finding: yaml.kubernetes.security.secrets-in-config-file.secrets-in-config-file\"}}],\"semanticVersion\":\"1.128.1\"}}}],\"$schema\":\"https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/schemas/sarif-schema-2.1.0.json\"}"},"startColumn":56252,"startLine":1}}}],"message":{"text":"Facebook OAuth detected"},"properties":{},"ruleId":"generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth"}],"tool":{"driver":{"name":"Semgrep OSS","rules":[{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Variable '$VAR' was freed twice. This can lead to undefined behavior."},"help":{"markdown":"Variable '$VAR' was freed twice. This can lead to undefined behavior.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/c.lang.security.double-free.double-free)\n - [https://cwe.mitre.org/data/definitions/415.html](https://cwe.mitre.org/data/definitions/415.html)\n - [https://owasp.org/www-community/vulnerabilities/Doubly_freeing_memory](https://owasp.org/www-community/vulnerabilities/Doubly_freeing_memory)\n","text":"Variable '$VAR' was freed twice. This can lead to undefined behavior.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/c.lang.security.double-free.double-free","id":"c.lang.security.double-free.double-free","name":"c.lang.security.double-free.double-free","properties":{"precision":"very-high","tags":["CWE-415: Double Free","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: c.lang.security.double-free.double-free"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead."},"help":{"markdown":"Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn)\n - [https://us-cert.cisa.gov/bsi/articles/knowledge/coding-practices/fgets-and-gets_s](https://us-cert.cisa.gov/bsi/articles/knowledge/coding-practices/fgets-and-gets_s)\n","text":"Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn","id":"c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn","name":"c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn","properties":{"precision":"very-high","tags":["CWE-676: Use of Potentially Dangerous Function","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Semgrep Finding: c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."},"help":{"markdown":"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/c.lang.security.insecure-use-printf-fn.insecure-use-printf-fn)\n - [https://doc.castsoftware.com/display/SBX/Never+use+sprintf%28%29+or+vsprintf%28%29+functions](https://doc.castsoftware.com/display/SBX/Never+use+sprintf%28%29+or+vsprintf%28%29+functions)\n - [https://www.cvedetails.com/cwe-details/134/Uncontrolled-Format-String.html](https://www.cvedetails.com/cwe-details/134/Uncontrolled-Format-String.html)\n","text":"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/c.lang.security.insecure-use-printf-fn.insecure-use-printf-fn","id":"c.lang.security.insecure-use-printf-fn.insecure-use-printf-fn","name":"c.lang.security.insecure-use-printf-fn.insecure-use-printf-fn","properties":{"precision":"very-high","tags":["CWE-134: Use of Externally-Controlled Format String","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Semgrep Finding: c.lang.security.insecure-use-printf-fn.insecure-use-printf-fn"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."},"help":{"markdown":"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/c.lang.security.insecure-use-scanf-fn.insecure-use-scanf-fn)\n - [http://sekrit.de/webdocs/c/beginners-guide-away-from-scanf.html](http://sekrit.de/webdocs/c/beginners-guide-away-from-scanf.html)\n","text":"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/c.lang.security.insecure-use-scanf-fn.insecure-use-scanf-fn","id":"c.lang.security.insecure-use-scanf-fn.insecure-use-scanf-fn","name":"c.lang.security.insecure-use-scanf-fn.insecure-use-scanf-fn","properties":{"precision":"very-high","tags":["CWE-676: Use of Potentially Dangerous Function","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Semgrep Finding: c.lang.security.insecure-use-scanf-fn.insecure-use-scanf-fn"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead."},"help":{"markdown":"Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/c.lang.security.insecure-use-strcat-fn.insecure-use-strcat-fn)\n - [https://nvd.nist.gov/vuln/detail/CVE-2019-12553](https://nvd.nist.gov/vuln/detail/CVE-2019-12553)\n - [https://techblog.mediaservice.net/2020/04/cve-2020-2851-stack-based-buffer-overflow-in-cde-libdtsvc/](https://techblog.mediaservice.net/2020/04/cve-2020-2851-stack-based-buffer-overflow-in-cde-libdtsvc/)\n","text":"Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/c.lang.security.insecure-use-strcat-fn.insecure-use-strcat-fn","id":"c.lang.security.insecure-use-strcat-fn.insecure-use-strcat-fn","name":"c.lang.security.insecure-use-strcat-fn.insecure-use-strcat-fn","properties":{"precision":"very-high","tags":["CWE-676: Use of Potentially Dangerous Function","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Semgrep Finding: c.lang.security.insecure-use-strcat-fn.insecure-use-strcat-fn"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."},"help":{"markdown":"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available).\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/c.lang.security.insecure-use-string-copy-fn.insecure-use-string-copy-fn)\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://nvd.nist.gov/vuln/detail/CVE-2019-11365](https://nvd.nist.gov/vuln/detail/CVE-2019-11365)\n","text":"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available).\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/c.lang.security.insecure-use-string-copy-fn.insecure-use-string-copy-fn","id":"c.lang.security.insecure-use-string-copy-fn.insecure-use-string-copy-fn","name":"c.lang.security.insecure-use-string-copy-fn.insecure-use-string-copy-fn","properties":{"precision":"very-high","tags":["CWE-676: Use of Potentially Dangerous Function","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Semgrep Finding: c.lang.security.insecure-use-string-copy-fn.insecure-use-string-copy-fn"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."},"help":{"markdown":"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/c.lang.security.insecure-use-strtok-fn.insecure-use-strtok-fn)\n - [https://wiki.sei.cmu.edu/confluence/display/c/STR06-C.+Do+not+assume+that+strtok%28%29+leaves+the+parse+string+unchanged](https://wiki.sei.cmu.edu/confluence/display/c/STR06-C.+Do+not+assume+that+strtok%28%29+leaves+the+parse+string+unchanged)\n - [https://man7.org/linux/man-pages/man3/strtok.3.html#BUGS](https://man7.org/linux/man-pages/man3/strtok.3.html#BUGS)\n - [https://stackoverflow.com/a/40335556](https://stackoverflow.com/a/40335556)\n","text":"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/c.lang.security.insecure-use-strtok-fn.insecure-use-strtok-fn","id":"c.lang.security.insecure-use-strtok-fn.insecure-use-strtok-fn","name":"c.lang.security.insecure-use-strtok-fn.insecure-use-strtok-fn","properties":{"precision":"very-high","tags":["CWE-676: Use of Potentially Dangerous Function","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Semgrep Finding: c.lang.security.insecure-use-strtok-fn.insecure-use-strtok-fn"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Call to 'read()' without error checking is susceptible to file descriptor exhaustion. Consider using the 'getrandom()' function."},"help":{"markdown":"Call to 'read()' without error checking is susceptible to file descriptor exhaustion. Consider using the 'getrandom()' function.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/c.lang.security.random-fd-exhaustion.random-fd-exhaustion)\n - [https://lwn.net/Articles/606141/](https://lwn.net/Articles/606141/)\n","text":"Call to 'read()' without error checking is susceptible to file descriptor exhaustion. Consider using the 'getrandom()' function.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/c.lang.security.random-fd-exhaustion.random-fd-exhaustion","id":"c.lang.security.random-fd-exhaustion.random-fd-exhaustion","name":"c.lang.security.random-fd-exhaustion.random-fd-exhaustion","properties":{"precision":"very-high","tags":["CWE-774: Allocation of File Descriptors or Handles Without Limits or Throttling","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Semgrep Finding: c.lang.security.random-fd-exhaustion.random-fd-exhaustion"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Variable '$VAR' was used after being freed. This can lead to undefined behavior."},"help":{"markdown":"Variable '$VAR' was used after being freed. This can lead to undefined behavior.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/c.lang.security.use-after-free.use-after-free)\n - [https://cwe.mitre.org/data/definitions/416.html](https://cwe.mitre.org/data/definitions/416.html)\n - [https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/use_after_free/](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/use_after_free/)\n","text":"Variable '$VAR' was used after being freed. This can lead to undefined behavior.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/c.lang.security.use-after-free.use-after-free","id":"c.lang.security.use-after-free.use-after-free","name":"c.lang.security.use-after-free.use-after-free","properties":{"precision":"very-high","tags":["CWE-416: Use After Free","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Semgrep Finding: c.lang.security.use-after-free.use-after-free"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'."},"help":{"markdown":"The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/dockerfile.security.last-user-is-root.last-user-is-root)\n - [https://github.com/hadolint/hadolint/wiki/DL3002](https://github.com/hadolint/hadolint/wiki/DL3002)\n","text":"The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/dockerfile.security.last-user-is-root.last-user-is-root","id":"dockerfile.security.last-user-is-root.last-user-is-root","name":"dockerfile.security.last-user-is-root.last-user-is-root","properties":{"precision":"very-high","tags":["CWE-269: Improper Privilege Management","MEDIUM CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Semgrep Finding: dockerfile.security.last-user-is-root.last-user-is-root"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\"."},"help":{"markdown":"Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var)\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss)\n","text":"Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var","id":"generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var","name":"generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using Flask, use 'url_for()' to safely generate a URL. If using Django, use the 'url' filter to safely generate a URL. If using Mustache, use a URL encoding library, or prepend a slash '/' to the variable for relative links (`href=\"/{{link}}\"`). You may also consider setting the Content Security Policy (CSP) header."},"help":{"markdown":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using Flask, use 'url_for()' to safely generate a URL. If using Django, use the 'url' filter to safely generate a URL. If using Mustache, use a URL encoding library, or prepend a slash '/' to the variable for relative links (`href=\"/{{link}}\"`). You may also consider setting the Content Security Policy (CSP) header.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.html-templates.security.var-in-href.var-in-href)\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI)\n - [https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url](https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url)\n - [https://github.com/pugjs/pug/issues/2952](https://github.com/pugjs/pug/issues/2952)\n - [https://content-security-policy.com/](https://content-security-policy.com/)\n","text":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using Flask, use 'url_for()' to safely generate a URL. If using Django, use the 'url' filter to safely generate a URL. If using Mustache, use a URL encoding library, or prepend a slash '/' to the variable for relative links (`href=\"/{{link}}\"`). You may also consider setting the Content Security Policy (CSP) header.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.html-templates.security.var-in-href.var-in-href","id":"generic.html-templates.security.var-in-href.var-in-href","name":"generic.html-templates.security.var-in-href.var-in-href","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: generic.html-templates.security.var-in-href.var-in-href"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`)."},"help":{"markdown":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.html-templates.security.var-in-script-tag.var-in-script-tag)\n - [https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A](https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A)\n - [https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough](https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough)\n - [https://github.com/ESAPI/owasp-esapi-js](https://github.com/ESAPI/owasp-esapi-js)\n","text":"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.html-templates.security.var-in-script-tag.var-in-script-tag","id":"generic.html-templates.security.var-in-script-tag.var-in-script-tag","name":"generic.html-templates.security.var-in-script-tag.var-in-script-tag","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: generic.html-templates.security.var-in-script-tag.var-in-script-tag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The alias in this location block is subject to a path traversal because the location path does not end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path."},"help":{"markdown":"The alias in this location block is subject to a path traversal because the location path does not end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.alias-path-traversal.alias-path-traversal)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n - [https://www.acunetix.com/vulnerabilities/web/path-traversal-via-misconfigured-nginx-alias/](https://www.acunetix.com/vulnerabilities/web/path-traversal-via-misconfigured-nginx-alias/)\n - [https://www.youtube.com/watch?v=CIhHpkybYsY](https://www.youtube.com/watch?v=CIhHpkybYsY)\n - [https://github.com/orangetw/My-Presentation-Slides/blob/main/data/2018-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out.pdf](https://github.com/orangetw/My-Presentation-Slides/blob/main/data/2018-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out.pdf)\n","text":"The alias in this location block is subject to a path traversal because the location path does not end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.nginx.security.alias-path-traversal.alias-path-traversal","id":"generic.nginx.security.alias-path-traversal.alias-path-traversal","name":"generic.nginx.security.alias-path-traversal.alias-path-traversal","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: generic.nginx.security.alias-path-traversal.alias-path-traversal"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The host for this proxy URL is dynamically determined. This can be dangerous if the host can be injected by an attacker because it may forcibly alter destination of the proxy. Consider hardcoding acceptable destinations and retrieving them with 'map' or something similar."},"help":{"markdown":"The host for this proxy URL is dynamically determined. This can be dangerous if the host can be injected by an attacker because it may forcibly alter destination of the proxy. Consider hardcoding acceptable destinations and retrieving them with 'map' or something similar.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.dynamic-proxy-host.dynamic-proxy-host)\n - [https://nginx.org/en/docs/http/ngx_http_map_module.html](https://nginx.org/en/docs/http/ngx_http_map_module.html)\n","text":"The host for this proxy URL is dynamically determined. This can be dangerous if the host can be injected by an attacker because it may forcibly alter destination of the proxy. Consider hardcoding acceptable destinations and retrieving them with 'map' or something similar.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.nginx.security.dynamic-proxy-host.dynamic-proxy-host","id":"generic.nginx.security.dynamic-proxy-host.dynamic-proxy-host","name":"generic.nginx.security.dynamic-proxy-host.dynamic-proxy-host","properties":{"precision":"very-high","tags":["CWE-441: Unintended Proxy or Intermediary ('Confused Deputy')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: generic.nginx.security.dynamic-proxy-host.dynamic-proxy-host"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The protocol scheme for this proxy is dynamically determined. This can be dangerous if the scheme can be injected by an attacker because it may forcibly alter the connection scheme. Consider hardcoding a scheme for this proxy."},"help":{"markdown":"The protocol scheme for this proxy is dynamically determined. This can be dangerous if the scheme can be injected by an attacker because it may forcibly alter the connection scheme. Consider hardcoding a scheme for this proxy.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.dynamic-proxy-scheme.dynamic-proxy-scheme)\n - [https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md](https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md)\n","text":"The protocol scheme for this proxy is dynamically determined. This can be dangerous if the scheme can be injected by an attacker because it may forcibly alter the connection scheme. Consider hardcoding a scheme for this proxy.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.nginx.security.dynamic-proxy-scheme.dynamic-proxy-scheme","id":"generic.nginx.security.dynamic-proxy-scheme.dynamic-proxy-scheme","name":"generic.nginx.security.dynamic-proxy-scheme.dynamic-proxy-scheme","properties":{"precision":"very-high","tags":["CWE-16: CWE CATEGORY: Configuration","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: generic.nginx.security.dynamic-proxy-scheme.dynamic-proxy-scheme"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The $$VARIABLE path parameter is added as a header in the response. This could allow an attacker to inject a newline and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace in the path parameter: '[^\\s]+'."},"help":{"markdown":"The $$VARIABLE path parameter is added as a header in the response. This could allow an attacker to inject a newline and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace in the path parameter: '[^\\s]+'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.header-injection.header-injection)\n - [https://github.com/yandex/gixy/blob/master/docs/en/plugins/httpsplitting.md](https://github.com/yandex/gixy/blob/master/docs/en/plugins/httpsplitting.md)\n - [https://owasp.org/www-community/attacks/HTTP_Response_Splitting](https://owasp.org/www-community/attacks/HTTP_Response_Splitting)\n","text":"The $$VARIABLE path parameter is added as a header in the response. This could allow an attacker to inject a newline and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace in the path parameter: '[^\\s]+'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.nginx.security.header-injection.header-injection","id":"generic.nginx.security.header-injection.header-injection","name":"generic.nginx.security.header-injection.header-injection","properties":{"precision":"very-high","tags":["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: generic.nginx.security.header-injection.header-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block."},"help":{"markdown":"The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition)\n - [https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md](https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md)\n","text":"The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition","id":"generic.nginx.security.header-redefinition.header-redefinition","name":"generic.nginx.security.header-redefinition.header-redefinition","properties":{"precision":"very-high","tags":["CWE-16: CWE CATEGORY: Configuration","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: generic.nginx.security.header-redefinition.header-redefinition"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will forward the request with the incoming scheme. This could result in unencrypted communications. To fix this, include the 'https' scheme."},"help":{"markdown":"Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will forward the request with the incoming scheme. This could result in unencrypted communications. To fix this, include the 'https' scheme.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.insecure-redirect.insecure-redirect)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will forward the request with the incoming scheme. This could result in unencrypted communications. To fix this, include the 'https' scheme.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.nginx.security.insecure-redirect.insecure-redirect","id":"generic.nginx.security.insecure-redirect.insecure-redirect","name":"generic.nginx.security.insecure-redirect.insecure-redirect","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: generic.nginx.security.insecure-redirect.insecure-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2 and TLS1.3; older versions are known to be broken and are susceptible to attacks. Prefer use of TLSv1.2 or later."},"help":{"markdown":"Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2 and TLS1.3; older versions are known to be broken and are susceptible to attacks. Prefer use of TLSv1.2 or later.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.insecure-ssl-version.insecure-ssl-version)\n - [https://www.acunetix.com/blog/web-security-zone/hardening-nginx/](https://www.acunetix.com/blog/web-security-zone/hardening-nginx/)\n - [https://www.acunetix.com/blog/articles/tls-ssl-cipher-hardening/](https://www.acunetix.com/blog/articles/tls-ssl-cipher-hardening/)\n","text":"Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2 and TLS1.3; older versions are known to be broken and are susceptible to attacks. Prefer use of TLSv1.2 or later.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.nginx.security.insecure-ssl-version.insecure-ssl-version","id":"generic.nginx.security.insecure-ssl-version.insecure-ssl-version","name":"generic.nginx.security.insecure-ssl-version.insecure-ssl-version","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: generic.nginx.security.insecure-ssl-version.insecure-ssl-version"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure."},"help":{"markdown":"This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.missing-internal.missing-internal)\n - [https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md](https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md)\n - [https://nginx.org/en/docs/http/ngx_http_core_module.html#internal](https://nginx.org/en/docs/http/ngx_http_core_module.html#internal)\n","text":"This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.nginx.security.missing-internal.missing-internal","id":"generic.nginx.security.missing-internal.missing-internal","name":"generic.nginx.security.missing-internal.missing-internal","properties":{"precision":"very-high","tags":["CWE-16: CWE CATEGORY: Configuration","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: generic.nginx.security.missing-internal.missing-internal"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions."},"help":{"markdown":"This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.missing-ssl-version.missing-ssl-version)\n - [https://www.acunetix.com/blog/web-security-zone/hardening-nginx/](https://www.acunetix.com/blog/web-security-zone/hardening-nginx/)\n - [https://nginx.org/en/docs/http/configuring_https_servers.html](https://nginx.org/en/docs/http/configuring_https_servers.html)\n","text":"This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.nginx.security.missing-ssl-version.missing-ssl-version","id":"generic.nginx.security.missing-ssl-version.missing-ssl-version","name":"generic.nginx.security.missing-ssl-version.missing-ssl-version","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: generic.nginx.security.missing-ssl-version.missing-ssl-version"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Amazon MWS Auth Token detected"},"help":{"markdown":"Amazon MWS Auth Token detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-amazon-mws-auth-token.detected-amazon-mws-auth-token)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Amazon MWS Auth Token detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-amazon-mws-auth-token.detected-amazon-mws-auth-token","id":"generic.secrets.security.detected-amazon-mws-auth-token.detected-amazon-mws-auth-token","name":"generic.secrets.security.detected-amazon-mws-auth-token.detected-amazon-mws-auth-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-amazon-mws-auth-token.detected-amazon-mws-auth-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Artifactory token detected"},"help":{"markdown":"Artifactory token detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-artifactory-password.detected-artifactory-password)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Artifactory token detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-artifactory-password.detected-artifactory-password","id":"generic.secrets.security.detected-artifactory-password.detected-artifactory-password","name":"generic.secrets.security.detected-artifactory-password.detected-artifactory-password","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-artifactory-password.detected-artifactory-password"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Artifactory token detected"},"help":{"markdown":"Artifactory token detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-artifactory-token.detected-artifactory-token)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Artifactory token detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-artifactory-token.detected-artifactory-token","id":"generic.secrets.security.detected-artifactory-token.detected-artifactory-token","name":"generic.secrets.security.detected-artifactory-token.detected-artifactory-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-artifactory-token.detected-artifactory-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here. Instead, read this value from an environment variable or keep it in a separate, private file."},"help":{"markdown":"AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here. Instead, read this value from an environment variable or keep it in a separate, private file.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here. Instead, read this value from an environment variable or keep it in a separate, private file.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value","id":"generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value","name":"generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"AWS AppSync GraphQL Key detected"},"help":{"markdown":"AWS AppSync GraphQL Key detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-aws-appsync-graphql-key.detected-aws-appsync-graphql-key)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"AWS AppSync GraphQL Key detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-aws-appsync-graphql-key.detected-aws-appsync-graphql-key","id":"generic.secrets.security.detected-aws-appsync-graphql-key.detected-aws-appsync-graphql-key","name":"generic.secrets.security.detected-aws-appsync-graphql-key.detected-aws-appsync-graphql-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-aws-appsync-graphql-key.detected-aws-appsync-graphql-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"AWS Secret Access Key detected"},"help":{"markdown":"AWS Secret Access Key detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"AWS Secret Access Key detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key","id":"generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key","name":"generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"AWS Session Token detected"},"help":{"markdown":"AWS Session Token detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-aws-session-token.detected-aws-session-token)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"AWS Session Token detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-aws-session-token.detected-aws-session-token","id":"generic.secrets.security.detected-aws-session-token.detected-aws-session-token","name":"generic.secrets.security.detected-aws-session-token.detected-aws-session-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-aws-session-token.detected-aws-session-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"bcrypt hash detected"},"help":{"markdown":"bcrypt hash detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"bcrypt hash detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash","id":"generic.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash","name":"generic.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"CodeClimate detected"},"help":{"markdown":"CodeClimate detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-codeclimate.detected-codeclimate)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"CodeClimate detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-codeclimate.detected-codeclimate","id":"generic.secrets.security.detected-codeclimate.detected-codeclimate","name":"generic.secrets.security.detected-codeclimate.detected-codeclimate","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-codeclimate.detected-codeclimate"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"linux shadow file detected"},"help":{"markdown":"linux shadow file detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-etc-shadow.detected-etc-shadow)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"linux shadow file detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-etc-shadow.detected-etc-shadow","id":"generic.secrets.security.detected-etc-shadow.detected-etc-shadow","name":"generic.secrets.security.detected-etc-shadow.detected-etc-shadow","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-etc-shadow.detected-etc-shadow"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Facebook Access Token detected"},"help":{"markdown":"Facebook Access Token detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-facebook-access-token.detected-facebook-access-token)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Facebook Access Token detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-facebook-access-token.detected-facebook-access-token","id":"generic.secrets.security.detected-facebook-access-token.detected-facebook-access-token","name":"generic.secrets.security.detected-facebook-access-token.detected-facebook-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-facebook-access-token.detected-facebook-access-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Facebook OAuth detected"},"help":{"markdown":"Facebook OAuth detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Facebook OAuth detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth","id":"generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth","name":"generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Google (GCM) Service account detected"},"help":{"markdown":"Google (GCM) Service account detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-google-gcm-service-account.detected-google-gcm-service-account)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Google (GCM) Service account detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-google-gcm-service-account.detected-google-gcm-service-account","id":"generic.secrets.security.detected-google-gcm-service-account.detected-google-gcm-service-account","name":"generic.secrets.security.detected-google-gcm-service-account.detected-google-gcm-service-account","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-google-gcm-service-account.detected-google-gcm-service-account"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Google OAuth Access Token detected"},"help":{"markdown":"Google OAuth Access Token detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Google OAuth Access Token detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token","id":"generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token","name":"generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Heroku API Key detected"},"help":{"markdown":"Heroku API Key detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-heroku-api-key.detected-heroku-api-key)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Heroku API Key detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-heroku-api-key.detected-heroku-api-key","id":"generic.secrets.security.detected-heroku-api-key.detected-heroku-api-key","name":"generic.secrets.security.detected-heroku-api-key.detected-heroku-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-heroku-api-key.detected-heroku-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"HockeyApp detected"},"help":{"markdown":"HockeyApp detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-hockeyapp.detected-hockeyapp)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"HockeyApp detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-hockeyapp.detected-hockeyapp","id":"generic.secrets.security.detected-hockeyapp.detected-hockeyapp","name":"generic.secrets.security.detected-hockeyapp.detected-hockeyapp","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-hockeyapp.detected-hockeyapp"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"MailChimp API Key detected"},"help":{"markdown":"MailChimp API Key detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-mailchimp-api-key.detected-mailchimp-api-key)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"MailChimp API Key detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-mailchimp-api-key.detected-mailchimp-api-key","id":"generic.secrets.security.detected-mailchimp-api-key.detected-mailchimp-api-key","name":"generic.secrets.security.detected-mailchimp-api-key.detected-mailchimp-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-mailchimp-api-key.detected-mailchimp-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Mailgun API Key detected"},"help":{"markdown":"Mailgun API Key detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-mailgun-api-key.detected-mailgun-api-key)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Mailgun API Key detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-mailgun-api-key.detected-mailgun-api-key","id":"generic.secrets.security.detected-mailgun-api-key.detected-mailgun-api-key","name":"generic.secrets.security.detected-mailgun-api-key.detected-mailgun-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-mailgun-api-key.detected-mailgun-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"NPM registry authentication token detected"},"help":{"markdown":"NPM registry authentication token detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-npm-registry-auth-token.detected-npm-registry-auth-token)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"NPM registry authentication token detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-npm-registry-auth-token.detected-npm-registry-auth-token","id":"generic.secrets.security.detected-npm-registry-auth-token.detected-npm-registry-auth-token","name":"generic.secrets.security.detected-npm-registry-auth-token.detected-npm-registry-auth-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-npm-registry-auth-token.detected-npm-registry-auth-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Onfido live API Token detected"},"help":{"markdown":"Onfido live API Token detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-onfido-live-api-token.detected-onfido-live-api-token)\n - [https://documentation.onfido.com/api/latest/#api-tokens](https://documentation.onfido.com/api/latest/#api-tokens)\n","text":"Onfido live API Token detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-onfido-live-api-token.detected-onfido-live-api-token","id":"generic.secrets.security.detected-onfido-live-api-token.detected-onfido-live-api-token","name":"generic.secrets.security.detected-onfido-live-api-token.detected-onfido-live-api-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-onfido-live-api-token.detected-onfido-live-api-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Outlook Team detected"},"help":{"markdown":"Outlook Team detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-outlook-team.detected-outlook-team)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Outlook Team detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-outlook-team.detected-outlook-team","id":"generic.secrets.security.detected-outlook-team.detected-outlook-team","name":"generic.secrets.security.detected-outlook-team.detected-outlook-team","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-outlook-team.detected-outlook-team"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"PayPal Braintree Access Token detected"},"help":{"markdown":"PayPal Braintree Access Token detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-paypal-braintree-access-token.detected-paypal-braintree-access-token)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"PayPal Braintree Access Token detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-paypal-braintree-access-token.detected-paypal-braintree-access-token","id":"generic.secrets.security.detected-paypal-braintree-access-token.detected-paypal-braintree-access-token","name":"generic.secrets.security.detected-paypal-braintree-access-token.detected-paypal-braintree-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-paypal-braintree-access-token.detected-paypal-braintree-access-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Something that looks like a PGP private key block is detected. This is a potential hardcoded secret that could be leaked if this code is committed. Instead, remove this code block from the commit."},"help":{"markdown":"Something that looks like a PGP private key block is detected. This is a potential hardcoded secret that could be leaked if this code is committed. Instead, remove this code block from the commit.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Something that looks like a PGP private key block is detected. This is a potential hardcoded secret that could be leaked if this code is committed. Instead, remove this code block from the commit.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block","id":"generic.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block","name":"generic.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Picatic API Key detected"},"help":{"markdown":"Picatic API Key detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-picatic-api-key.detected-picatic-api-key)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Picatic API Key detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-picatic-api-key.detected-picatic-api-key","id":"generic.secrets.security.detected-picatic-api-key.detected-picatic-api-key","name":"generic.secrets.security.detected-picatic-api-key.detected-picatic-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-picatic-api-key.detected-picatic-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file."},"help":{"markdown":"Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-private-key.detected-private-key)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-private-key.detected-private-key","id":"generic.secrets.security.detected-private-key.detected-private-key","name":"generic.secrets.security.detected-private-key.detected-private-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-private-key.detected-private-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Sauce Token detected"},"help":{"markdown":"Sauce Token detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-sauce-token.detected-sauce-token)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Sauce Token detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-sauce-token.detected-sauce-token","id":"generic.secrets.security.detected-sauce-token.detected-sauce-token","name":"generic.secrets.security.detected-sauce-token.detected-sauce-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-sauce-token.detected-sauce-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Slack Token detected"},"help":{"markdown":"Slack Token detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-slack-token.detected-slack-token)\n - [https://github.com/davidburkitt/python-secret-scanner/blob/335a1f6dab8de59cf39063e57aea39a58951e939/patterns.txt#L58](https://github.com/davidburkitt/python-secret-scanner/blob/335a1f6dab8de59cf39063e57aea39a58951e939/patterns.txt#L58)\n","text":"Slack Token detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-slack-token.detected-slack-token","id":"generic.secrets.security.detected-slack-token.detected-slack-token","name":"generic.secrets.security.detected-slack-token.detected-slack-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-slack-token.detected-slack-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Slack Webhook detected"},"help":{"markdown":"Slack Webhook detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-slack-webhook.detected-slack-webhook)\n - [https://api.slack.com/messaging/webhooks](https://api.slack.com/messaging/webhooks)\n","text":"Slack Webhook detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-slack-webhook.detected-slack-webhook","id":"generic.secrets.security.detected-slack-webhook.detected-slack-webhook","name":"generic.secrets.security.detected-slack-webhook.detected-slack-webhook","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-slack-webhook.detected-slack-webhook"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"SonarQube Docs API Key detected"},"help":{"markdown":"SonarQube Docs API Key detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-sonarqube-docs-api-key.detected-sonarqube-docs-api-key)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"SonarQube Docs API Key detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-sonarqube-docs-api-key.detected-sonarqube-docs-api-key","id":"generic.secrets.security.detected-sonarqube-docs-api-key.detected-sonarqube-docs-api-key","name":"generic.secrets.security.detected-sonarqube-docs-api-key.detected-sonarqube-docs-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-sonarqube-docs-api-key.detected-sonarqube-docs-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Square Access Token detected"},"help":{"markdown":"Square Access Token detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-square-access-token.detected-square-access-token)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Square Access Token detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-square-access-token.detected-square-access-token","id":"generic.secrets.security.detected-square-access-token.detected-square-access-token","name":"generic.secrets.security.detected-square-access-token.detected-square-access-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-square-access-token.detected-square-access-token"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Square OAuth Secret detected"},"help":{"markdown":"Square OAuth Secret detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-square-oauth-secret.detected-square-oauth-secret)\n - [https://github.com/Yelp/detect-secrets/blob/master/tests/plugins/square_oauth_test.py](https://github.com/Yelp/detect-secrets/blob/master/tests/plugins/square_oauth_test.py)\n","text":"Square OAuth Secret detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-square-oauth-secret.detected-square-oauth-secret","id":"generic.secrets.security.detected-square-oauth-secret.detected-square-oauth-secret","name":"generic.secrets.security.detected-square-oauth-secret.detected-square-oauth-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-square-oauth-secret.detected-square-oauth-secret"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"SSH Password detected"},"help":{"markdown":"SSH Password detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-ssh-password.detected-ssh-password)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"SSH Password detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-ssh-password.detected-ssh-password","id":"generic.secrets.security.detected-ssh-password.detected-ssh-password","name":"generic.secrets.security.detected-ssh-password.detected-ssh-password","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-ssh-password.detected-ssh-password"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Stripe API Key detected"},"help":{"markdown":"Stripe API Key detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-stripe-api-key.detected-stripe-api-key)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Stripe API Key detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-stripe-api-key.detected-stripe-api-key","id":"generic.secrets.security.detected-stripe-api-key.detected-stripe-api-key","name":"generic.secrets.security.detected-stripe-api-key.detected-stripe-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-stripe-api-key.detected-stripe-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Stripe Restricted API Key detected"},"help":{"markdown":"Stripe Restricted API Key detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Stripe Restricted API Key detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key","id":"generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key","name":"generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Telegram Bot API Key detected"},"help":{"markdown":"Telegram Bot API Key detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-telegram-bot-api-key.detected-telegram-bot-api-key)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Telegram Bot API Key detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-telegram-bot-api-key.detected-telegram-bot-api-key","id":"generic.secrets.security.detected-telegram-bot-api-key.detected-telegram-bot-api-key","name":"generic.secrets.security.detected-telegram-bot-api-key.detected-telegram-bot-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-telegram-bot-api-key.detected-telegram-bot-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Twilio API Key detected"},"help":{"markdown":"Twilio API Key detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-twilio-api-key.detected-twilio-api-key)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Twilio API Key detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-twilio-api-key.detected-twilio-api-key","id":"generic.secrets.security.detected-twilio-api-key.detected-twilio-api-key","name":"generic.secrets.security.detected-twilio-api-key.detected-twilio-api-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-twilio-api-key.detected-twilio-api-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Username and password in URI detected"},"help":{"markdown":"Username and password in URI detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-username-and-password-in-uri.detected-username-and-password-in-uri)\n - [https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go](https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go)\n","text":"Username and password in URI detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-username-and-password-in-uri.detected-username-and-password-in-uri","id":"generic.secrets.security.detected-username-and-password-in-uri.detected-username-and-password-in-uri","name":"generic.secrets.security.detected-username-and-password-in-uri.detected-username-and-password-in-uri","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-username-and-password-in-uri.detected-username-and-password-in-uri"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found an insecure gRPC connection using 'grpc.WithInsecure()'. This creates a connection without encryption to a gRPC server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Instead, establish a secure connection with an SSL certificate using the 'grpc.WithTransportCredentials()' function. You can create a create credentials using a 'tls.Config{}' struct with 'credentials.NewTLS()'. The final fix looks like this: 'grpc.WithTransportCredentials(credentials.NewTLS(<config>))'."},"help":{"markdown":"Found an insecure gRPC connection using 'grpc.WithInsecure()'. This creates a connection without encryption to a gRPC server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Instead, establish a secure connection with an SSL certificate using the 'grpc.WithTransportCredentials()' function. You can create a create credentials using a 'tls.Config{}' struct with 'credentials.NewTLS()'. The final fix looks like this: 'grpc.WithTransportCredentials(credentials.NewTLS(<config>))'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection)\n - [https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption](https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption)\n","text":"Found an insecure gRPC connection using 'grpc.WithInsecure()'. This creates a connection without encryption to a gRPC server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Instead, establish a secure connection with an SSL certificate using the 'grpc.WithTransportCredentials()' function. You can create a create credentials using a 'tls.Config{}' struct with 'credentials.NewTLS()'. The final fix looks like this: 'grpc.WithTransportCredentials(credentials.NewTLS(<config>))'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection","id":"go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection","name":"go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection","properties":{"precision":"very-high","tags":["CWE-300: Channel Accessible by Non-Endpoint","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")'."},"help":{"markdown":"Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection)\n - [https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption](https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption)\n","text":"Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection","id":"go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection","name":"go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection","properties":{"precision":"very-high","tags":["CWE-300: Channel Accessible by Non-Endpoint","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.jwt-go.security.jwt.hardcoded-jwt-key)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.jwt-go.security.jwt.hardcoded-jwt-key","id":"go.jwt-go.security.jwt.hardcoded-jwt-key","name":"go.jwt-go.security.jwt.hardcoded-jwt-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: go.jwt-go.security.jwt.hardcoded-jwt-key"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The package `net/http/cgi` is on the import blocklist.  The package is vulnerable to httpoxy attacks (CVE-2015-5386). It is recommended to use `net/http` or a web framework to build a web application instead."},"help":{"markdown":"The package `net/http/cgi` is on the import blocklist.  The package is vulnerable to httpoxy attacks (CVE-2015-5386). It is recommended to use `net/http` or a web framework to build a web application instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.crypto.bad_imports.insecure-module-used)\n - [https://godoc.org/golang.org/x/crypto/sha3](https://godoc.org/golang.org/x/crypto/sha3)\n","text":"The package `net/http/cgi` is on the import blocklist.  The package is vulnerable to httpoxy attacks (CVE-2015-5386). It is recommended to use `net/http` or a web framework to build a web application instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.crypto.bad_imports.insecure-module-used","id":"go.lang.security.audit.crypto.bad_imports.insecure-module-used","name":"go.lang.security.audit.crypto.bad_imports.insecure-module-used","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.crypto.bad_imports.insecure-module-used"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Disabled host key verification detected. This allows man-in-the-middle attacks. Use the 'golang.org/x/crypto/ssh/knownhosts' package to do host key verification. See https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/ to learn more about the problem and how to fix it."},"help":{"markdown":"Disabled host key verification detected. This allows man-in-the-middle attacks. Use the 'golang.org/x/crypto/ssh/knownhosts' package to do host key verification. See https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/ to learn more about the problem and how to fix it.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.crypto.insecure_ssh.avoid-ssh-insecure-ignore-host-key)\n - [https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/](https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/)\n - [https://gist.github.com/Skarlso/34321a230cf0245018288686c9e70b2d](https://gist.github.com/Skarlso/34321a230cf0245018288686c9e70b2d)\n","text":"Disabled host key verification detected. This allows man-in-the-middle attacks. Use the 'golang.org/x/crypto/ssh/knownhosts' package to do host key verification. See https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/ to learn more about the problem and how to fix it.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.crypto.insecure_ssh.avoid-ssh-insecure-ignore-host-key","id":"go.lang.security.audit.crypto.insecure_ssh.avoid-ssh-insecure-ignore-host-key","name":"go.lang.security.audit.crypto.insecure_ssh.avoid-ssh-insecure-ignore-host-key","properties":{"precision":"very-high","tags":["CWE-322: Key Exchange without Entity Authentication","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.crypto.insecure_ssh.avoid-ssh-insecure-ignore-host-key"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Do not use `math/rand`. Use `crypto/rand` instead."},"help":{"markdown":"Do not use `math/rand`. Use `crypto/rand` instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.crypto.math_random.math-random-used)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation)\n","text":"Do not use `math/rand`. Use `crypto/rand` instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.crypto.math_random.math-random-used","id":"go.lang.security.audit.crypto.math_random.math-random-used","name":"go.lang.security.audit.crypto.math_random.math-random-used","properties":{"precision":"very-high","tags":["CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.crypto.math_random.math-random-used"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"SSLv3 is insecure because it has known vulnerabilities. Starting with go1.14, SSLv3 will be removed. Instead, use 'tls.VersionTLS13'."},"help":{"markdown":"SSLv3 is insecure because it has known vulnerabilities. Starting with go1.14, SSLv3 will be removed. Instead, use 'tls.VersionTLS13'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.crypto.ssl.ssl-v3-is-insecure)\n - [https://golang.org/doc/go1.14#crypto/tls](https://golang.org/doc/go1.14#crypto/tls)\n - [https://www.us-cert.gov/ncas/alerts/TA14-290A](https://www.us-cert.gov/ncas/alerts/TA14-290A)\n","text":"SSLv3 is insecure because it has known vulnerabilities. Starting with go1.14, SSLv3 will be removed. Instead, use 'tls.VersionTLS13'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.crypto.ssl.ssl-v3-is-insecure","id":"go.lang.security.audit.crypto.ssl.ssl-v3-is-insecure","name":"go.lang.security.audit.crypto.ssl.ssl-v3-is-insecure","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.crypto.ssl.ssl-v3-is-insecure"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an insecure CipherSuite via the 'tls' module. This suite is considered weak. Use the function 'tls.CipherSuites()' to get a list of good cipher suites. See https://golang.org/pkg/crypto/tls/#InsecureCipherSuites for why and what other cipher suites to use."},"help":{"markdown":"Detected an insecure CipherSuite via the 'tls' module. This suite is considered weak. Use the function 'tls.CipherSuites()' to get a list of good cipher suites. See https://golang.org/pkg/crypto/tls/#InsecureCipherSuites for why and what other cipher suites to use.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.crypto.tls.tls-with-insecure-cipher)\n - [https://golang.org/pkg/crypto/tls/#InsecureCipherSuites](https://golang.org/pkg/crypto/tls/#InsecureCipherSuites)\n","text":"Detected an insecure CipherSuite via the 'tls' module. This suite is considered weak. Use the function 'tls.CipherSuites()' to get a list of good cipher suites. See https://golang.org/pkg/crypto/tls/#InsecureCipherSuites for why and what other cipher suites to use.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.crypto.tls.tls-with-insecure-cipher","id":"go.lang.security.audit.crypto.tls.tls-with-insecure-cipher","name":"go.lang.security.audit.crypto.tls.tls-with-insecure-cipher","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.crypto.tls.tls-with-insecure-cipher"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected DES cipher algorithm which is insecure. The algorithm is considered weak and has been deprecated. Use AES instead."},"help":{"markdown":"Detected DES cipher algorithm which is insecure. The algorithm is considered weak and has been deprecated. Use AES instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-DES)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected DES cipher algorithm which is insecure. The algorithm is considered weak and has been deprecated. Use AES instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-DES","id":"go.lang.security.audit.crypto.use_of_weak_crypto.use-of-DES","name":"go.lang.security.audit.crypto.use_of_weak_crypto.use-of-DES","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-DES"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"help":{"markdown":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5","id":"go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5","name":"go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected RC4 cipher algorithm which is insecure. The algorithm has many known vulnerabilities. Use AES instead."},"help":{"markdown":"Detected RC4 cipher algorithm which is insecure. The algorithm has many known vulnerabilities. Use AES instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-rc4)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected RC4 cipher algorithm which is insecure. The algorithm has many known vulnerabilities. Use AES instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-rc4","id":"go.lang.security.audit.crypto.use_of_weak_crypto.use-of-rc4","name":"go.lang.security.audit.crypto.use_of_weak_crypto.use-of-rc4","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-rc4"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"help":{"markdown":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1","id":"go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1","name":"go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data."},"help":{"markdown":"String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.database.string-formatted-query.string-formatted-query)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.database.string-formatted-query.string-formatted-query","id":"go.lang.security.audit.database.string-formatted-query.string-formatted-query","name":"go.lang.security.audit.database.string-formatted-query.string-formatted-query","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.database.string-formatted-query.string-formatted-query"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a network listener listening on 0.0.0.0 or an empty string. This could unexpectedly expose the server publicly as it binds to all available interfaces. Instead, specify another IP address that is not 0.0.0.0 nor the empty string."},"help":{"markdown":"Detected a network listener listening on 0.0.0.0 or an empty string. This could unexpectedly expose the server publicly as it binds to all available interfaces. Instead, specify another IP address that is not 0.0.0.0 nor the empty string.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.net.bind_all.avoid-bind-to-all-interfaces)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Detected a network listener listening on 0.0.0.0 or an empty string. This could unexpectedly expose the server publicly as it binds to all available interfaces. Instead, specify another IP address that is not 0.0.0.0 nor the empty string.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.net.bind_all.avoid-bind-to-all-interfaces","id":"go.lang.security.audit.net.bind_all.avoid-bind-to-all-interfaces","name":"go.lang.security.audit.net.bind_all.avoid-bind-to-all-interfaces","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","HIGH CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.net.bind_all.avoid-bind-to-all-interfaces"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a potentially dynamic ClientTrace. This occurred because semgrep could not find a static definition for '$TRACE'. Dynamic ClientTraces are dangerous because they deserialize function code to run when certain Request events occur, which could lead to code being run without your knowledge. Ensure that your ClientTrace is statically defined."},"help":{"markdown":"Detected a potentially dynamic ClientTrace. This occurred because semgrep could not find a static definition for '$TRACE'. Dynamic ClientTraces are dangerous because they deserialize function code to run when certain Request events occur, which could lead to code being run without your knowledge. Ensure that your ClientTrace is statically defined.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.net.dynamic-httptrace-clienttrace.dynamic-httptrace-clienttrace)\n - [https://github.com/returntocorp/semgrep-rules/issues/518](https://github.com/returntocorp/semgrep-rules/issues/518)\n","text":"Detected a potentially dynamic ClientTrace. This occurred because semgrep could not find a static definition for '$TRACE'. Dynamic ClientTraces are dangerous because they deserialize function code to run when certain Request events occur, which could lead to code being run without your knowledge. Ensure that your ClientTrace is statically defined.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.net.dynamic-httptrace-clienttrace.dynamic-httptrace-clienttrace","id":"go.lang.security.audit.net.dynamic-httptrace-clienttrace.dynamic-httptrace-clienttrace","name":"go.lang.security.audit.net.dynamic-httptrace-clienttrace.dynamic-httptrace-clienttrace","properties":{"precision":"very-high","tags":["CWE-913: Improper Control of Dynamically-Managed Code Resources","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.net.dynamic-httptrace-clienttrace.dynamic-httptrace-clienttrace"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a formatted template string passed to 'template.HTML()'. 'template.HTML()' does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability."},"help":{"markdown":"Found a formatted template string passed to 'template.HTML()'. 'template.HTML()' does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.net.formatted-template-string.formatted-template-string)\n - [https://golang.org/pkg/html/template/#HTML](https://golang.org/pkg/html/template/#HTML)\n","text":"Found a formatted template string passed to 'template.HTML()'. 'template.HTML()' does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.net.formatted-template-string.formatted-template-string","id":"go.lang.security.audit.net.formatted-template-string.formatted-template-string","name":"go.lang.security.audit.net.formatted-template-string.formatted-template-string","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.net.formatted-template-string.formatted-template-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The profiling 'pprof' endpoint is automatically exposed on /debug/pprof. This could leak information about the server. Instead, use `import \"net/http/pprof\"`. See https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/ for more information and mitigation."},"help":{"markdown":"The profiling 'pprof' endpoint is automatically exposed on /debug/pprof. This could leak information about the server. Instead, use `import \"net/http/pprof\"`. See https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/ for more information and mitigation.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.net.pprof.pprof-debug-exposure)\n - [https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/](https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/)\n","text":"The profiling 'pprof' endpoint is automatically exposed on /debug/pprof. This could leak information about the server. Instead, use `import \"net/http/pprof\"`. See https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/ for more information and mitigation.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.net.pprof.pprof-debug-exposure","id":"go.lang.security.audit.net.pprof.pprof-debug-exposure","name":"go.lang.security.audit.net.pprof.pprof-debug-exposure","properties":{"precision":"very-high","tags":["CWE-489: Active Debug Code","LOW CONFIDENCE","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.net.pprof.pprof-debug-exposure"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a formatted template string passed to 'template. HTMLAttr()'. 'template.HTMLAttr()' does not escape contents. Be absolutely sure there is no user-controlled data in this template or validate and sanitize the data before passing it into the template."},"help":{"markdown":"Found a formatted template string passed to 'template. HTMLAttr()'. 'template.HTMLAttr()' does not escape contents. Be absolutely sure there is no user-controlled data in this template or validate and sanitize the data before passing it into the template.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.net.unescaped-data-in-htmlattr.unescaped-data-in-htmlattr)\n - [https://golang.org/pkg/html/template/#HTMLAttr](https://golang.org/pkg/html/template/#HTMLAttr)\n","text":"Found a formatted template string passed to 'template. HTMLAttr()'. 'template.HTMLAttr()' does not escape contents. Be absolutely sure there is no user-controlled data in this template or validate and sanitize the data before passing it into the template.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.net.unescaped-data-in-htmlattr.unescaped-data-in-htmlattr","id":"go.lang.security.audit.net.unescaped-data-in-htmlattr.unescaped-data-in-htmlattr","name":"go.lang.security.audit.net.unescaped-data-in-htmlattr.unescaped-data-in-htmlattr","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.net.unescaped-data-in-htmlattr.unescaped-data-in-htmlattr"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a formatted template string passed to 'template.JS()'. 'template.JS()' does not escape contents. Be absolutely sure there is no user-controlled data in this template."},"help":{"markdown":"Found a formatted template string passed to 'template.JS()'. 'template.JS()' does not escape contents. Be absolutely sure there is no user-controlled data in this template.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.net.unescaped-data-in-js.unescaped-data-in-js)\n - [https://golang.org/pkg/html/template/#JS](https://golang.org/pkg/html/template/#JS)\n","text":"Found a formatted template string passed to 'template.JS()'. 'template.JS()' does not escape contents. Be absolutely sure there is no user-controlled data in this template.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.net.unescaped-data-in-js.unescaped-data-in-js","id":"go.lang.security.audit.net.unescaped-data-in-js.unescaped-data-in-js","name":"go.lang.security.audit.net.unescaped-data-in-js.unescaped-data-in-js","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.net.unescaped-data-in-js.unescaped-data-in-js"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a formatted template string passed to 'template.URL()'. 'template.URL()' does not escape contents, and this could result in XSS (cross-site scripting) and therefore confidential data being stolen. Sanitize data coming into this function or make sure that no user-controlled input is coming into the function."},"help":{"markdown":"Found a formatted template string passed to 'template.URL()'. 'template.URL()' does not escape contents, and this could result in XSS (cross-site scripting) and therefore confidential data being stolen. Sanitize data coming into this function or make sure that no user-controlled input is coming into the function.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.net.unescaped-data-in-url.unescaped-data-in-url)\n - [https://golang.org/pkg/html/template/#URL](https://golang.org/pkg/html/template/#URL)\n","text":"Found a formatted template string passed to 'template.URL()'. 'template.URL()' does not escape contents, and this could result in XSS (cross-site scripting) and therefore confidential data being stolen. Sanitize data coming into this function or make sure that no user-controlled input is coming into the function.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.net.unescaped-data-in-url.unescaped-data-in-url","id":"go.lang.security.audit.net.unescaped-data-in-url.unescaped-data-in-url","name":"go.lang.security.audit.net.unescaped-data-in-url.unescaped-data-in-url","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.net.unescaped-data-in-url.unescaped-data-in-url"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information."},"help":{"markdown":"Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.net.use-tls.use-tls)\n - [https://golang.org/pkg/net/http/#ListenAndServeTLS](https://golang.org/pkg/net/http/#ListenAndServeTLS)\n","text":"Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.net.use-tls.use-tls","id":"go.lang.security.audit.net.use-tls.use-tls","name":"go.lang.security.audit.net.use-tls.use-tls","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.net.use-tls.use-tls"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found data going from url query parameters into formatted data written to ResponseWriter. This could be XSS and should not be done. If you must do this, ensure your data is sanitized or escaped."},"help":{"markdown":"Found data going from url query parameters into formatted data written to ResponseWriter. This could be XSS and should not be done. If you must do this, ensure your data is sanitized or escaped.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf.wip-xss-using-responsewriter-and-printf)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Found data going from url query parameters into formatted data written to ResponseWriter. This could be XSS and should not be done. If you must do this, ensure your data is sanitized or escaped.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf.wip-xss-using-responsewriter-and-printf","id":"go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf.wip-xss-using-responsewriter-and-printf","name":"go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf.wip-xss-using-responsewriter-and-printf","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf.wip-xss-using-responsewriter-and-printf"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"'reflect.MakeFunc' detected. This will sidestep protections that are normally afforded by Go's type system. Audit this call and be sure that user input cannot be used to affect the code generated by MakeFunc; otherwise, you will have a serious security vulnerability."},"help":{"markdown":"'reflect.MakeFunc' detected. This will sidestep protections that are normally afforded by Go's type system. Audit this call and be sure that user input cannot be used to affect the code generated by MakeFunc; otherwise, you will have a serious security vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.reflect-makefunc.reflect-makefunc)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"'reflect.MakeFunc' detected. This will sidestep protections that are normally afforded by Go's type system. Audit this call and be sure that user input cannot be used to affect the code generated by MakeFunc; otherwise, you will have a serious security vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.reflect-makefunc.reflect-makefunc","id":"go.lang.security.audit.reflect-makefunc.reflect-makefunc","name":"go.lang.security.audit.reflect-makefunc.reflect-makefunc","properties":{"precision":"very-high","tags":["CWE-913: Improper Control of Dynamically-Managed Code Resources","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.reflect-makefunc.reflect-makefunc"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using the unsafe package in Go gives you low-level memory management and many of the strengths of the C language, but also steps around the type safety of Go and can lead to buffer overflows and possible arbitrary code execution by an attacker. Only use this package if you absolutely know what you're doing."},"help":{"markdown":"Using the unsafe package in Go gives you low-level memory management and many of the strengths of the C language, but also steps around the type safety of Go and can lead to buffer overflows and possible arbitrary code execution by an attacker. Only use this package if you absolutely know what you're doing.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.audit.unsafe.use-of-unsafe-block)\n - [https://cwe.mitre.org/data/definitions/242.html](https://cwe.mitre.org/data/definitions/242.html)\n","text":"Using the unsafe package in Go gives you low-level memory management and many of the strengths of the C language, but also steps around the type safety of Go and can lead to buffer overflows and possible arbitrary code execution by an attacker. Only use this package if you absolutely know what you're doing.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.audit.unsafe.use-of-unsafe-block","id":"go.lang.security.audit.unsafe.use-of-unsafe-block","name":"go.lang.security.audit.unsafe.use-of-unsafe-block","properties":{"precision":"very-high","tags":["CWE-242: Use of Inherently Dangerous Function","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.audit.unsafe.use-of-unsafe-block"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"File creation in shared tmp directory without using `io.CreateTemp`."},"help":{"markdown":"File creation in shared tmp directory without using `io.CreateTemp`.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.bad_tmp.bad-tmp-file-creation)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n - [https://pkg.go.dev/io/ioutil#TempFile](https://pkg.go.dev/io/ioutil#TempFile)\n - [https://pkg.go.dev/os#CreateTemp](https://pkg.go.dev/os#CreateTemp)\n - [https://github.com/securego/gosec/blob/5fd2a370447223541cddb35da8d1bc707b7bb153/rules/tempfiles.go#L67](https://github.com/securego/gosec/blob/5fd2a370447223541cddb35da8d1bc707b7bb153/rules/tempfiles.go#L67)\n","text":"File creation in shared tmp directory without using `io.CreateTemp`.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.bad_tmp.bad-tmp-file-creation","id":"go.lang.security.bad_tmp.bad-tmp-file-creation","name":"go.lang.security.bad_tmp.bad-tmp-file-creation","properties":{"precision":"very-high","tags":["CWE-377: Insecure Temporary File","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.bad_tmp.bad-tmp-file-creation"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a possible denial-of-service via a zip bomb attack. By limiting the max bytes read, you can mitigate this attack. `io.CopyN()` can specify a size. "},"help":{"markdown":"Detected a possible denial-of-service via a zip bomb attack. By limiting the max bytes read, you can mitigate this attack. `io.CopyN()` can specify a size. \n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.decompression_bomb.potential-dos-via-decompression-bomb)\n - [https://golang.org/pkg/io/#CopyN](https://golang.org/pkg/io/#CopyN)\n - [https://github.com/securego/gosec/blob/master/rules/decompression-bomb.go](https://github.com/securego/gosec/blob/master/rules/decompression-bomb.go)\n","text":"Detected a possible denial-of-service via a zip bomb attack. By limiting the max bytes read, you can mitigate this attack. `io.CopyN()` can specify a size. \nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.decompression_bomb.potential-dos-via-decompression-bomb","id":"go.lang.security.decompression_bomb.potential-dos-via-decompression-bomb","name":"go.lang.security.decompression_bomb.potential-dos-via-decompression-bomb","properties":{"precision":"very-high","tags":["CWE-400: Uncontrolled Resource Consumption","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.decompression_bomb.potential-dos-via-decompression-bomb"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"File traversal when extracting zip archive"},"help":{"markdown":"File traversal when extracting zip archive\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.lang.security.zip.path-traversal-inside-zip-extraction)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"File traversal when extracting zip archive\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.lang.security.zip.path-traversal-inside-zip-extraction","id":"go.lang.security.zip.path-traversal-inside-zip-extraction","name":"go.lang.security.zip.path-traversal-inside-zip-extraction","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: go.lang.security.zip.path-traversal-inside-zip-extraction"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected non-static script inside otto VM. Audit the input to 'VM.Run'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."},"help":{"markdown":"Detected non-static script inside otto VM. Audit the input to 'VM.Run'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/go.otto.security.audit.dangerous-execution.dangerous-execution)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected non-static script inside otto VM. Audit the input to 'VM.Run'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/go.otto.security.audit.dangerous-execution.dangerous-execution","id":"go.otto.security.audit.dangerous-execution.dangerous-execution","name":"go.otto.security.audit.dangerous-execution.dangerous-execution","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: go.otto.security.audit.dangerous-execution.dangerous-execution"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret","id":"java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret","name":"java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"help":{"markdown":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal)\n - [https://www.owasp.org/index.php/Path_Traversal](https://www.owasp.org/index.php/Path_Traversal)\n","text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal","id":"java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal","name":"java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information."},"help":{"markdown":"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.anonymous-ldap-bind.anonymous-ldap-bind)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.anonymous-ldap-bind.anonymous-ldap-bind","id":"java.lang.security.audit.anonymous-ldap-bind.anonymous-ldap-bind","name":"java.lang.security.audit.anonymous-ldap-bind.anonymous-ldap-bind","properties":{"precision":"very-high","tags":["CWE-287: Improper Authentication","LOW CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.anonymous-ldap-bind.anonymous-ldap-bind"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(\"%02X\", ...)' instead."},"help":{"markdown":"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(\"%02X\", ...)' instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion)\n - [https://cwe.mitre.org/data/definitions/704.html](https://cwe.mitre.org/data/definitions/704.html)\n","text":"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(\"%02X\", ...)' instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion","id":"java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion","name":"java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion","properties":{"precision":"very-high","tags":["CWE-704: Incorrect Type Conversion or Cast","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead."},"help":{"markdown":"Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle)\n - [https://capec.mitre.org/data/definitions/463.html](https://capec.mitre.org/data/definitions/463.html)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#cipher-modes](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#cipher-modes)\n - [https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY](https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY)\n","text":"Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle","id":"java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle","name":"java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"A formatted or concatenated string was detected as input to a java.lang.Runtime call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized."},"help":{"markdown":"A formatted or concatenated string was detected as input to a java.lang.Runtime call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"A formatted or concatenated string was detected as input to a java.lang.Runtime call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call","id":"java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call","name":"java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'"},"help":{"markdown":"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly)\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly","id":"java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly","name":"java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly","properties":{"precision":"very-high","tags":["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'"},"help":{"markdown":"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag)\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag","id":"java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag","name":"java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag","properties":{"precision":"very-high","tags":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content."},"help":{"markdown":"When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crlf-injection-logs.crlf-injection-logs)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crlf-injection-logs.crlf-injection-logs","id":"java.lang.security.audit.crlf-injection-logs.crlf-injection-logs","name":"java.lang.security.audit.crlf-injection-logs.crlf-injection-logs","properties":{"precision":"very-high","tags":["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crlf-injection-logs.crlf-injection-logs"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"help":{"markdown":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated)\n - [https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard](https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms)\n","text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated","id":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated","name":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"help":{"markdown":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated)\n - [https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA](https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA)\n","text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated","id":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated","name":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"help":{"markdown":"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.no-null-cipher.no-null-cipher)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.no-null-cipher.no-null-cipher","id":"java.lang.security.audit.crypto.no-null-cipher.no-null-cipher","name":"java.lang.security.audit.crypto.no-null-cipher.no-null-cipher","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.no-null-cipher.no-null-cipher"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Initialization Vectors (IVs) for block ciphers should be randomly generated each time they are used. Using a static IV means the same plaintext encrypts to the same ciphertext every time, weakening the strength of the encryption."},"help":{"markdown":"Initialization Vectors (IVs) for block ciphers should be randomly generated each time they are used. Using a static IV means the same plaintext encrypts to the same ciphertext every time, weakening the strength of the encryption.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector)\n - [https://cwe.mitre.org/data/definitions/329.html](https://cwe.mitre.org/data/definitions/329.html)\n","text":"Initialization Vectors (IVs) for block ciphers should be randomly generated each time they are used. Using a static IV means the same plaintext encrypts to the same ciphertext every time, weakening the strength of the encryption.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector","id":"java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector","name":"java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector","properties":{"precision":"very-high","tags":["CWE-329: Generation of Predictable IV with CBC Mode","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using RSA without OAEP mode weakens the encryption."},"help":{"markdown":"Using RSA without OAEP mode weakens the encryption.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding)\n - [https://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/](https://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/)\n","text":"Using RSA without OAEP mode weakens the encryption.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding","id":"java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding","name":"java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Cryptographic algorithms are notoriously difficult to get right. By implementing a custom message digest, you risk introducing security issues into your program. Use one of the many sound message digests already available to you: MessageDigest sha256Digest = MessageDigest.getInstance(\"SHA256\");"},"help":{"markdown":"Cryptographic algorithms are notoriously difficult to get right. By implementing a custom message digest, you risk introducing security issues into your program. Use one of the many sound message digests already available to you: MessageDigest sha256Digest = MessageDigest.getInstance(\"SHA256\");\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests.avoid-implementing-custom-digests)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#custom-algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#custom-algorithms)\n","text":"Cryptographic algorithms are notoriously difficult to get right. By implementing a custom message digest, you risk introducing security issues into your program. Use one of the many sound message digests already available to you: MessageDigest sha256Digest = MessageDigest.getInstance(\"SHA256\");\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests.avoid-implementing-custom-digests","id":"java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests.avoid-implementing-custom-digests","name":"java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests.avoid-implementing-custom-digests","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests.avoid-implementing-custom-digests"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use HttpClientBuilder instead."},"help":{"markdown":"DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use HttpClientBuilder instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use HttpClientBuilder instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated","id":"java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated","name":"java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Insecure HostnameVerifier implementation detected. This will accept any SSL certificate with any hostname, which creates the possibility for man-in-the-middle attacks."},"help":{"markdown":"Insecure HostnameVerifier implementation detected. This will accept any SSL certificate with any hostname, which creates the possibility for man-in-the-middle attacks.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.insecure-hostname-verifier.insecure-hostname-verifier)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Insecure HostnameVerifier implementation detected. This will accept any SSL certificate with any hostname, which creates the possibility for man-in-the-middle attacks.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.insecure-hostname-verifier.insecure-hostname-verifier","id":"java.lang.security.audit.crypto.ssl.insecure-hostname-verifier.insecure-hostname-verifier","name":"java.lang.security.audit.crypto.ssl.insecure-hostname-verifier.insecure-hostname-verifier","properties":{"precision":"very-high","tags":["CWE-295: Improper Certificate Validation","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.ssl.insecure-hostname-verifier.insecure-hostname-verifier"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected empty trust manager implementations. This is dangerous because it accepts any certificate, enabling man-in-the-middle attacks. Consider using a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https for more information."},"help":{"markdown":"Detected empty trust manager implementations. This is dangerous because it accepts any certificate, enabling man-in-the-middle attacks. Consider using a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https for more information.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.insecure-trust-manager.insecure-trust-manager)\n - [https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https](https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https)\n","text":"Detected empty trust manager implementations. This is dangerous because it accepts any certificate, enabling man-in-the-middle attacks. Consider using a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https for more information.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.insecure-trust-manager.insecure-trust-manager","id":"java.lang.security.audit.crypto.ssl.insecure-trust-manager.insecure-trust-manager","name":"java.lang.security.audit.crypto.ssl.insecure-trust-manager.insecure-trust-manager","properties":{"precision":"very-high","tags":["CWE-295: Improper Certificate Validation","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.ssl.insecure-trust-manager.insecure-trust-manager"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."},"help":{"markdown":"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket","id":"java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket","name":"java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"help":{"markdown":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-md5.use-of-md5)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-md5.use-of-md5","id":"java.lang.security.audit.crypto.use-of-md5.use-of-md5","name":"java.lang.security.audit.crypto.use-of-md5.use-of-md5","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.use-of-md5.use-of-md5"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"help":{"markdown":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-sha1.use-of-sha1)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-sha1.use-of-sha1","id":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1","name":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."},"help":{"markdown":"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.weak-random.weak-random)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.weak-random.weak-random","id":"java.lang.security.audit.crypto.weak-random.weak-random","name":"java.lang.security.audit.crypto.weak-random.weak-random","properties":{"precision":"very-high","tags":["CWE-330: Use of Insufficiently Random Values","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.weak-random.weak-random"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"An expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation."},"help":{"markdown":"An expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.el-injection.el-injection)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"An expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.el-injection.el-injection","id":"java.lang.security.audit.el-injection.el-injection","name":"java.lang.security.audit.el-injection.el-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.el-injection.el-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."},"help":{"markdown":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string)\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n - [https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps](https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps)\n - [https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement](https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement)\n","text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string","id":"java.lang.security.audit.formatted-sql-string.formatted-sql-string","name":"java.lang.security.audit.formatted-sql-string.formatted-sql-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.formatted-sql-string.formatted-sql-string"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Older Java application servers are vulnerable to HTTP response splitting, which may occur if an HTTP request can be injected with CRLF characters. This finding is reported for completeness; it is recommended to ensure your environment is not affected by testing this yourself."},"help":{"markdown":"Older Java application servers are vulnerable to HTTP response splitting, which may occur if an HTTP request can be injected with CRLF characters. This finding is reported for completeness; it is recommended to ensure your environment is not affected by testing this yourself.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.http-response-splitting.http-response-splitting)\n - [https://www.owasp.org/index.php/HTTP_Response_Splitting](https://www.owasp.org/index.php/HTTP_Response_Splitting)\n","text":"Older Java application servers are vulnerable to HTTP response splitting, which may occur if an HTTP request can be injected with CRLF characters. This finding is reported for completeness; it is recommended to ensure your environment is not affected by testing this yourself.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.http-response-splitting.http-response-splitting","id":"java.lang.security.audit.http-response-splitting.http-response-splitting","name":"java.lang.security.audit.http-response-splitting.http-response-splitting","properties":{"precision":"very-high","tags":["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.http-response-splitting.http-response-splitting"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Insecure SMTP connection detected. This connection will trust any SSL certificate. Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'."},"help":{"markdown":"Insecure SMTP connection detected. This connection will trust any SSL certificate. Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Insecure SMTP connection detected. This connection will trust any SSL certificate. Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection","id":"java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection","name":"java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection","properties":{"precision":"very-high","tags":["CWE-297: Improper Validation of Certificate with Host Mismatch","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Possible JDBC injection detected. Use the parameterized query feature available in queryForObject instead of concatenating or formatting strings: 'jdbc.queryForObject(\"select * from table where name = ?\", Integer.class, parameterName);'"},"help":{"markdown":"Possible JDBC injection detected. Use the parameterized query feature available in queryForObject instead of concatenating or formatting strings: 'jdbc.queryForObject(\"select * from table where name = ?\", Integer.class, parameterName);'\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.jdbc-sql-formatted-string.jdbc-sql-formatted-string)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Possible JDBC injection detected. Use the parameterized query feature available in queryForObject instead of concatenating or formatting strings: 'jdbc.queryForObject(\"select * from table where name = ?\", Integer.class, parameterName);'\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.jdbc-sql-formatted-string.jdbc-sql-formatted-string","id":"java.lang.security.audit.jdbc-sql-formatted-string.jdbc-sql-formatted-string","name":"java.lang.security.audit.jdbc-sql-formatted-string.jdbc-sql-formatted-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.jdbc-sql-formatted-string.jdbc-sql-formatted-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"An object-returning LDAP search will allow attackers to control the LDAP response. This could lead to Remote Code Execution."},"help":{"markdown":"An object-returning LDAP search will allow attackers to control the LDAP response. This could lead to Remote Code Execution.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.ldap-entry-poisoning.ldap-entry-poisoning)\n - [https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf](https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf)\n - [https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n","text":"An object-returning LDAP search will allow attackers to control the LDAP response. This could lead to Remote Code Execution.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.ldap-entry-poisoning.ldap-entry-poisoning","id":"java.lang.security.audit.ldap-entry-poisoning.ldap-entry-poisoning","name":"java.lang.security.audit.ldap-entry-poisoning.ldap-entry-poisoning","properties":{"precision":"very-high","tags":["CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.ldap-entry-poisoning.ldap-entry-poisoning"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected non-constant data passed into an LDAP query. If this data can be controlled by an external user, this is an LDAP injection. Ensure data passed to an LDAP query is not controllable; or properly sanitize the data."},"help":{"markdown":"Detected non-constant data passed into an LDAP query. If this data can be controlled by an external user, this is an LDAP injection. Ensure data passed to an LDAP query is not controllable; or properly sanitize the data.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.ldap-injection.ldap-injection)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected non-constant data passed into an LDAP query. If this data can be controlled by an external user, this is an LDAP injection. Ensure data passed to an LDAP query is not controllable; or properly sanitize the data.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.ldap-injection.ldap-injection","id":"java.lang.security.audit.ldap-injection.ldap-injection","name":"java.lang.security.audit.ldap-injection.ldap-injection","properties":{"precision":"very-high","tags":["CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.ldap-injection.ldap-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."},"help":{"markdown":"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.object-deserialization.object-deserialization)\n - [https://www.owasp.org/index.php/Deserialization_of_untrusted_data](https://www.owasp.org/index.php/Deserialization_of_untrusted_data)\n - [https://www.oracle.com/java/technologies/javase/seccodeguide.html#8](https://www.oracle.com/java/technologies/javase/seccodeguide.html#8)\n","text":"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.object-deserialization.object-deserialization","id":"java.lang.security.audit.object-deserialization.object-deserialization","name":"java.lang.security.audit.object-deserialization.object-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.object-deserialization.object-deserialization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected file permissions that are overly permissive (read, write, and execute). It is generally a bad practices to set overly permissive file permission such as read+write+exec for all users. If the file affected is a configuration, a binary, a script or sensitive data, it can lead to privilege escalation or information leakage. Instead, follow the principle of least privilege and give users only the  permissions they need."},"help":{"markdown":"Detected file permissions that are overly permissive (read, write, and execute). It is generally a bad practices to set overly permissive file permission such as read+write+exec for all users. If the file affected is a configuration, a binary, a script or sensitive data, it can lead to privilege escalation or information leakage. Instead, follow the principle of least privilege and give users only the  permissions they need.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.overly-permissive-file-permission.overly-permissive-file-permission)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Detected file permissions that are overly permissive (read, write, and execute). It is generally a bad practices to set overly permissive file permission such as read+write+exec for all users. If the file affected is a configuration, a binary, a script or sensitive data, it can lead to privilege escalation or information leakage. Instead, follow the principle of least privilege and give users only the  permissions they need.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.overly-permissive-file-permission.overly-permissive-file-permission","id":"java.lang.security.audit.overly-permissive-file-permission.overly-permissive-file-permission","name":"java.lang.security.audit.overly-permissive-file-permission.overly-permissive-file-permission","properties":{"precision":"very-high","tags":["CWE-276: Incorrect Default Permissions","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.overly-permissive-file-permission.overly-permissive-file-permission"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"https://find-sec-bugs.github.io/bugs.htm#PERMISSIVE_CORS Permissive CORS policy will allow a malicious application to communicate with the victim application in an inappropriate way, leading to spoofing, data theft, relay and other attacks."},"help":{"markdown":"https://find-sec-bugs.github.io/bugs.htm#PERMISSIVE_CORS Permissive CORS policy will allow a malicious application to communicate with the victim application in an inappropriate way, leading to spoofing, data theft, relay and other attacks.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.permissive-cors.permissive-cors)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"https://find-sec-bugs.github.io/bugs.htm#PERMISSIVE_CORS Permissive CORS policy will allow a malicious application to communicate with the victim application in an inappropriate way, leading to spoofing, data theft, relay and other attacks.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.permissive-cors.permissive-cors","id":"java.lang.security.audit.permissive-cors.permissive-cors","name":"java.lang.security.audit.permissive-cors.permissive-cors","properties":{"precision":"very-high","tags":["CWE-183: Permissive List of Allowed Inputs","LOW CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.permissive-cors.permissive-cors"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected potential code injection using ScriptEngine. Ensure user-controlled data cannot enter '.eval()', otherwise, this is a code injection vulnerability."},"help":{"markdown":"Detected potential code injection using ScriptEngine. Ensure user-controlled data cannot enter '.eval()', otherwise, this is a code injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.script-engine-injection.script-engine-injection)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected potential code injection using ScriptEngine. Ensure user-controlled data cannot enter '.eval()', otherwise, this is a code injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.script-engine-injection.script-engine-injection","id":"java.lang.security.audit.script-engine-injection.script-engine-injection","name":"java.lang.security.audit.script-engine-injection.script-engine-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.script-engine-injection.script-engine-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"help":{"markdown":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request)\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n","text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request","id":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request","name":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","HIGH CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"help":{"markdown":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request","id":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request","name":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"help":{"markdown":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request)\n - [https://sensei.securecodewarrior.com/recipes/scw%3Ajava%3ALDAP-injection](https://sensei.securecodewarrior.com/recipes/scw%3Ajava%3ALDAP-injection)\n","text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request","id":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request","name":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request","properties":{"precision":"very-high","tags":["CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"help":{"markdown":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request","id":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request","name":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request","properties":{"precision":"very-high","tags":["CWE-501: Trust Boundary Violation","MEDIUM CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"help":{"markdown":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request","id":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request","name":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request","properties":{"precision":"very-high","tags":["CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs."},"help":{"markdown":"Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect","id":"java.lang.security.audit.unvalidated-redirect.unvalidated-redirect","name":"java.lang.security.audit.unvalidated-redirect.unvalidated-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.unvalidated-redirect.unvalidated-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"URL rewriting has significant security risks. Since session ID appears in the URL, it may be easily seen by third parties."},"help":{"markdown":"URL rewriting has significant security risks. Since session ID appears in the URL, it may be easily seen by third parties.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.url-rewriting.url-rewriting)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"URL rewriting has significant security risks. Since session ID appears in the URL, it may be easily seen by third parties.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.url-rewriting.url-rewriting","id":"java.lang.security.audit.url-rewriting.url-rewriting","name":"java.lang.security.audit.url-rewriting.url-rewriting","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.url-rewriting.url-rewriting"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\"TLSv1.2\") for the best security."},"help":{"markdown":"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\"TLSv1.2\") for the best security.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.weak-ssl-context.weak-ssl-context)\n - [https://tools.ietf.org/html/rfc7568](https://tools.ietf.org/html/rfc7568)\n - [https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html](https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html)\n","text":"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\"TLSv1.2\") for the best security.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.weak-ssl-context.weak-ssl-context","id":"java.lang.security.audit.weak-ssl-context.weak-ssl-context","name":"java.lang.security.audit.weak-ssl-context.weak-ssl-context","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.weak-ssl-context.weak-ssl-context"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"XMLDecoder should not be used to parse untrusted data. Deserializing user input can lead to arbitrary code execution. Use an alternative and explicitly disable external entities. See https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html for alternatives and vulnerability prevention."},"help":{"markdown":"XMLDecoder should not be used to parse untrusted data. Deserializing user input can lead to arbitrary code execution. Use an alternative and explicitly disable external entities. See https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html for alternatives and vulnerability prevention.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.xml-decoder.xml-decoder)\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n","text":"XMLDecoder should not be used to parse untrusted data. Deserializing user input can lead to arbitrary code execution. Use an alternative and explicitly disable external entities. See https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html for alternatives and vulnerability prevention.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.xml-decoder.xml-decoder","id":"java.lang.security.audit.xml-decoder.xml-decoder","name":"java.lang.security.audit.xml-decoder.xml-decoder","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.xml-decoder.xml-decoder"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"help":{"markdown":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer)\n - [https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html](https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html)\n","text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer","id":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer","name":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"It looks like you're using an implementation of XSSRequestWrapper from dzone. (https://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html) The XSS filtering in this code is not secure and can be bypassed by malicious actors. It is recommended to use a stack that automatically escapes in your view or templates instead of filtering yourself."},"help":{"markdown":"It looks like you're using an implementation of XSSRequestWrapper from dzone. (https://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html) The XSS filtering in this code is not secure and can be bypassed by malicious actors. It is recommended to use a stack that automatically escapes in your view or templates instead of filtering yourself.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.xssrequestwrapper-is-insecure.xssrequestwrapper-is-insecure)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"It looks like you're using an implementation of XSSRequestWrapper from dzone. (https://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html) The XSS filtering in this code is not secure and can be bypassed by malicious actors. It is recommended to use a stack that automatically escapes in your view or templates instead of filtering yourself.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.xssrequestwrapper-is-insecure.xssrequestwrapper-is-insecure","id":"java.lang.security.audit.xssrequestwrapper-is-insecure.xssrequestwrapper-is-insecure","name":"java.lang.security.audit.xssrequestwrapper-is-insecure.xssrequestwrapper-is-insecure","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.xssrequestwrapper-is-insecure.xssrequestwrapper-is-insecure"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"help":{"markdown":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal)\n - [https://www.owasp.org/index.php/Path_Traversal](https://www.owasp.org/index.php/Path_Traversal)\n","text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal","id":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal","name":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'."},"help":{"markdown":"Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss","id":"java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss","name":"java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"XML external entities are enabled for this XMLInputFactory. This is vulnerable to XML external entity attacks. Disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false."},"help":{"markdown":"XML external entities are enabled for this XMLInputFactory. This is vulnerable to XML external entity attacks. Disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.xmlinputfactory-external-entities-enabled.xmlinputfactory-external-entities-enabled)\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf](https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf)\n","text":"XML external entities are enabled for this XMLInputFactory. This is vulnerable to XML external entity attacks. Disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.xmlinputfactory-external-entities-enabled.xmlinputfactory-external-entities-enabled","id":"java.lang.security.xmlinputfactory-external-entities-enabled.xmlinputfactory-external-entities-enabled","name":"java.lang.security.xmlinputfactory-external-entities-enabled.xmlinputfactory-external-entities-enabled","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.xmlinputfactory-external-entities-enabled.xmlinputfactory-external-entities-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false."},"help":{"markdown":"XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe)\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf](https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf)\n - [https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#xmlinputfactory-a-stax-parser](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#xmlinputfactory-a-stax-parser)\n","text":"XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe","id":"java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe","name":"java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","MEDIUM CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Using an arbitrary object ('$PARAMTYPE $PARAM') with Java RMI is an insecure deserialization vulnerability. This object can be manipulated by a malicious actor allowing them to execute code on your system. Instead, use an integer ID to look up your object, or consider alternative serialization schemes such as JSON."},"help":{"markdown":"Using an arbitrary object ('$PARAMTYPE $PARAM') with Java RMI is an insecure deserialization vulnerability. This object can be manipulated by a malicious actor allowing them to execute code on your system. Instead, use an integer ID to look up your object, or consider alternative serialization schemes such as JSON.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.rmi.security.server-dangerous-object-deserialization.server-dangerous-object-deserialization)\n - [https://frohoff.github.io/appseccali-marshalling-pickles/](https://frohoff.github.io/appseccali-marshalling-pickles/)\n - [https://book.hacktricks.xyz/network-services-pentesting/1099-pentesting-java-rmi](https://book.hacktricks.xyz/network-services-pentesting/1099-pentesting-java-rmi)\n - [https://youtu.be/t_aw1mDNhzI](https://youtu.be/t_aw1mDNhzI)\n - [https://github.com/qtc-de/remote-method-guesser](https://github.com/qtc-de/remote-method-guesser)\n - [https://github.com/openjdk/jdk/blob/master/src/java.rmi/share/classes/sun/rmi/server/UnicastRef.java#L303C4-L331](https://github.com/openjdk/jdk/blob/master/src/java.rmi/share/classes/sun/rmi/server/UnicastRef.java#L303C4-L331)\n","text":"Using an arbitrary object ('$PARAMTYPE $PARAM') with Java RMI is an insecure deserialization vulnerability. This object can be manipulated by a malicious actor allowing them to execute code on your system. Instead, use an integer ID to look up your object, or consider alternative serialization schemes such as JSON.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.rmi.security.server-dangerous-object-deserialization.server-dangerous-object-deserialization","id":"java.rmi.security.server-dangerous-object-deserialization.server-dangerous-object-deserialization","name":"java.rmi.security.server-dangerous-object-deserialization.server-dangerous-object-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: java.rmi.security.server-dangerous-object-deserialization.server-dangerous-object-deserialization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation."},"help":{"markdown":"A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.spring.security.audit.spel-injection.spel-injection)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.spring.security.audit.spel-injection.spel-injection","id":"java.spring.security.audit.spel-injection.spel-injection","name":"java.spring.security.audit.spel-injection.spel-injection","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.spring.security.audit.spel-injection.spel-injection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"CSRF protection is disabled for this configuration. This is a security risk."},"help":{"markdown":"CSRF protection is disabled for this configuration. This is a security risk.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"CSRF protection is disabled for this configuration. This is a security risk.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled","id":"java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled","name":"java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Application redirects a user to a destination URL specified by a user supplied parameter that is not validated."},"help":{"markdown":"Application redirects a user to a destination URL specified by a user supplied parameter that is not validated.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Application redirects a user to a destination URL specified by a user supplied parameter that is not validated.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect","id":"java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect","name":"java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."},"help":{"markdown":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping)\n - [https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING](https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING)\n","text":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","id":"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","name":"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret","id":"javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret","name":"javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"It looks like '$UNK' is read from user input and it is used to as a redirect. Ensure '$UNK' is not externally controlled, otherwise this is an open redirect."},"help":{"markdown":"It looks like '$UNK' is read from user input and it is used to as a redirect. Ensure '$UNK' is not externally controlled, otherwise this is an open redirect.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"It looks like '$UNK' is read from user input and it is used to as a redirect. Ensure '$UNK' is not externally controlled, otherwise this is an open redirect.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect","id":"javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect","name":"javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret","id":"javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret","name":"javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."},"help":{"markdown":"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection)\n - [https://blog.gopheracademy.com/advent-2017/go-grpc-beyond-basics/#:~:text=disables%20transport%20security](https://blog.gopheracademy.com/advent-2017/go-grpc-beyond-basics/#:~:text=disables%20transport%20security)\n","text":"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection","id":"javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection","name":"javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret","id":"javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret","name":"javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"help":{"markdown":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.jose.security.jwt-none-alg.jwt-none-alg)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.jose.security.jwt-none-alg.jwt-none-alg","id":"javascript.jose.security.jwt-none-alg.jwt-none-alg","name":"javascript.jose.security.jwt-none-alg.jwt-none-alg","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.jose.security.jwt-none-alg.jwt-none-alg"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret","id":"javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret","name":"javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"help":{"markdown":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg","id":"javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg","name":"javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data."},"help":{"markdown":"Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag)\n - [https://www.developsec.com/2017/11/09/xss-in-a-script-tag/](https://www.developsec.com/2017/11/09/xss-in-a-script-tag/)\n - [https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68](https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68)\n","text":"Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag","id":"javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag","name":"javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer."},"help":{"markdown":"Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.detect-buffer-noassert.detect-buffer-noassert)\n - [https://cwe.mitre.org/data/definitions/119.html](https://cwe.mitre.org/data/definitions/119.html)\n","text":"Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.lang.security.detect-buffer-noassert.detect-buffer-noassert","id":"javascript.lang.security.detect-buffer-noassert.detect-buffer-noassert","name":"javascript.lang.security.detect-buffer-noassert.detect-buffer-noassert","properties":{"precision":"very-high","tags":["CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer","LOW CONFIDENCE","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.lang.security.detect-buffer-noassert.detect-buffer-noassert"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected calls to child_process from a function argument `$FUNC`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. "},"help":{"markdown":"Detected calls to child_process from a function argument `$FUNC`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. \n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.detect-child-process.detect-child-process)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions](https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions)\n","text":"Detected calls to child_process from a function argument `$FUNC`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. \nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.lang.security.detect-child-process.detect-child-process","id":"javascript.lang.security.detect-child-process.detect-child-process","name":"javascript.lang.security.detect-child-process.detect-child-process","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.lang.security.detect-child-process.detect-child-process"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Markup escaping disabled. This can be used with some template engines to escape disabling of HTML entities, which can lead to XSS attacks."},"help":{"markdown":"Markup escaping disabled. This can be used with some template engines to escape disabling of HTML entities, which can lead to XSS attacks.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Markup escaping disabled. This can be used with some template engines to escape disabling of HTML entities, which can lead to XSS attacks.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape","id":"javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape","name":"javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape","properties":{"precision":"very-high","tags":["CWE-116: Improper Encoding or Escaping of Output","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input."},"help":{"markdown":"Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression)\n - [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!)\n","text":"Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression","id":"javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression","name":"javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of express.csrf() middleware before express.methodOverride(). This can allow GET requests (which are not checked by csrf) to turn into POST requests later."},"help":{"markdown":"Detected use of express.csrf() middleware before express.methodOverride(). This can allow GET requests (which are not checked by csrf) to turn into POST requests later.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.detect-no-csrf-before-method-override.detect-no-csrf-before-method-override)\n - [https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/bypass-connect-csrf-protection-by-abusing.md](https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/bypass-connect-csrf-protection-by-abusing.md)\n","text":"Detected use of express.csrf() middleware before express.methodOverride(). This can allow GET requests (which are not checked by csrf) to turn into POST requests later.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.lang.security.detect-no-csrf-before-method-override.detect-no-csrf-before-method-override","id":"javascript.lang.security.detect-no-csrf-before-method-override.detect-no-csrf-before-method-override","name":"javascript.lang.security.detect-no-csrf-before-method-override.detect-no-csrf-before-method-override","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.lang.security.detect-no-csrf-before-method-override.detect-no-csrf-before-method-override"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers."},"help":{"markdown":"Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.detect-pseudorandombytes.detect-pseudoRandomBytes)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.lang.security.detect-pseudorandombytes.detect-pseudoRandomBytes","id":"javascript.lang.security.detect-pseudorandombytes.detect-pseudoRandomBytes","name":"javascript.lang.security.detect-pseudorandombytes.detect-pseudoRandomBytes","properties":{"precision":"very-high","tags":["CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.lang.security.detect-pseudorandombytes.detect-pseudoRandomBytes"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Git allows shell commands to be specified in ext URLs for remote repositories. For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command to try to connect to a remote repository. Make sure that the URL is not controlled by external input."},"help":{"markdown":"Git allows shell commands to be specified in ext URLs for remote repositories. For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command to try to connect to a remote repository. Make sure that the URL is not controlled by external input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.spawn-git-clone.spawn-git-clone)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Git allows shell commands to be specified in ext URLs for remote repositories. For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command to try to connect to a remote repository. Make sure that the URL is not controlled by external input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.lang.security.spawn-git-clone.spawn-git-clone","id":"javascript.lang.security.spawn-git-clone.spawn-git-clone","name":"javascript.lang.security.spawn-git-clone.spawn-git-clone","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.lang.security.spawn-git-clone.spawn-git-clone"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"},"help":{"markdown":"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.node-expat.security.audit.expat-xxe.expat-xxe)\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.node-expat.security.audit.expat-xxe.expat-xxe","id":"javascript.node-expat.security.audit.expat-xxe.expat-xxe","name":"javascript.node-expat.security.audit.expat-xxe.expat-xxe","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.node-expat.security.audit.expat-xxe.expat-xxe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret","id":"javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret","name":"javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do anything with custom DTD entity definitions. If you're implementing a custom DTD entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities, or be absolutely sure that external entities received from a trusted source while processing XML."},"help":{"markdown":"Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do anything with custom DTD entity definitions. If you're implementing a custom DTD entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities, or be absolutely sure that external entities received from a trusted source while processing XML.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.sax.security.audit.sax-xxe.sax-xxe)\n - [https://github.com/Leonidas-from-XIV/node-xml2js/issues/415](https://github.com/Leonidas-from-XIV/node-xml2js/issues/415)\n - [https://github.com/isaacs/sax-js](https://github.com/isaacs/sax-js)\n","text":"Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do anything with custom DTD entity definitions. If you're implementing a custom DTD entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities, or be absolutely sure that external entities received from a trusted source while processing XML.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.sax.security.audit.sax-xxe.sax-xxe","id":"javascript.sax.security.audit.sax-xxe.sax-xxe","name":"javascript.sax.security.audit.sax-xxe.sax-xxe","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.sax.security.audit.sax-xxe.sax-xxe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"},"help":{"markdown":"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe)\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe","id":"javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe","name":"javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected public S3 bucket policy. This policy allows anyone to access certain properties of or items in the bucket. Do not do this unless you will never have sensitive data inside the bucket."},"help":{"markdown":"Detected public S3 bucket policy. This policy allows anyone to access certain properties of or items in the bucket. Do not do this unless you will never have sensitive data inside the bucket.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/json.aws.security.public-s3-policy-statement.public-s3-policy-statement)\n - [https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteAccessPermissionsReqd.html](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteAccessPermissionsReqd.html)\n","text":"Detected public S3 bucket policy. This policy allows anyone to access certain properties of or items in the bucket. Do not do this unless you will never have sensitive data inside the bucket.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/json.aws.security.public-s3-policy-statement.public-s3-policy-statement","id":"json.aws.security.public-s3-policy-statement.public-s3-policy-statement","name":"json.aws.security.public-s3-policy-statement.public-s3-policy-statement","properties":{"precision":"very-high","tags":["CWE-264: CWE CATEGORY: Permissions, Privileges, and Access Controls","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: json.aws.security.public-s3-policy-statement.public-s3-policy-statement"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. It is recommended to rotate the secret and retrieve them from a secure secret vault or Hardware Security Module (HSM), alternatively environment variables can be used if allowed by your company policy."},"help":{"markdown":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. It is recommended to rotate the secret and retrieve them from a secure secret vault or Hardware Security Module (HSM), alternatively environment variables can be used if allowed by your company policy.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/kotlin.gradle.security.build-gradle-password-hardcoded.build-gradle-password-hardcoded)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. It is recommended to rotate the secret and retrieve them from a secure secret vault or Hardware Security Module (HSM), alternatively environment variables can be used if allowed by your company policy.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/kotlin.gradle.security.build-gradle-password-hardcoded.build-gradle-password-hardcoded","id":"kotlin.gradle.security.build-gradle-password-hardcoded.build-gradle-password-hardcoded","name":"kotlin.gradle.security.build-gradle-password-hardcoded.build-gradle-password-hardcoded","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: kotlin.gradle.security.build-gradle-password-hardcoded.build-gradle-password-hardcoded"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information."},"help":{"markdown":"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/kotlin.lang.security.anonymous-ldap-bind.anonymous-ldap-bind)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/kotlin.lang.security.anonymous-ldap-bind.anonymous-ldap-bind","id":"kotlin.lang.security.anonymous-ldap-bind.anonymous-ldap-bind","name":"kotlin.lang.security.anonymous-ldap-bind.anonymous-ldap-bind","properties":{"precision":"very-high","tags":["CWE-287: Improper Authentication","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: kotlin.lang.security.anonymous-ldap-bind.anonymous-ldap-bind"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY."},"help":{"markdown":"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/kotlin.lang.security.ecb-cipher.ecb-cipher)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/kotlin.lang.security.ecb-cipher.ecb-cipher","id":"kotlin.lang.security.ecb-cipher.ecb-cipher","name":"kotlin.lang.security.ecb-cipher.ecb-cipher","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: kotlin.lang.security.ecb-cipher.ecb-cipher"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"help":{"markdown":"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/kotlin.lang.security.no-null-cipher.no-null-cipher)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/kotlin.lang.security.no-null-cipher.no-null-cipher","id":"kotlin.lang.security.no-null-cipher.no-null-cipher","name":"kotlin.lang.security.no-null-cipher.no-null-cipher","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: kotlin.lang.security.no-null-cipher.no-null-cipher"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"help":{"markdown":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/kotlin.lang.security.use-of-md5.use-of-md5)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/kotlin.lang.security.use-of-md5.use-of-md5","id":"kotlin.lang.security.use-of-md5.use-of-md5","name":"kotlin.lang.security.use-of-md5.use-of-md5","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: kotlin.lang.security.use-of-md5.use-of-md5"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"help":{"markdown":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/kotlin.lang.security.use-of-sha1.use-of-sha1)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/kotlin.lang.security.use-of-sha1.use-of-sha1","id":"kotlin.lang.security.use-of-sha1.use-of-sha1","name":"kotlin.lang.security.use-of-sha1.use-of-sha1","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: kotlin.lang.security.use-of-sha1.use-of-sha1"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"RSA keys should be at least 2048 bits based on NIST recommendation."},"help":{"markdown":"RSA keys should be at least 2048 bits based on NIST recommendation.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/kotlin.lang.security.weak-rsa.use-of-weak-rsa-key)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms)\n","text":"RSA keys should be at least 2048 bits based on NIST recommendation.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/kotlin.lang.security.weak-rsa.use-of-weak-rsa-key","id":"kotlin.lang.security.weak-rsa.use-of-weak-rsa-key","name":"kotlin.lang.security.weak-rsa.use-of-weak-rsa-key","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: kotlin.lang.security.weak-rsa.use-of-weak-rsa-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found a formatted string in BashOperator: $CMD. This could be vulnerable to injection. Be extra sure your variables are not controllable by external sources."},"help":{"markdown":"Found a formatted string in BashOperator: $CMD. This could be vulnerable to injection. Be extra sure your variables are not controllable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.airflow.security.audit.formatted-string-bashoperator.formatted-string-bashoperator)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Found a formatted string in BashOperator: $CMD. This could be vulnerable to injection. Be extra sure your variables are not controllable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.airflow.security.audit.formatted-string-bashoperator.formatted-string-bashoperator","id":"python.airflow.security.audit.formatted-string-bashoperator.formatted-string-bashoperator","name":"python.airflow.security.audit.formatted-string-bashoperator.formatted-string-bashoperator","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.airflow.security.audit.formatted-string-bashoperator.formatted-string-bashoperator"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.boto3.security.hardcoded-token.hardcoded-token)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n - [https://bento.dev/checks/boto3/hardcoded-access-token/](https://bento.dev/checks/boto3/hardcoded-access-token/)\n - [https://aws.amazon.com/blogs/security/what-to-do-if-you-inadvertently-expose-an-aws-access-key/](https://aws.amazon.com/blogs/security/what-to-do-if-you-inadvertently-expose-an-aws-access-key/)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.boto3.security.hardcoded-token.hardcoded-token","id":"python.boto3.security.hardcoded-token.hardcoded-token","name":"python.boto3.security.hardcoded-token.hardcoded-token","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: python.boto3.security.hardcoded-token.hardcoded-token"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"IDEA (International Data Encryption Algorithm) is a block cipher created in 1991.  It is an optional component of the OpenPGP standard. This cipher is susceptible to attacks when using weak keys.  It is recommended that you do not use this cipher for new applications. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead."},"help":{"markdown":"IDEA (International Data Encryption Algorithm) is a block cipher created in 1991.  It is an optional component of the OpenPGP standard. This cipher is susceptible to attacks when using weak keys.  It is recommended that you do not use this cipher for new applications. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea)\n - [https://tools.ietf.org/html/rfc5469](https://tools.ietf.org/html/rfc5469)\n - [https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#cryptography.hazmat.primitives.ciphers.algorithms.IDEA](https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#cryptography.hazmat.primitives.ciphers.algorithms.IDEA)\n","text":"IDEA (International Data Encryption Algorithm) is a block cipher created in 1991.  It is an optional component of the OpenPGP standard. This cipher is susceptible to attacks when using weak keys.  It is recommended that you do not use this cipher for new applications. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea","id":"python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea","name":"python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"ECB (Electronic Code Book) is the simplest mode of operation for block ciphers.  Each block of data is encrypted in the same way.  This means identical plaintext blocks will always result in identical ciphertext blocks, which can leave significant patterns in the output. Use a different, cryptographically strong mode instead, such as GCM."},"help":{"markdown":"ECB (Electronic Code Book) is the simplest mode of operation for block ciphers.  Each block of data is encrypted in the same way.  This means identical plaintext blocks will always result in identical ciphertext blocks, which can leave significant patterns in the output. Use a different, cryptographically strong mode instead, such as GCM.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb)\n - [https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#insecure-modes](https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#insecure-modes)\n - [https://crypto.stackexchange.com/questions/20941/why-shouldnt-i-use-ecb-encryption](https://crypto.stackexchange.com/questions/20941/why-shouldnt-i-use-ecb-encryption)\n","text":"ECB (Electronic Code Book) is the simplest mode of operation for block ciphers.  Each block of data is encrypted in the same way.  This means identical plaintext blocks will always result in identical ciphertext blocks, which can leave significant patterns in the output. Use a different, cryptographically strong mode instead, such as GCM.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb","id":"python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb","name":"python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"help":{"markdown":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1)\n - [https://cryptography.io/en/latest/hazmat/primitives/cryptographic-hashes/#sha-1](https://cryptography.io/en/latest/hazmat/primitives/cryptographic-hashes/#sha-1)\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n","text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1","id":"python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1","name":"python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an insufficient curve size for EC. NIST recommends a key size of 224 or higher. For example, use 'ec.SECP256R1'."},"help":{"markdown":"Detected an insufficient curve size for EC. NIST recommends a key size of 224 or higher. For example, use 'ec.SECP256R1'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size)\n - [https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf)\n - [https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/#elliptic-curves](https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/#elliptic-curves)\n","text":"Detected an insufficient curve size for EC. NIST recommends a key size of 224 or higher. For example, use 'ec.SECP256R1'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size","id":"python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size","name":"python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities."},"help":{"markdown":"Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n","text":"Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization","id":"python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization","name":"python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead."},"help":{"markdown":"'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe)\n - [https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe](https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe)\n - [https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html](https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html)\n","text":"'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe","id":"python.django.security.audit.avoid-mark-safe.avoid-mark-safe","name":"python.django.security.audit.avoid-mark-safe.avoid-mark-safe","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator."},"help":{"markdown":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.audit.csrf-exempt.no-csrf-exempt"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a Custom Expression ''$EXPRESSION'' calling ''as_sql(...).'' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized."},"help":{"markdown":"Detected a Custom Expression ''$EXPRESSION'' calling ''as_sql(...).'' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql)\n - [https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.Func.as_sql](https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.Func.as_sql)\n - [https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/](https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/)\n","text":"Detected a Custom Expression ''$EXPRESSION'' calling ''as_sql(...).'' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql","id":"python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql","name":"python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found extension of custom expression: $CLASS. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized."},"help":{"markdown":"Found extension of custom expression: $CLASS. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.extends-custom-expression.extends-custom-expression)\n - [https://docs.djangoproject.com/en/3.0/ref/models/expressions/#avoiding-sql-injection](https://docs.djangoproject.com/en/3.0/ref/models/expressions/#avoiding-sql-injection)\n - [https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/](https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/)\n","text":"Found extension of custom expression: $CLASS. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.audit.extends-custom-expression.extends-custom-expression","id":"python.django.security.audit.extends-custom-expression.extends-custom-expression","name":"python.django.security.audit.extends-custom-expression.extends-custom-expression","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.audit.extends-custom-expression.extends-custom-expression"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"QuerySet.extra' does not provide safeguards against SQL injection and requires very careful use. SQL injection can lead to critical data being stolen by attackers. Instead of using '.extra', use the Django ORM and parameterized queries such as `People.objects.get(name='Bob')`."},"help":{"markdown":"QuerySet.extra' does not provide safeguards against SQL injection and requires very careful use. SQL injection can lead to critical data being stolen by attackers. Instead of using '.extra', use the Django ORM and parameterized queries such as `People.objects.get(name='Bob')`.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.query-set-extra.avoid-query-set-extra)\n - [https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.extra](https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.extra)\n - [https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/](https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/)\n","text":"QuerySet.extra' does not provide safeguards against SQL injection and requires very careful use. SQL injection can lead to critical data being stolen by attackers. Instead of using '.extra', use the Django ORM and parameterized queries such as `People.objects.get(name='Bob')`.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.audit.query-set-extra.avoid-query-set-extra","id":"python.django.security.audit.query-set-extra.avoid-query-set-extra","name":"python.django.security.audit.query-set-extra.avoid-query-set-extra","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.audit.query-set-extra.avoid-query-set-extra"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the use of 'RawSQL' or 'raw' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name='Bob')`"},"help":{"markdown":"Detected the use of 'RawSQL' or 'raw' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name='Bob')`\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.raw-query.avoid-raw-sql)\n - [https://docs.djangoproject.com/en/3.0/ref/models/expressions/#raw-sql-expressions](https://docs.djangoproject.com/en/3.0/ref/models/expressions/#raw-sql-expressions)\n - [https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/](https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/)\n","text":"Detected the use of 'RawSQL' or 'raw' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name='Bob')`\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.audit.raw-query.avoid-raw-sql","id":"python.django.security.audit.raw-query.avoid-raw-sql","name":"python.django.security.audit.raw-query.avoid-raw-sql","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.audit.raw-query.avoid-raw-sql"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False. If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None."},"help":{"markdown":"Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False. If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.secure-cookies.django-secure-set-cookie)\n - [https://docs.djangoproject.com/en/3.0/ref/request-response/#django.http.HttpResponse.set_cookie](https://docs.djangoproject.com/en/3.0/ref/request-response/#django.http.HttpResponse.set_cookie)\n - [https://semgrep.dev/blog/2020/bento-check-keeping-cookies-safe-in-flask/](https://semgrep.dev/blog/2020/bento-check-keeping-cookies-safe-in-flask/)\n - [https://bento.dev/checks/flask/secure-set-cookie/](https://bento.dev/checks/flask/secure-set-cookie/)\n","text":"Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False. If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.audit.secure-cookies.django-secure-set-cookie","id":"python.django.security.audit.secure-cookies.django-secure-set-cookie","name":"python.django.security.audit.secure-cookies.django-secure-set-cookie","properties":{"precision":"very-high","tags":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.audit.secure-cookies.django-secure-set-cookie"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The password on '$MODEL' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information."},"help":{"markdown":"The password on '$MODEL' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password)\n - [https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#module-django.contrib.auth.password_validation](https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#module-django.contrib.auth.password_validation)\n","text":"The password on '$MODEL' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password","id":"python.django.security.audit.unvalidated-password.unvalidated-password","name":"python.django.security.audit.unvalidated-password.unvalidated-password","properties":{"precision":"very-high","tags":["CWE-521: Weak Password Requirements","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.audit.unvalidated-password.unvalidated-password"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a Context with autoescape disabled. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'."},"help":{"markdown":"Detected a Context with autoescape disabled. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.xss.context-autoescape-off.context-autoescape-off)\n - [https://docs.djangoproject.com/en/3.1/ref/settings/#templates](https://docs.djangoproject.com/en/3.1/ref/settings/#templates)\n - [https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates](https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates)\n","text":"Detected a Context with autoescape disabled. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.audit.xss.context-autoescape-off.context-autoescape-off","id":"python.django.security.audit.xss.context-autoescape-off.context-autoescape-off","name":"python.django.security.audit.xss.context-autoescape-off.context-autoescape-off","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.audit.xss.context-autoescape-off.context-autoescape-off"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Autoescape is globally disbaled for this Django application. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'."},"help":{"markdown":"Autoescape is globally disbaled for this Django application. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.xss.global-autoescape-off.global-autoescape-off)\n - [https://docs.djangoproject.com/en/3.1/ref/settings/#templates](https://docs.djangoproject.com/en/3.1/ref/settings/#templates)\n - [https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates](https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates)\n","text":"Autoescape is globally disbaled for this Django application. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.audit.xss.global-autoescape-off.global-autoescape-off","id":"python.django.security.audit.xss.global-autoescape-off.global-autoescape-off","name":"python.django.security.audit.xss.global-autoescape-off.global-autoescape-off","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.audit.xss.global-autoescape-off.global-autoescape-off"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template block where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Turn autoescaping on to prevent cross-site scripting (XSS). If you must do this, consider instead, using `mark_safe` in Python code."},"help":{"markdown":"Detected a template block where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Turn autoescaping on to prevent cross-site scripting (XSS). If you must do this, consider instead, using `mark_safe` in Python code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.xss.template-autoescape-off.template-autoescape-off)\n - [https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#autoescape](https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#autoescape)\n","text":"Detected a template block where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Turn autoescaping on to prevent cross-site scripting (XSS). If you must do this, consider instead, using `mark_safe` in Python code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.audit.xss.template-autoescape-off.template-autoescape-off","id":"python.django.security.audit.xss.template-autoescape-off.template-autoescape-off","name":"python.django.security.audit.xss.template-autoescape-off.template-autoescape-off","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.audit.xss.template-autoescape-off.template-autoescape-off"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text."},"help":{"markdown":"Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape)\n - [https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html#html-escaping-translations-in-django-templates](https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html#html-escaping-translations-in-django-templates)\n - [https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#internationalization-in-template-code](https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#internationalization-in-template-code)\n","text":"Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape","id":"python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape","name":"python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text."},"help":{"markdown":"Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape)\n - [https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html#html-escaping-translations-in-django-templates](https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html#html-escaping-translations-in-django-templates)\n - [https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#internationalization-in-template-code](https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#internationalization-in-template-code)\n","text":"Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape","id":"python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape","name":"python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a template variable where autoescaping is explicitly disabled with '| safeseq' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability. If you must do this, use `mark_safe` in your Python code."},"help":{"markdown":"Detected a template variable where autoescaping is explicitly disabled with '| safeseq' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability. If you must do this, use `mark_safe` in your Python code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.audit.xss.template-var-unescaped-with-safeseq.template-var-unescaped-with-safeseq)\n - [https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#safeseq](https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#safeseq)\n","text":"Detected a template variable where autoescaping is explicitly disabled with '| safeseq' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability. If you must do this, use `mark_safe` in your Python code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.audit.xss.template-var-unescaped-with-safeseq.template-var-unescaped-with-safeseq","id":"python.django.security.audit.xss.template-var-unescaped-with-safeseq.template-var-unescaped-with-safeseq","name":"python.django.security.audit.xss.template-var-unescaped-with-safeseq.template-var-unescaped-with-safeseq","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.audit.xss.template-var-unescaped-with-safeseq.template-var-unescaped-with-safeseq"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found request data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."},"help":{"markdown":"Found request data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.injection.code.globals-misuse-code-execution.globals-misuse-code-execution)\n - [https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186](https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186)\n","text":"Found request data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.injection.code.globals-misuse-code-execution.globals-misuse-code-execution","id":"python.django.security.injection.code.globals-misuse-code-execution.globals-misuse-code-execution","name":"python.django.security.injection.code.globals-misuse-code-execution.globals-misuse-code-execution","properties":{"precision":"very-high","tags":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.injection.code.globals-misuse-code-execution.globals-misuse-code-execution"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need."},"help":{"markdown":"Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.injection.code.user-eval.user-eval)\n - [https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html](https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html)\n - [https://owasp.org/www-community/attacks/Code_Injection](https://owasp.org/www-community/attacks/Code_Injection)\n","text":"Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.injection.code.user-eval.user-eval","id":"python.django.security.injection.code.user-eval.user-eval","name":"python.django.security.injection.code.user-eval.user-eval","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.injection.code.user-eval.user-eval"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need."},"help":{"markdown":"Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.injection.code.user-exec.user-exec)\n - [https://owasp.org/www-community/attacks/Code_Injection](https://owasp.org/www-community/attacks/Code_Injection)\n","text":"Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.injection.code.user-exec.user-exec","id":"python.django.security.injection.code.user-exec.user-exec","name":"python.django.security.injection.code.user-exec.user-exec","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.injection.code.user-exec.user-exec"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information."},"help":{"markdown":"Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.injection.command.command-injection-os-system.command-injection-os-system)\n - [https://owasp.org/www-community/attacks/Command_Injection](https://owasp.org/www-community/attacks/Command_Injection)\n","text":"Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.injection.command.command-injection-os-system.command-injection-os-system","id":"python.django.security.injection.command.command-injection-os-system.command-injection-os-system","name":"python.django.security.injection.command.command-injection-os-system.command-injection-os-system","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.injection.command.command-injection-os-system.command-injection-os-system"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found request data in an EmailMessage that is set to use HTML. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS."},"help":{"markdown":"Found request data in an EmailMessage that is set to use HTML. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.injection.email.xss-html-email-body.xss-html-email-body)\n - [https://www.damonkohler.com/2008/12/email-injection.html](https://www.damonkohler.com/2008/12/email-injection.html)\n","text":"Found request data in an EmailMessage that is set to use HTML. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.injection.email.xss-html-email-body.xss-html-email-body","id":"python.django.security.injection.email.xss-html-email-body.xss-html-email-body","name":"python.django.security.injection.email.xss-html-email-body.xss-html-email-body","properties":{"precision":"very-high","tags":["CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.injection.email.xss-html-email-body.xss-html-email-body"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found request data in 'send_mail(...)' that uses 'html_message'. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS."},"help":{"markdown":"Found request data in 'send_mail(...)' that uses 'html_message'. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message)\n - [https://www.damonkohler.com/2008/12/email-injection.html](https://www.damonkohler.com/2008/12/email-injection.html)\n","text":"Found request data in 'send_mail(...)' that uses 'html_message'. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message","id":"python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message","name":"python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message","properties":{"precision":"very-high","tags":["CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Mass assignment detected. This can result in assignment to model fields that are unintended and can be exploited by an attacker. Instead of using '**request.$W', assign each field you want to edit individually to prevent mass assignment. You can read more about mass assignment at https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html."},"help":{"markdown":"Mass assignment detected. This can result in assignment to model fields that are unintended and can be exploited by an attacker. Instead of using '**request.$W', assign each field you want to edit individually to prevent mass assignment. You can read more about mass assignment at https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.injection.mass-assignment.mass-assignment)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html)\n","text":"Mass assignment detected. This can result in assignment to model fields that are unintended and can be exploited by an attacker. Instead of using '**request.$W', assign each field you want to edit individually to prevent mass assignment. You can read more about mass assignment at https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.injection.mass-assignment.mass-assignment","id":"python.django.security.injection.mass-assignment.mass-assignment","name":"python.django.security.injection.mass-assignment.mass-assignment","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.injection.mass-assignment.mass-assignment"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Data from request is passed to a file name `$FILE`. This is a path traversal vulnerability, which can lead to sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library."},"help":{"markdown":"Data from request is passed to a file name `$FILE`. This is a path traversal vulnerability, which can lead to sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.injection.path-traversal.path-traversal-file-name.path-traversal-file-name)\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","text":"Data from request is passed to a file name `$FILE`. This is a path traversal vulnerability, which can lead to sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.injection.path-traversal.path-traversal-file-name.path-traversal-file-name","id":"python.django.security.injection.path-traversal.path-traversal-file-name.path-traversal-file-name","name":"python.django.security.injection.path-traversal.path-traversal-file-name.path-traversal-file-name","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.injection.path-traversal.path-traversal-file-name.path-traversal-file-name"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"'$VAR' is using the empty string as its default and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'."},"help":{"markdown":"'$VAR' is using the empty string as its default and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.passwords.use-none-for-password-default.use-none-for-password-default)\n - [https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password](https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password)\n","text":"'$VAR' is using the empty string as its default and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.django.security.passwords.use-none-for-password-default.use-none-for-password-default","id":"python.django.security.passwords.use-none-for-password-default.use-none-for-password-default","name":"python.django.security.passwords.use-none-for-password-default.use-none-for-password-default","properties":{"precision":"very-high","tags":["CWE-521: Weak Password Requirements","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.passwords.use-none-for-password-default.use-none-for-password-default"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Running flask app with host 0.0.0.0 could expose the server publicly."},"help":{"markdown":"Running flask app with host 0.0.0.0 could expose the server publicly.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Running flask app with host 0.0.0.0 could expose the server publicly.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","id":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","name":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","properties":{"precision":"very-high","tags":["CWE-668: Exposure of Resource to Wrong Sphere","HIGH CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"},"help":{"markdown":"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly","id":"python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly","name":"python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly","properties":{"precision":"very-high","tags":["CWE-668: Exposure of Resource to Wrong Sphere","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."},"help":{"markdown":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled)\n - [https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/](https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/)\n","text":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","id":"python.flask.security.audit.debug-enabled.debug-enabled","name":"python.flask.security.audit.debug-enabled.debug-enabled","properties":{"precision":"very-high","tags":["CWE-489: Active Debug Code","HIGH CONFIDENCE","OWASP-A06:2017 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.audit.debug-enabled.debug-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable"},"help":{"markdown":"Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG)\n - [https://bento.dev/checks/flask/avoid-hardcoded-config/](https://bento.dev/checks/flask/avoid-hardcoded-config/)\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values)\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features)\n","text":"Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG","id":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG","name":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG","properties":{"precision":"very-high","tags":["CWE-489: Active Debug Code","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Hardcoded variable `ENV` detected. Set this by using FLASK_ENV environment variable"},"help":{"markdown":"Hardcoded variable `ENV` detected. Set this by using FLASK_ENV environment variable\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_ENV)\n - [https://bento.dev/checks/flask/avoid-hardcoded-config/](https://bento.dev/checks/flask/avoid-hardcoded-config/)\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values)\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features)\n","text":"Hardcoded variable `ENV` detected. Set this by using FLASK_ENV environment variable\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_ENV","id":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_ENV","name":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_ENV","properties":{"precision":"very-high","tags":["CWE-489: Active Debug Code","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_ENV"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead"},"help":{"markdown":"Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY)\n - [https://bento.dev/checks/flask/avoid-hardcoded-config/](https://bento.dev/checks/flask/avoid-hardcoded-config/)\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values)\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features)\n","text":"Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","id":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","name":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","properties":{"precision":"very-high","tags":["CWE-489: Active Debug Code","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Hardcoded variable `TESTING` detected. Use environment variables or config files instead"},"help":{"markdown":"Hardcoded variable `TESTING` detected. Use environment variables or config files instead\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING)\n - [https://bento.dev/checks/flask/avoid-hardcoded-config/](https://bento.dev/checks/flask/avoid-hardcoded-config/)\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values)\n - [https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features](https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features)\n","text":"Hardcoded variable `TESTING` detected. Use environment variables or config files instead\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING","id":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING","name":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING","properties":{"precision":"very-high","tags":["CWE-489: Active Debug Code","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks."},"help":{"markdown":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string)\n - [https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html](https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html)\n","text":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","id":"python.flask.security.audit.render-template-string.render-template-string","name":"python.flask.security.audit.render-template-string.render-template-string","properties":{"precision":"very-high","tags":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.audit.render-template-string.render-template-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found a Flask cookie with insecurely configured properties.  By default the secure, httponly and samesite ar configured insecurely. cookies should be handled securely by setting `secure=True`, `httponly=True`, and `samesite='Lax'` in response.set_cookie(...). If these parameters are not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker. Include the `secure=True`, `httponly=True`, `samesite='Lax'` arguments or set these to be true in the Flask configuration."},"help":{"markdown":"Found a Flask cookie with insecurely configured properties.  By default the secure, httponly and samesite ar configured insecurely. cookies should be handled securely by setting `secure=True`, `httponly=True`, and `samesite='Lax'` in response.set_cookie(...). If these parameters are not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker. Include the `secure=True`, `httponly=True`, `samesite='Lax'` arguments or set these to be true in the Flask configuration.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.secure-set-cookie.secure-set-cookie)\n - [https://flask.palletsprojects.com/en/3.0.x/api/#flask.Response.set_cookie](https://flask.palletsprojects.com/en/3.0.x/api/#flask.Response.set_cookie)\n - [https://flask.palletsprojects.com/en/3.0.x/security/#set-cookie-options](https://flask.palletsprojects.com/en/3.0.x/security/#set-cookie-options)\n","text":"Found a Flask cookie with insecurely configured properties.  By default the secure, httponly and samesite ar configured insecurely. cookies should be handled securely by setting `secure=True`, `httponly=True`, and `samesite='Lax'` in response.set_cookie(...). If these parameters are not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker. Include the `secure=True`, `httponly=True`, `samesite='Lax'` arguments or set these to be true in the Flask configuration.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.audit.secure-set-cookie.secure-set-cookie","id":"python.flask.security.audit.secure-set-cookie.secure-set-cookie","name":"python.flask.security.audit.secure-set-cookie.secure-set-cookie","properties":{"precision":"very-high","tags":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.audit.secure-set-cookie.secure-set-cookie"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Setting 'WTF_CSRF_ENABLED' to 'False' explicitly disables CSRF protection."},"help":{"markdown":"Setting 'WTF_CSRF_ENABLED' to 'False' explicitly disables CSRF protection.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.audit.wtf-csrf-disabled.flask-wtf-csrf-disabled)\n - [https://flask-wtf.readthedocs.io/en/1.2.x/csrf/](https://flask-wtf.readthedocs.io/en/1.2.x/csrf/)\n","text":"Setting 'WTF_CSRF_ENABLED' to 'False' explicitly disables CSRF protection.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.audit.wtf-csrf-disabled.flask-wtf-csrf-disabled","id":"python.flask.security.audit.wtf-csrf-disabled.flask-wtf-csrf-disabled","name":"python.flask.security.audit.wtf-csrf-disabled.flask-wtf-csrf-disabled","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.audit.wtf-csrf-disabled.flask-wtf-csrf-disabled"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks."},"help":{"markdown":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string)\n - [https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html](https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html)\n - [https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti](https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti)\n","text":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string","id":"python.flask.security.dangerous-template-string.dangerous-template-string","name":"python.flask.security.dangerous-template-string.dangerous-template-string","properties":{"precision":"very-high","tags":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.dangerous-template-string.dangerous-template-string"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user data flowing into eval. This is code injection and should be avoided."},"help":{"markdown":"Detected user data flowing into eval. This is code injection and should be avoided.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.injection.user-eval.eval-injection)\n - [https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html](https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html)\n","text":"Detected user data flowing into eval. This is code injection and should be avoided.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.injection.user-eval.eval-injection","id":"python.flask.security.injection.user-eval.eval-injection","name":"python.flask.security.injection.user-eval.eval-injection","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.injection.user-eval.eval-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user data flowing into exec. This is code injection and should be avoided."},"help":{"markdown":"Detected user data flowing into exec. This is code injection and should be avoided.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.injection.user-exec.exec-injection)\n - [https://nedbatchelder.com/blog/201206/exec_really_is_dangerous.html](https://nedbatchelder.com/blog/201206/exec_really_is_dangerous.html)\n","text":"Detected user data flowing into exec. This is code injection and should be avoided.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.injection.user-exec.exec-injection","id":"python.flask.security.injection.user-exec.exec-injection","name":"python.flask.security.injection.user-exec.exec-injection","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.injection.user-exec.exec-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON."},"help":{"markdown":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n","text":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization","id":"python.flask.security.insecure-deserialization.insecure-deserialization","name":"python.flask.security.insecure-deserialization.insecure-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.insecure-deserialization.insecure-deserialization"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."},"help":{"markdown":"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.open-redirect.open-redirect)\n - [https://flask-login.readthedocs.io/en/latest/#login-example](https://flask-login.readthedocs.io/en/latest/#login-example)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html#dangerous-url-redirect-example-1](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html#dangerous-url-redirect-example-1)\n - [https://docs.python.org/3/library/urllib.parse.html#url-parsing](https://docs.python.org/3/library/urllib.parse.html#url-parsing)\n","text":"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.open-redirect.open-redirect","id":"python.flask.security.open-redirect.open-redirect","name":"python.flask.security.open-redirect.open-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.open-redirect.open-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a user-controlled `filename` that could flow to `flask.send_file()` function. This could lead to an attacker reading arbitrary file from the system, leaking private information. Make sure to properly sanitize filename or use `flask.send_from_directory`"},"help":{"markdown":"Detected a user-controlled `filename` that could flow to `flask.send_file()` function. This could lead to an attacker reading arbitrary file from the system, leaking private information. Make sure to properly sanitize filename or use `flask.send_from_directory`\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.secure-static-file-serve.avoid_send_file_without_path_sanitization)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Detected a user-controlled `filename` that could flow to `flask.send_file()` function. This could lead to an attacker reading arbitrary file from the system, leaking private information. Make sure to properly sanitize filename or use `flask.send_from_directory`\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.secure-static-file-serve.avoid_send_file_without_path_sanitization","id":"python.flask.security.secure-static-file-serve.avoid_send_file_without_path_sanitization","name":"python.flask.security.secure-static-file-serve.avoid_send_file_without_path_sanitization","properties":{"precision":"very-high","tags":["CWE-73: External Control of File Name or Path","LOW CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.secure-static-file-serve.avoid_send_file_without_path_sanitization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Flask does not automatically escape Jinja templates unless they have .html, .htm, .xml, or .xhtml extensions. This could lead to XSS attacks. Use .html, .htm, .xml, or .xhtml for your template extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup for more information."},"help":{"markdown":"Flask does not automatically escape Jinja templates unless they have .html, .htm, .xml, or .xhtml extensions. This could lead to XSS attacks. Use .html, .htm, .xml, or .xhtml for your template extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup for more information.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.unescaped-template-extension.unescaped-template-extension)\n - [https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup](https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup)\n - [https://semgrep.dev/blog/2020/bento-check-unescaped-template-extensions-in-flask/](https://semgrep.dev/blog/2020/bento-check-unescaped-template-extensions-in-flask/)\n - [https://bento.dev/checks/flask/unescaped-file-extension/](https://bento.dev/checks/flask/unescaped-file-extension/)\n","text":"Flask does not automatically escape Jinja templates unless they have .html, .htm, .xml, or .xhtml extensions. This could lead to XSS attacks. Use .html, .htm, .xml, or .xhtml for your template extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup for more information.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.unescaped-template-extension.unescaped-template-extension","id":"python.flask.security.unescaped-template-extension.unescaped-template-extension","name":"python.flask.security.unescaped-template-extension.unescaped-template-extension","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.unescaped-template-extension.unescaped-template-extension"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Flask response reflects unsanitized user input. This could lead to a cross-site scripting vulnerability (https://owasp.org/www-community/attacks/xss/) in which an attacker causes arbitrary code to be executed in the user's browser. To prevent, please sanitize the user input, e.g. by rendering the response in a Jinja2 template (see considerations in https://flask.palletsprojects.com/en/1.0.x/security/)."},"help":{"markdown":"Flask response reflects unsanitized user input. This could lead to a cross-site scripting vulnerability (https://owasp.org/www-community/attacks/xss/) in which an attacker causes arbitrary code to be executed in the user's browser. To prevent, please sanitize the user input, e.g. by rendering the response in a Jinja2 template (see considerations in https://flask.palletsprojects.com/en/1.0.x/security/).\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.unsanitized-input.response-contains-unsanitized-input)\n - [https://flask.palletsprojects.com/en/1.0.x/security/](https://flask.palletsprojects.com/en/1.0.x/security/)\n - [https://owasp.org/www-community/attacks/xss/](https://owasp.org/www-community/attacks/xss/)\n","text":"Flask response reflects unsanitized user input. This could lead to a cross-site scripting vulnerability (https://owasp.org/www-community/attacks/xss/) in which an attacker causes arbitrary code to be executed in the user's browser. To prevent, please sanitize the user input, e.g. by rendering the response in a Jinja2 template (see considerations in https://flask.palletsprojects.com/en/1.0.x/security/).\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.unsanitized-input.response-contains-unsanitized-input","id":"python.flask.security.unsanitized-input.response-contains-unsanitized-input","name":"python.flask.security.unsanitized-input.response-contains-unsanitized-input","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.unsanitized-input.response-contains-unsanitized-input"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a segment of a Flask template where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability, or turn autoescape on."},"help":{"markdown":"Detected a segment of a Flask template where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability, or turn autoescape on.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off)\n - [https://flask.palletsprojects.com/en/1.1.x/templating/#controlling-autoescaping](https://flask.palletsprojects.com/en/1.1.x/templating/#controlling-autoescaping)\n - [https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup](https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup)\n","text":"Detected a segment of a Flask template where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability, or turn autoescape on.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off","id":"python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off","name":"python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability."},"help":{"markdown":"Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe)\n - [https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss](https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss)\n","text":"Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe","id":"python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe","name":"python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The Connection.recv() method automatically unpickles the data it receives, which can be a security risk unless you can trust the process which sent the message. Therefore, unless the connection object was produced using Pipe() you should only use the recv() and send() methods after performing some sort of authentication. See more dettails: https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection"},"help":{"markdown":"The Connection.recv() method automatically unpickles the data it receives, which can be a security risk unless you can trust the process which sent the message. Therefore, unless the connection object was produced using Pipe() you should only use the recv() and send() methods after performing some sort of authentication. See more dettails: https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.conn_recv.multiprocessing-recv)\n - [https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection](https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection)\n","text":"The Connection.recv() method automatically unpickles the data it receives, which can be a security risk unless you can trust the process which sent the message. Therefore, unless the connection object was produced using Pipe() you should only use the recv() and send() methods after performing some sort of authentication. See more dettails: https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.audit.conn_recv.multiprocessing-recv","id":"python.lang.security.audit.conn_recv.multiprocessing-recv","name":"python.lang.security.audit.conn_recv.multiprocessing-recv","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.audit.conn_recv.multiprocessing-recv"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."},"help":{"markdown":"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected)\n - [https://cwe.mitre.org/data/definitions/939.html](https://cwe.mitre.org/data/definitions/939.html)\n","text":"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected","id":"python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected","name":"python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected","properties":{"precision":"very-high","tags":["CWE-939: Improper Authorization in Handler for Custom URL Scheme","LOW CONFIDENCE","OWASP-A01:2017 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."},"help":{"markdown":"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected","id":"python.lang.security.audit.eval-detected.eval-detected","name":"python.lang.security.audit.eval-detected.eval-detected","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.audit.eval-detected.eval-detected"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."},"help":{"markdown":"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected","id":"python.lang.security.audit.exec-detected.exec-detected","name":"python.lang.security.audit.exec-detected.exec-detected","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.audit.exec-detected.exec-detected"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous if a real password is not supplied."},"help":{"markdown":"Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous if a real password is not supplied.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous if a real password is not supplied.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument","id":"python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument","name":"python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information."},"help":{"markdown":"The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.httpsconnection-detected.httpsconnection-detected)\n - [https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection](https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection)\n","text":"The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.audit.httpsconnection-detected.httpsconnection-detected","id":"python.lang.security.audit.httpsconnection-detected.httpsconnection-detected","name":"python.lang.security.audit.httpsconnection-detected.httpsconnection-detected","properties":{"precision":"very-high","tags":["CWE-295: Improper Certificate Validation","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.audit.httpsconnection-detected.httpsconnection-detected"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Because portions of the logging configuration are passed through eval(), use of this function may open its users to a security risk. While the function only binds to a socket on localhost, and so does not accept connections from remote machines, there are scenarios where untrusted code could be run under the account of the process which calls listen(). To avoid this happening, use the `verify()` argument to `listen()` to prevent unrecognized configurations."},"help":{"markdown":"Because portions of the logging configuration are passed through eval(), use of this function may open its users to a security risk. While the function only binds to a socket on localhost, and so does not accept connections from remote machines, there are scenarios where untrusted code could be run under the account of the process which calls listen(). To avoid this happening, use the `verify()` argument to `listen()` to prevent unrecognized configurations.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.logging.listeneval.listen-eval)\n - [https://docs.python.org/3/library/logging.config.html?highlight=security#logging.config.listen](https://docs.python.org/3/library/logging.config.html?highlight=security#logging.config.listen)\n","text":"Because portions of the logging configuration are passed through eval(), use of this function may open its users to a security risk. While the function only binds to a socket on localhost, and so does not accept connections from remote machines, there are scenarios where untrusted code could be run under the account of the process which calls listen(). To avoid this happening, use the `verify()` argument to `listen()` to prevent unrecognized configurations.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.audit.logging.listeneval.listen-eval","id":"python.lang.security.audit.logging.listeneval.listen-eval","name":"python.lang.security.audit.logging.listeneval.listen-eval","properties":{"precision":"very-high","tags":["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.audit.logging.listeneval.listen-eval"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Mako templates do not provide a global HTML escaping mechanism. This means you must escape all sensitive data in your templates using '| u' for URL escaping or '| h' for HTML escaping. If you are using Mako to serve web content, consider using a system such as Jinja2 which enables global escaping."},"help":{"markdown":"Mako templates do not provide a global HTML escaping mechanism. This means you must escape all sensitive data in your templates using '| u' for URL escaping or '| h' for HTML escaping. If you are using Mako to serve web content, consider using a system such as Jinja2 which enables global escaping.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.mako-templates-detected.mako-templates-detected)\n - [https://docs.makotemplates.org/en/latest/syntax.html#expression-escaping](https://docs.makotemplates.org/en/latest/syntax.html#expression-escaping)\n - [https://jinja.palletsprojects.com/en/2.11.x/intro/#](https://jinja.palletsprojects.com/en/2.11.x/intro/#)\n","text":"Mako templates do not provide a global HTML escaping mechanism. This means you must escape all sensitive data in your templates using '| u' for URL escaping or '| h' for HTML escaping. If you are using Mako to serve web content, consider using a system such as Jinja2 which enables global escaping.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.audit.mako-templates-detected.mako-templates-detected","id":"python.lang.security.audit.mako-templates-detected.mako-templates-detected","name":"python.lang.security.audit.mako-templates-detected.mako-templates-detected","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.audit.mako-templates-detected.mako-templates-detected"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security"},"help":{"markdown":"The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.marshal.marshal-usage)\n - [https://docs.python.org/3/library/marshal.html?highlight=security](https://docs.python.org/3/library/marshal.html?highlight=security)\n","text":"The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.audit.marshal.marshal-usage","id":"python.lang.security.audit.marshal.marshal-usage","name":"python.lang.security.audit.marshal.marshal-usage","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.audit.marshal.marshal-usage"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."},"help":{"markdown":"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","id":"python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","name":"python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","HIGH CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications."},"help":{"markdown":"Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection)\n - [https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool](https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool)\n","text":"Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","id":"python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","name":"python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.audit.network.http-not-https-connection.http-not-https-connection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a paramiko host key policy that implicitly trusts a server's host key. Host keys should be verified to ensure the connection is not to a malicious server. Use RejectPolicy or a custom subclass instead."},"help":{"markdown":"Detected a paramiko host key policy that implicitly trusts a server's host key. Host keys should be verified to ensure the connection is not to a malicious server. Use RejectPolicy or a custom subclass instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key)\n - [http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.AutoAddPolicy](http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.AutoAddPolicy)\n","text":"Detected a paramiko host key policy that implicitly trusts a server's host key. Host keys should be verified to ensure the connection is not to a malicious server. Use RejectPolicy or a custom subclass instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key","id":"python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key","name":"python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key","properties":{"precision":"very-high","tags":["CWE-322: Key Exchange without Entity Authentication","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context()' instead."},"help":{"markdown":"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context()' instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command)\n - [http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.SSHClient.exec_command](http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.SSHClient.exec_command)\n - [https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/plugins/injection_paramiko.py](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/plugins/injection_paramiko.py)\n","text":"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context()' instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command","id":"python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command","name":"python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","LOW CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket."},"help":{"markdown":"'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated)\n - [https://docs.python.org/3/library/ssl.html#ssl.wrap_socket](https://docs.python.org/3/library/ssl.html#ssl.wrap_socket)\n - [https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket)\n","text":"'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated","id":"python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated","name":"python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."},"help":{"markdown":"Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true)\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n","text":"Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","id":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","name":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.audit.subprocess-shell-true.subprocess-shell-true"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of the wildcard character in a system call that spawns a shell. This subjects the wildcard to normal shell expansion, which can have unintended consequences if there exist any non-standard file names. Consider a file named '-e sh script.sh' -- this will execute a script when 'rsync' is called. See https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt for more information."},"help":{"markdown":"Detected use of the wildcard character in a system call that spawns a shell. This subjects the wildcard to normal shell expansion, which can have unintended consequences if there exist any non-standard file names. Consider a file named '-e sh script.sh' -- this will execute a script when 'rsync' is called. See https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt for more information.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.system-wildcard-detected.system-wildcard-detected)\n - [https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt](https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt)\n","text":"Detected use of the wildcard character in a system call that spawns a shell. This subjects the wildcard to normal shell expansion, which can have unintended consequences if there exist any non-standard file names. Consider a file named '-e sh script.sh' -- this will execute a script when 'rsync' is called. See https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt for more information.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.audit.system-wildcard-detected.system-wildcard-detected","id":"python.lang.security.audit.system-wildcard-detected.system-wildcard-detected","name":"python.lang.security.audit.system-wildcard-detected.system-wildcard-detected","properties":{"precision":"very-high","tags":["CWE-155: Improper Neutralization of Wildcards or Matching Symbols","LOW CONFIDENCE","OWASP-A01:2017 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.audit.system-wildcard-detected.system-wildcard-detected"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Telnet does not encrypt communications. Use SSH instead."},"help":{"markdown":"Telnet does not encrypt communications. Use SSH instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.telnetlib.telnetlib)\n - [https://docs.python.org/3/library/telnetlib.html](https://docs.python.org/3/library/telnetlib.html)\n","text":"Telnet does not encrypt communications. Use SSH instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.audit.telnetlib.telnetlib","id":"python.lang.security.audit.telnetlib.telnetlib","name":"python.lang.security.audit.telnetlib.telnetlib","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","LOW CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.audit.telnetlib.telnetlib"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher."},"help":{"markdown":"An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.weak-ssl-version.weak-ssl-version)\n - [https://tools.ietf.org/html/rfc7568](https://tools.ietf.org/html/rfc7568)\n - [https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html](https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html)\n - [https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2)\n","text":"An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.audit.weak-ssl-version.weak-ssl-version","id":"python.lang.security.audit.weak-ssl-version.weak-ssl-version","name":"python.lang.security.audit.weak-ssl-version.weak-ssl-version","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML. An attacker with control over the YAML input could create special YAML input that allows the attacker to run arbitrary Python code. This would allow the attacker to steal files, download and install malware, or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead."},"help":{"markdown":"Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML. An attacker with control over the YAML input could create special YAML input that allows the attacker to run arbitrary Python code. This would allow the attacker to steal files, download and install malware, or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load)\n - [https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation](https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation)\n - [https://nvd.nist.gov/vuln/detail/CVE-2017-18342](https://nvd.nist.gov/vuln/detail/CVE-2017-18342)\n","text":"Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML. An attacker with control over the YAML input could create special YAML input that allows the attacker to run arbitrary Python code. This would allow the attacker to steal files, download and install malware, or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load","id":"python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load","name":"python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."},"help":{"markdown":"Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-cPickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n","text":"Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-cPickle","id":"python.lang.security.deserialization.pickle.avoid-cPickle","name":"python.lang.security.deserialization.pickle.avoid-cPickle","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.deserialization.pickle.avoid-cPickle"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."},"help":{"markdown":"Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-dill)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n","text":"Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-dill","id":"python.lang.security.deserialization.pickle.avoid-dill","name":"python.lang.security.deserialization.pickle.avoid-dill","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.deserialization.pickle.avoid-dill"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."},"help":{"markdown":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n","text":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle","id":"python.lang.security.deserialization.pickle.avoid-pickle","name":"python.lang.security.deserialization.pickle.avoid-pickle","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","LOW CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."},"help":{"markdown":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n","text":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","id":"python.lang.security.deserialization.pickle.avoid-shelve","name":"python.lang.security.deserialization.pickle.avoid-shelve","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.deserialization.pickle.avoid-shelve"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"help":{"markdown":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1)\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n","text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1","id":"python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1","name":"python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead."},"help":{"markdown":"Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.insecure-hash-function.insecure-hash-function)\n - [https://tools.ietf.org/html/rfc6151](https://tools.ietf.org/html/rfc6151)\n - [https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision](https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n","text":"Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.insecure-hash-function.insecure-hash-function","id":"python.lang.security.insecure-hash-function.insecure-hash-function","name":"python.lang.security.insecure-hash-function.insecure-hash-function","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.insecure-hash-function.insecure-hash-function"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead."},"help":{"markdown":"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.unverified-ssl-context.unverified-ssl-context)\n - [https://docs.python.org/3/library/ssl.html#ssl-security](https://docs.python.org/3/library/ssl.html#ssl-security)\n - [https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection](https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection)\n","text":"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.unverified-ssl-context.unverified-ssl-context","id":"python.lang.security.unverified-ssl-context.unverified-ssl-context","name":"python.lang.security.unverified-ssl-context.unverified-ssl-context","properties":{"precision":"very-high","tags":["CWE-295: Improper Certificate Validation","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.unverified-ssl-context.unverified-ssl-context"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \"XML bombs\" can cause denial of service."},"help":{"markdown":"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \"XML bombs\" can cause denial of service.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.use-defused-xml.use-defused-xml)\n - [https://docs.python.org/3/library/xml.html](https://docs.python.org/3/library/xml.html)\n - [https://github.com/tiran/defusedxml](https://github.com/tiran/defusedxml)\n - [https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing](https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing)\n","text":"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \"XML bombs\" can cause denial of service.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.use-defused-xml.use-defused-xml","id":"python.lang.security.use-defused-xml.use-defused-xml","name":"python.lang.security.use-defused-xml.use-defused-xml","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.use-defused-xml.use-defused-xml"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead."},"help":{"markdown":"Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc)\n - [https://pypi.org/project/defusedxml/](https://pypi.org/project/defusedxml/)\n - [https://docs.python.org/3/library/xml.html#xml-vulnerabilities](https://docs.python.org/3/library/xml.html#xml-vulnerabilities)\n","text":"Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc","id":"python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc","name":"python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc","properties":{"precision":"very-high","tags":["CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')","LOW CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead."},"help":{"markdown":"Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor)\n - [https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption](https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption)\n","text":"Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor","id":"python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor","name":"python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."},"help":{"markdown":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1)\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n","text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1","id":"python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1","name":"python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation."},"help":{"markdown":"Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.requests.security.disabled-cert-validation.disabled-cert-validation)\n - [https://stackoverflow.com/questions/41740361/is-it-safe-to-disable-ssl-certificate-verification-in-pythonss-requests-lib](https://stackoverflow.com/questions/41740361/is-it-safe-to-disable-ssl-certificate-verification-in-pythonss-requests-lib)\n","text":"Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.requests.security.disabled-cert-validation.disabled-cert-validation","id":"python.requests.security.disabled-cert-validation.disabled-cert-validation","name":"python.requests.security.disabled-cert-validation.disabled-cert-validation","properties":{"precision":"very-high","tags":["CWE-295: Improper Certificate Validation","LOW CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: python.requests.security.disabled-cert-validation.disabled-cert-validation"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead."},"help":{"markdown":"Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.requests.security.no-auth-over-http.no-auth-over-http)\n - [https://semgrep.dev/blog/2020/bento-check-no-auth-over-http/](https://semgrep.dev/blog/2020/bento-check-no-auth-over-http/)\n - [https://bento.dev/checks/requests/no-auth-over-http/](https://bento.dev/checks/requests/no-auth-over-http/)\n","text":"Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.requests.security.no-auth-over-http.no-auth-over-http","id":"python.requests.security.no-auth-over-http.no-auth-over-http","name":"python.requests.security.no-auth-over-http.no-auth-over-http","properties":{"precision":"very-high","tags":["CWE-523: Unprotected Transport of Credentials","LOW CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Semgrep Finding: python.requests.security.no-auth-over-http.no-auth-over-http"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements."},"help":{"markdown":"Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection","id":"python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection","name":"python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead."},"help":{"markdown":"Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.bad-deserialization.bad-deserialization)\n - [https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ](https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ)\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb)\n","text":"Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/ruby.lang.security.bad-deserialization.bad-deserialization","id":"ruby.lang.security.bad-deserialization.bad-deserialization","name":"ruby.lang.security.bad-deserialization.bad-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: ruby.lang.security.bad-deserialization.bad-deserialization"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Checks if code allows cookies to be deserialized using Marshal. If the attacker can craft a valid cookie, this could lead to remote code execution. The hybrid check is just to warn users to migrate to :json for best practice."},"help":{"markdown":"Checks if code allows cookies to be deserialized using Marshal. If the attacker can craft a valid cookie, this could lead to remote code execution. The hybrid check is just to warn users to migrate to :json for best practice.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.cookie-serialization.cookie-serialization)\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_cookie_serialization.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_cookie_serialization.rb)\n - [https://robertheaton.com/2013/07/22/how-to-hack-a-rails-app-using-its-secret-token/](https://robertheaton.com/2013/07/22/how-to-hack-a-rails-app-using-its-secret-token/)\n","text":"Checks if code allows cookies to be deserialized using Marshal. If the attacker can craft a valid cookie, this could lead to remote code execution. The hybrid check is just to warn users to migrate to :json for best practice.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/ruby.lang.security.cookie-serialization.cookie-serialization","id":"ruby.lang.security.cookie-serialization.cookie-serialization","name":"ruby.lang.security.cookie-serialization.cookie-serialization","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: ruby.lang.security.cookie-serialization.cookie-serialization"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Checks for strong parameter bypass through usage of create_with. Create_with bypasses strong parameter protection, which could allow attackers to set arbitrary attributes on models. To fix this vulnerability, either remove all create_with calls or use the permit function to specify tags that are allowed to be set."},"help":{"markdown":"Checks for strong parameter bypass through usage of create_with. Create_with bypasses strong parameter protection, which could allow attackers to set arbitrary attributes on models. To fix this vulnerability, either remove all create_with calls or use the permit function to specify tags that are allowed to be set.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.create-with.create-with)\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_create_with.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_create_with.rb)\n - [https://groups.google.com/g/rubyonrails-security/c/M4chq5Sb540/m/CC1Fh0Y_NWwJ](https://groups.google.com/g/rubyonrails-security/c/M4chq5Sb540/m/CC1Fh0Y_NWwJ)\n","text":"Checks for strong parameter bypass through usage of create_with. Create_with bypasses strong parameter protection, which could allow attackers to set arbitrary attributes on models. To fix this vulnerability, either remove all create_with calls or use the permit function to specify tags that are allowed to be set.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/ruby.lang.security.create-with.create-with","id":"ruby.lang.security.create-with.create-with","name":"ruby.lang.security.create-with.create-with","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: ruby.lang.security.create-with.create-with"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a possible ZeroDivisionError."},"help":{"markdown":"Detected a possible ZeroDivisionError.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.divide-by-zero.divide-by-zero)\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_divide_by_zero.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_divide_by_zero.rb)\n","text":"Detected a possible ZeroDivisionError.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/ruby.lang.security.divide-by-zero.divide-by-zero","id":"ruby.lang.security.divide-by-zero.divide-by-zero","name":"ruby.lang.security.divide-by-zero.divide-by-zero","properties":{"precision":"very-high","tags":["CWE-369: Divide By Zero","MEDIUM CONFIDENCE","security"]},"shortDescription":{"text":"Semgrep Finding: ruby.lang.security.divide-by-zero.divide-by-zero"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Special requests can determine whether a file exists on a filesystem that's outside the Rails app's root directory. To fix this, set config.serve_static_assets = false."},"help":{"markdown":"Special requests can determine whether a file exists on a filesystem that's outside the Rails app's root directory. To fix this, set config.serve_static_assets = false.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.file-disclosure.file-disclosure)\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_file_disclosure.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_file_disclosure.rb)\n - [https://groups.google.com/g/rubyonrails-security/c/23fiuwb1NBA/m/MQVM1-5GkPMJ](https://groups.google.com/g/rubyonrails-security/c/23fiuwb1NBA/m/MQVM1-5GkPMJ)\n","text":"Special requests can determine whether a file exists on a filesystem that's outside the Rails app's root directory. To fix this, set config.serve_static_assets = false.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/ruby.lang.security.file-disclosure.file-disclosure","id":"ruby.lang.security.file-disclosure.file-disclosure","name":"ruby.lang.security.file-disclosure.file-disclosure","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: ruby.lang.security.file-disclosure.file-disclosure"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Checks for use of action in Ruby routes. This can cause Rails to render an arbitrary view if an attacker creates an URL accurately. Affects 3.0 applications. Can avoid the vulnerability by providing additional constraints."},"help":{"markdown":"Checks for use of action in Ruby routes. This can cause Rails to render an arbitrary view if an attacker creates an URL accurately. Affects 3.0 applications. Can avoid the vulnerability by providing additional constraints.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.filter-skipping.filter-skipping)\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_filter_skipping.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_filter_skipping.rb)\n - [https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY](https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY)\n","text":"Checks for use of action in Ruby routes. This can cause Rails to render an arbitrary view if an attacker creates an URL accurately. Affects 3.0 applications. Can avoid the vulnerability by providing additional constraints.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/ruby.lang.security.filter-skipping.filter-skipping","id":"ruby.lang.security.filter-skipping.filter-skipping","name":"ruby.lang.security.filter-skipping.filter-skipping","properties":{"precision":"very-high","tags":["CWE-1021: Improper Restriction of Rendered UI Layers or Frames","LOW CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Semgrep Finding: ruby.lang.security.filter-skipping.filter-skipping"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for configuration setting of force_ssl to false. Force_ssl forces usage of HTTPS, which could lead to network interception of unencrypted application traffic. To fix, set config.force_ssl = true."},"help":{"markdown":"Checks for configuration setting of force_ssl to false. Force_ssl forces usage of HTTPS, which could lead to network interception of unencrypted application traffic. To fix, set config.force_ssl = true.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.force-ssl-false.force-ssl-false)\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_force_ssl.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_force_ssl.rb)\n","text":"Checks for configuration setting of force_ssl to false. Force_ssl forces usage of HTTPS, which could lead to network interception of unencrypted application traffic. To fix, set config.force_ssl = true.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/ruby.lang.security.force-ssl-false.force-ssl-false","id":"ruby.lang.security.force-ssl-false.force-ssl-false","name":"ruby.lang.security.force-ssl-false.force-ssl-false","properties":{"precision":"very-high","tags":["CWE-311: Missing Encryption of Sensitive Data","HIGH CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Semgrep Finding: ruby.lang.security.force-ssl-false.force-ssl-false"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected hardcoded password used in basic authentication in a controller class. Including this password in version control could expose this credential. Consider refactoring to use environment variables or configuration files."},"help":{"markdown":"Detected hardcoded password used in basic authentication in a controller class. Including this password in version control could expose this credential. Consider refactoring to use environment variables or configuration files.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"Detected hardcoded password used in basic authentication in a controller class. Including this password in version control could expose this credential. Consider refactoring to use environment variables or configuration files.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller","id":"ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller","name":"ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Found the use of an hardcoded passphrase for RSA. The passphrase can be easily discovered, and therefore should not be stored in source-code. It is recommended to remove the passphrase from source-code, and use system environment variables or a restricted configuration file."},"help":{"markdown":"Found the use of an hardcoded passphrase for RSA. The passphrase can be easily discovered, and therefore should not be stored in source-code. It is recommended to remove the passphrase from source-code, and use system environment variables or a restricted configuration file.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.hardcoded-secret-rsa-passphrase.hardcoded-secret-rsa-passphrase)\n - [https://cwe.mitre.org/data/definitions/522.html](https://cwe.mitre.org/data/definitions/522.html)\n","text":"Found the use of an hardcoded passphrase for RSA. The passphrase can be easily discovered, and therefore should not be stored in source-code. It is recommended to remove the passphrase from source-code, and use system environment variables or a restricted configuration file.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/ruby.lang.security.hardcoded-secret-rsa-passphrase.hardcoded-secret-rsa-passphrase","id":"ruby.lang.security.hardcoded-secret-rsa-passphrase.hardcoded-secret-rsa-passphrase","name":"ruby.lang.security.hardcoded-secret-rsa-passphrase.hardcoded-secret-rsa-passphrase","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: ruby.lang.security.hardcoded-secret-rsa-passphrase.hardcoded-secret-rsa-passphrase"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Mass assignment protection disabled for '$MODEL'. This could permit assignment to sensitive model fields without intention. Instead, use 'attr_accessible' for the model or disable mass assigment using 'config.active_record.whitelist_attributes = true'. ':without_protection => true' must be removed for this to take effect."},"help":{"markdown":"Mass assignment protection disabled for '$MODEL'. This could permit assignment to sensitive model fields without intention. Instead, use 'attr_accessible' for the model or disable mass assigment using 'config.active_record.whitelist_attributes = true'. ':without_protection => true' must be removed for this to take effect.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.mass-assignment-protection-disabled.mass-assignment-protection-disabled)\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n","text":"Mass assignment protection disabled for '$MODEL'. This could permit assignment to sensitive model fields without intention. Instead, use 'attr_accessible' for the model or disable mass assigment using 'config.active_record.whitelist_attributes = true'. ':without_protection => true' must be removed for this to take effect.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/ruby.lang.security.mass-assignment-protection-disabled.mass-assignment-protection-disabled","id":"ruby.lang.security.mass-assignment-protection-disabled.mass-assignment-protection-disabled","name":"ruby.lang.security.mass-assignment-protection-disabled.mass-assignment-protection-disabled","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: ruby.lang.security.mass-assignment-protection-disabled.mass-assignment-protection-disabled"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected controller which does not enable cross-site request forgery protections using 'protect_from_forgery'. Add 'protect_from_forgery :with => :exception' to your controller class."},"help":{"markdown":"Detected controller which does not enable cross-site request forgery protections using 'protect_from_forgery'. Add 'protect_from_forgery :with => :exception' to your controller class.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.missing-csrf-protection.missing-csrf-protection)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Detected controller which does not enable cross-site request forgery protections using 'protect_from_forgery'. Add 'protect_from_forgery :with => :exception' to your controller class.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/ruby.lang.security.missing-csrf-protection.missing-csrf-protection","id":"ruby.lang.security.missing-csrf-protection.missing-csrf-protection","name":"ruby.lang.security.missing-csrf-protection.missing-csrf-protection","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: ruby.lang.security.missing-csrf-protection.missing-csrf-protection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use of eval with user-controllable input detected. This can lead  to attackers running arbitrary code. Ensure external data does not  reach here, otherwise this is a security vulnerability. Consider  other ways to do this without eval."},"help":{"markdown":"Use of eval with user-controllable input detected. This can lead  to attackers running arbitrary code. Ensure external data does not  reach here, otherwise this is a security vulnerability. Consider  other ways to do this without eval.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.no-eval.ruby-eval)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Use of eval with user-controllable input detected. This can lead  to attackers running arbitrary code. Ensure external data does not  reach here, otherwise this is a security vulnerability. Consider  other ways to do this without eval.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/ruby.lang.security.no-eval.ruby-eval","id":"ruby.lang.security.no-eval.ruby-eval","name":"ruby.lang.security.no-eval.ruby-eval","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: ruby.lang.security.no-eval.ruby-eval"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Checks for unsafe use of Object#send, try, __send__, and public_send. These only account for unsafe use of a method, not target. This can lead to arbitrary calling of exit, along with arbitrary code execution. Please be sure to sanitize input in order to avoid this."},"help":{"markdown":"Checks for unsafe use of Object#send, try, __send__, and public_send. These only account for unsafe use of a method, not target. This can lead to arbitrary calling of exit, along with arbitrary code execution. Please be sure to sanitize input in order to avoid this.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.no-send.bad-send)\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_send.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_send.rb)\n - [https://the.igreque.info/posts/2016/01-object-send-considered-harmful-en.html](https://the.igreque.info/posts/2016/01-object-send-considered-harmful-en.html)\n","text":"Checks for unsafe use of Object#send, try, __send__, and public_send. These only account for unsafe use of a method, not target. This can lead to arbitrary calling of exit, along with arbitrary code execution. Please be sure to sanitize input in order to avoid this.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/ruby.lang.security.no-send.bad-send","id":"ruby.lang.security.no-send.bad-send","name":"ruby.lang.security.no-send.bad-send","properties":{"precision":"very-high","tags":["CWE-94: Improper Control of Generation of Code ('Code Injection')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: ruby.lang.security.no-send.bad-send"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SSL that will accept an unverified connection. This makes the connections susceptible to man-in-the-middle attacks. Use 'OpenSSL::SSL::VERIFY_PEER' instead."},"help":{"markdown":"Detected SSL that will accept an unverified connection. This makes the connections susceptible to man-in-the-middle attacks. Use 'OpenSSL::SSL::VERIFY_PEER' instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Detected SSL that will accept an unverified connection. This makes the connections susceptible to man-in-the-middle attacks. Use 'OpenSSL::SSL::VERIFY_PEER' instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify","id":"ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify","name":"ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify","properties":{"precision":"very-high","tags":["CWE-295: Improper Certificate Validation","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checks for calls to without_protection during mass assignment (which allows record creation from hash values). This can lead to users bypassing permissions protections. For Rails 4 and higher, mass protection is on by default. Fix: Don't use :without_protection => true. Instead, configure attr_accessible to control attribute access."},"help":{"markdown":"Checks for calls to without_protection during mass assignment (which allows record creation from hash values). This can lead to users bypassing permissions protections. For Rails 4 and higher, mass protection is on by default. Fix: Don't use :without_protection => true. Instead, configure attr_accessible to control attribute access.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.unprotected-mass-assign.mass-assignment-vuln)\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_without_protection.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_without_protection.rb)\n - [https://www.acunetix.com/vulnerabilities/web/rails-mass-assignment/](https://www.acunetix.com/vulnerabilities/web/rails-mass-assignment/)\n","text":"Checks for calls to without_protection during mass assignment (which allows record creation from hash values). This can lead to users bypassing permissions protections. For Rails 4 and higher, mass protection is on by default. Fix: Don't use :without_protection => true. Instead, configure attr_accessible to control attribute access.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/ruby.lang.security.unprotected-mass-assign.mass-assignment-vuln","id":"ruby.lang.security.unprotected-mass-assign.mass-assignment-vuln","name":"ruby.lang.security.unprotected-mass-assign.mass-assignment-vuln","properties":{"precision":"very-high","tags":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes","LOW CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: ruby.lang.security.unprotected-mass-assign.mass-assignment-vuln"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead."},"help":{"markdown":"Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.weak-hashes-md5.weak-hashes-md5)\n - [https://www.ibm.com/support/pages/security-bulletin-vulnerability-md5-signature-and-hash-algorithm-affects-sterling-integrator-and-sterling-file-gateway-cve-2015-7575](https://www.ibm.com/support/pages/security-bulletin-vulnerability-md5-signature-and-hash-algorithm-affects-sterling-integrator-and-sterling-file-gateway-cve-2015-7575)\n","text":"Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/ruby.lang.security.weak-hashes-md5.weak-hashes-md5","id":"ruby.lang.security.weak-hashes-md5.weak-hashes-md5","name":"ruby.lang.security.weak-hashes-md5.weak-hashes-md5","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: ruby.lang.security.weak-hashes-md5.weak-hashes-md5"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead."},"help":{"markdown":"Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1)\n - [https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html](https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html)\n - [https://shattered.io/](https://shattered.io/)\n","text":"Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1","id":"ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1","name":"ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/terraform.aws.security.aws-lambda-environment-credentials.aws-lambda-environment-credentials)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/terraform.aws.security.aws-lambda-environment-credentials.aws-lambda-environment-credentials","id":"terraform.aws.security.aws-lambda-environment-credentials.aws-lambda-environment-credentials","name":"terraform.aws.security.aws-lambda-environment-credentials.aws-lambda-environment-credentials","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: terraform.aws.security.aws-lambda-environment-credentials.aws-lambda-environment-credentials"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials","id":"terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials","name":"terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The vpc_config resource inside the eks cluster has not explicitly disabled public endpoint access"},"help":{"markdown":"The vpc_config resource inside the eks cluster has not explicitly disabled public endpoint access\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/terraform.lang.security.eks-public-endpoint-enabled.eks-public-endpoint-enabled)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"The vpc_config resource inside the eks cluster has not explicitly disabled public endpoint access\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/terraform.lang.security.eks-public-endpoint-enabled.eks-public-endpoint-enabled","id":"terraform.lang.security.eks-public-endpoint-enabled.eks-public-endpoint-enabled","name":"terraform.lang.security.eks-public-endpoint-enabled.eks-public-endpoint-enabled","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: terraform.lang.security.eks-public-endpoint-enabled.eks-public-endpoint-enabled"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"RDS instance or cluster with hardcoded credentials in source code. It is recommended to pass the credentials at runtime, or generate random credentials using the random_password resource."},"help":{"markdown":"RDS instance or cluster with hardcoded credentials in source code. It is recommended to pass the credentials at runtime, or generate random credentials using the random_password resource.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/terraform.lang.security.rds-insecure-password-storage-in-source-code.rds-insecure-password-storage-in-source-code)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#master_password](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#master_password)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster#master_password](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster#master_password)\n - [https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/password](https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/password)\n","text":"RDS instance or cluster with hardcoded credentials in source code. It is recommended to pass the credentials at runtime, or generate random credentials using the random_password resource.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/terraform.lang.security.rds-insecure-password-storage-in-source-code.rds-insecure-password-storage-in-source-code","id":"terraform.lang.security.rds-insecure-password-storage-in-source-code.rds-insecure-password-storage-in-source-code","name":"terraform.lang.security.rds-insecure-password-storage-in-source-code.rds-insecure-password-storage-in-source-code","properties":{"precision":"very-high","tags":["CWE-522: Insufficiently Protected Credentials","MEDIUM CONFIDENCE","OWASP-A02:2017 - Broken Authentication","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Semgrep Finding: terraform.lang.security.rds-insecure-password-storage-in-source-code.rds-insecure-password-storage-in-source-code"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"CORS rule on bucket permits any origin"},"help":{"markdown":"CORS rule on bucket permits any origin\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/terraform.lang.security.s3-cors-all-origins.all-origins-allowed)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#using-cors](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#using-cors)\n","text":"CORS rule on bucket permits any origin\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/terraform.lang.security.s3-cors-all-origins.all-origins-allowed","id":"terraform.lang.security.s3-cors-all-origins.all-origins-allowed","name":"terraform.lang.security.s3-cors-all-origins.all-origins-allowed","properties":{"precision":"very-high","tags":["CWE-942: Permissive Cross-domain Policy with Untrusted Domains","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: terraform.lang.security.s3-cors-all-origins.all-origins-allowed"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"S3 bucket with public read-write access detected."},"help":{"markdown":"S3 bucket with public read-write access detected.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#acl](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#acl)\n - [https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl)\n","text":"S3 bucket with public read-write access detected.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket","id":"terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket","name":"terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket","properties":{"precision":"very-high","tags":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML."},"help":{"markdown":"Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml)\n - [https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html](https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html)\n","text":"Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml","id":"typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml","name":"typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Unencrypted request over HTTP detected."},"help":{"markdown":"Unencrypted request over HTTP detected.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/typescript.react.security.react-insecure-request.react-insecure-request)\n - [https://www.npmjs.com/package/axios](https://www.npmjs.com/package/axios)\n","text":"Unencrypted request over HTTP detected.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/typescript.react.security.react-insecure-request.react-insecure-request","id":"typescript.react.security.react-insecure-request.react-insecure-request","name":"typescript.react.security.react-insecure-request.react-insecure-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: typescript.react.security.react-insecure-request.react-insecure-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Overwriting `transformLinkUri` or `transformImageUri` to something insecure, or turning `allowDangerousHtml` on, or turning `escapeHtml` off, will open the code up to XSS vectors."},"help":{"markdown":"Overwriting `transformLinkUri` or `transformImageUri` to something insecure, or turning `allowDangerousHtml` on, or turning `escapeHtml` off, will open the code up to XSS vectors.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html)\n - [https://www.npmjs.com/package/react-markdown#security](https://www.npmjs.com/package/react-markdown#security)\n","text":"Overwriting `transformLinkUri` or `transformImageUri` to something insecure, or turning `allowDangerousHtml` on, or turning `escapeHtml` off, will open the code up to XSS vectors.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html","id":"typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html","name":"typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","LOW CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Secrets ($VALUE) should not be stored in infrastructure as code files. Use an alternative such as Bitnami Sealed Secrets or KSOPS to encrypt Kubernetes Secrets. "},"help":{"markdown":"Secrets ($VALUE) should not be stored in infrastructure as code files. Use an alternative such as Bitnami Sealed Secrets or KSOPS to encrypt Kubernetes Secrets. \n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/yaml.kubernetes.security.secrets-in-config-file.secrets-in-config-file)\n - [https://kubernetes.io/docs/concepts/configuration/secret/](https://kubernetes.io/docs/concepts/configuration/secret/)\n - [https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/0/CTR_Kubernetes_Hardening_Guidance_1.1_20220315.PDF](https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/0/CTR_Kubernetes_Hardening_Guidance_1.1_20220315.PDF)\n - [https://docs.gitlab.com/ee/user/clusters/agent/gitops/secrets_management.html](https://docs.gitlab.com/ee/user/clusters/agent/gitops/secrets_management.html)\n - [https://www.cncf.io/blog/2021/04/22/revealing-the-secrets-of-kubernetes-secrets/](https://www.cncf.io/blog/2021/04/22/revealing-the-secrets-of-kubernetes-secrets/)\n - [https://github.com/bitnami-labs/sealed-secrets](https://github.com/bitnami-labs/sealed-secrets)\n - [https://www.cncf.io/blog/2022/01/25/secrets-management-essential-when-using-kubernetes/](https://www.cncf.io/blog/2022/01/25/secrets-management-essential-when-using-kubernetes/)\n - [https://blog.oddbit.com/post/2021-03-09-getting-started-with-ksops/](https://blog.oddbit.com/post/2021-03-09-getting-started-with-ksops/)\n","text":"Secrets ($VALUE) should not be stored in infrastructure as code files. Use an alternative such as Bitnami Sealed Secrets or KSOPS to encrypt Kubernetes Secrets. \nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/yaml.kubernetes.security.secrets-in-config-file.secrets-in-config-file","id":"yaml.kubernetes.security.secrets-in-config-file.secrets-in-config-file","name":"yaml.kubernetes.security.secrets-in-config-file.secrets-in-config-file","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: yaml.kubernetes.security.secrets-in-config-file.secrets-in-config-file"}}],"semanticVersion":"1.128.1"}}}],"$schema":"https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/schemas/sarif-schema-2.1.0.json"}